
SDencoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004db4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004f94  08004f94  00005f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005010  08005010  00007080  2**0
                  CONTENTS
  4 .ARM          00000008  08005010  08005010  00006010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005018  08005018  00007080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005018  08005018  00006018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800501c  0800501c  0000601c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08005020  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000080  080050a0  00007080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  080050a0  00007430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001506d  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c8d  00000000  00000000  0001c11d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0001edb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef8  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000203ac  00000000  00000000  00020fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f8a  00000000  00000000  00041394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca972  00000000  00000000  0005831e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122c90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005964  00000000  00000000  00122cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00128638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004f7c 	.word	0x08004f7c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	08004f7c 	.word	0x08004f7c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <read_encoder_value>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int16_t read_encoder_value(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
  int32_t count_t = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
  uint32_t enc_buff = TIM2->CNT;
 80005ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005c0:	603b      	str	r3, [r7, #0]
  TIM2->CNT = 0;
 80005c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005c6:	2200      	movs	r2, #0
 80005c8:	625a      	str	r2, [r3, #36]	@ 0x24
    count_t = (int32_t)enc_buff*-1;
    //printf("-\r\n");
  }
  else
  {
    count_t = (int32_t)enc_buff;
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	607b      	str	r3, [r7, #4]
  }
  return (int16_t)count_t;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	b21b      	sxth	r3, r3
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
	...

080005e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	if(htim == &htim16){
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000614 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d10c      	bne.n	800060a <HAL_TIM_PeriodElapsedCallback+0x2a>
		count = read_encoder_value();
 80005f0:	f7ff ffde 	bl	80005b0 <read_encoder_value>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80005fa:	601a      	str	r2, [r3, #0]
		//printf("count:%d\r\n",count);
		cnt += count;
 80005fc:	4b07      	ldr	r3, [pc, #28]	@ (800061c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b05      	ldr	r3, [pc, #20]	@ (8000618 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4413      	add	r3, r2
 8000606:	4a05      	ldr	r2, [pc, #20]	@ (800061c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000608:	6013      	str	r3, [r2, #0]
	}
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	2000014c 	.word	0x2000014c
 8000618:	200002c4 	.word	0x200002c4
 800061c:	200002c0 	.word	0x200002c0

08000620 <_write>:

int _write(int file, char *ptr, int len)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	b29a      	uxth	r2, r3
 8000630:	230a      	movs	r3, #10
 8000632:	68b9      	ldr	r1, [r7, #8]
 8000634:	4803      	ldr	r0, [pc, #12]	@ (8000644 <_write+0x24>)
 8000636:	f002 fd65 	bl	8003104 <HAL_UART_Transmit>
  return len;
 800063a:	687b      	ldr	r3, [r7, #4]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000022c 	.word	0x2000022c

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800064c:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <main+0x64>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f003 fd71 	bl	800413c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fc6a 	bl	8000f32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f82f 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 f9bd 	bl	80009e0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000666:	f000 f923 	bl	80008b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800066a:	f000 f96d 	bl	8000948 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800066e:	f000 f867 	bl	8000740 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000672:	f000 f8a3 	bl	80007bc <MX_TIM2_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000676:	f003 fbc1 	bl	8003dfc <MX_FATFS_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <main+0x3c>
    Error_Handler();
 8000680:	f000 f9d2 	bl	8000a28 <Error_Handler>
  }
  MX_TIM16_Init();
 8000684:	f000 f8ee 	bl	8000864 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start( &htim2, TIM_CHANNEL_ALL );
 8000688:	213c      	movs	r1, #60	@ 0x3c
 800068a:	4809      	ldr	r0, [pc, #36]	@ (80006b0 <main+0x68>)
 800068c:	f002 f95a 	bl	8002944 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim16);
 8000690:	4808      	ldr	r0, [pc, #32]	@ (80006b4 <main+0x6c>)
 8000692:	f002 f847 	bl	8002724 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //cnt = __HAL_TIM_GET_COUNTER(&htim2);
	  printf("%d\r\n",cnt);
 8000696:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <main+0x70>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4619      	mov	r1, r3
 800069c:	4807      	ldr	r0, [pc, #28]	@ (80006bc <main+0x74>)
 800069e:	f003 fd3b 	bl	8004118 <iprintf>
	  //printf("count:%d\r\n",count);
	  HAL_Delay(100);
 80006a2:	2064      	movs	r0, #100	@ 0x64
 80006a4:	f000 fcb6 	bl	8001014 <HAL_Delay>
	  printf("%d\r\n",cnt);
 80006a8:	bf00      	nop
 80006aa:	e7f4      	b.n	8000696 <main+0x4e>
 80006ac:	20000030 	.word	0x20000030
 80006b0:	20000100 	.word	0x20000100
 80006b4:	2000014c 	.word	0x2000014c
 80006b8:	200002c0 	.word	0x200002c0
 80006bc:	08004f94 	.word	0x08004f94

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	@ 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0318 	add.w	r3, r7, #24
 80006ca:	2238      	movs	r2, #56	@ 0x38
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 fe33 	bl	800433a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006e6:	f000 ff49 	bl	800157c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ea:	2302      	movs	r3, #2
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006f2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2340      	movs	r3, #64	@ 0x40
 80006f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0318 	add.w	r3, r7, #24
 8000700:	4618      	mov	r0, r3
 8000702:	f000 ffef 	bl	80016e4 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800070c:	f000 f98c 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000714:	2301      	movs	r3, #1
 8000716:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f001 faed 	bl	8001d08 <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000734:	f000 f978 	bl	8000a28 <Error_Handler>
  }
}
 8000738:	bf00      	nop
 800073a:	3750      	adds	r7, #80	@ 0x50
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000744:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <MX_SPI1_Init+0x74>)
 8000746:	4a1c      	ldr	r2, [pc, #112]	@ (80007b8 <MX_SPI1_Init+0x78>)
 8000748:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074a:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <MX_SPI1_Init+0x74>)
 800074c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000750:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000752:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <MX_SPI1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000758:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <MX_SPI1_Init+0x74>)
 800075a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800075e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000760:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_SPI1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000766:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <MX_SPI1_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_SPI1_Init+0x74>)
 800076e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000772:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_SPI1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_SPI1_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_SPI1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <MX_SPI1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_SPI1_Init+0x74>)
 800078e:	2207      	movs	r2, #7
 8000790:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <MX_SPI1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_SPI1_Init+0x74>)
 800079a:	2208      	movs	r2, #8
 800079c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_SPI1_Init+0x74>)
 80007a0:	f001 febe 	bl	8002520 <HAL_SPI_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007aa:	f000 f93d 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000009c 	.word	0x2000009c
 80007b8:	40013000 	.word	0x40013000

080007bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	@ 0x30
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2224      	movs	r2, #36	@ 0x24
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 fdb5 	bl	800433a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007da:	4b21      	ldr	r3, [pc, #132]	@ (8000860 <MX_TIM2_Init+0xa4>)
 80007dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <MX_TIM2_Init+0xa4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000860 <MX_TIM2_Init+0xa4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000860 <MX_TIM2_Init+0xa4>)
 80007f0:	f04f 32ff 	mov.w	r2, #4294967295
 80007f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <MX_TIM2_Init+0xa4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fc:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <MX_TIM2_Init+0xa4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000802:	2303      	movs	r3, #3
 8000804:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800080a:	2301      	movs	r3, #1
 800080c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800081a:	2301      	movs	r3, #1
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	480c      	ldr	r0, [pc, #48]	@ (8000860 <MX_TIM2_Init+0xa4>)
 800082e:	f001 ffe3 	bl	80027f8 <HAL_TIM_Encoder_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000838:	f000 f8f6 	bl	8000a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083c:	2300      	movs	r3, #0
 800083e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000844:	463b      	mov	r3, r7
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_TIM2_Init+0xa4>)
 800084a:	f002 fb43 	bl	8002ed4 <HAL_TIMEx_MasterConfigSynchronization>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000854:	f000 f8e8 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	3730      	adds	r7, #48	@ 0x30
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000100 	.word	0x20000100

08000864 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_TIM16_Init+0x44>)
 800086a:	4a10      	ldr	r2, [pc, #64]	@ (80008ac <MX_TIM16_Init+0x48>)
 800086c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_TIM16_Init+0x44>)
 8000870:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000874:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000876:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_TIM16_Init+0x44>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 800087c:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <MX_TIM16_Init+0x44>)
 800087e:	2263      	movs	r2, #99	@ 0x63
 8000880:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_TIM16_Init+0x44>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000888:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <MX_TIM16_Init+0x44>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_TIM16_Init+0x44>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	@ (80008a8 <MX_TIM16_Init+0x44>)
 8000896:	f001 feee 	bl	8002676 <HAL_TIM_Base_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80008a0:	f000 f8c2 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000014c 	.word	0x2000014c
 80008ac:	40014400 	.word	0x40014400

080008b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b4:	4b22      	ldr	r3, [pc, #136]	@ (8000940 <MX_USART1_UART_Init+0x90>)
 80008b6:	4a23      	ldr	r2, [pc, #140]	@ (8000944 <MX_USART1_UART_Init+0x94>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ba:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <MX_USART1_UART_Init+0x90>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <MX_USART1_UART_Init+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000940 <MX_USART1_UART_Init+0x90>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <MX_USART1_UART_Init+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000940 <MX_USART1_UART_Init+0x90>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <MX_USART1_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <MX_USART1_UART_Init+0x90>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <MX_USART1_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ec:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <MX_USART1_UART_Init+0x90>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f2:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <MX_USART1_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f8:	4811      	ldr	r0, [pc, #68]	@ (8000940 <MX_USART1_UART_Init+0x90>)
 80008fa:	f002 fbb3 	bl	8003064 <HAL_UART_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000904:	f000 f890 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000908:	2100      	movs	r1, #0
 800090a:	480d      	ldr	r0, [pc, #52]	@ (8000940 <MX_USART1_UART_Init+0x90>)
 800090c:	f003 f9ac 	bl	8003c68 <HAL_UARTEx_SetTxFifoThreshold>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000916:	f000 f887 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091a:	2100      	movs	r1, #0
 800091c:	4808      	ldr	r0, [pc, #32]	@ (8000940 <MX_USART1_UART_Init+0x90>)
 800091e:	f003 f9e1 	bl	8003ce4 <HAL_UARTEx_SetRxFifoThreshold>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000928:	f000 f87e 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	@ (8000940 <MX_USART1_UART_Init+0x90>)
 800092e:	f003 f962 	bl	8003bf6 <HAL_UARTEx_DisableFifoMode>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000938:	f000 f876 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000198 	.word	0x20000198
 8000944:	40013800 	.word	0x40013800

08000948 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800094c:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <MX_USART2_UART_Init+0x90>)
 800094e:	4a23      	ldr	r2, [pc, #140]	@ (80009dc <MX_USART2_UART_Init+0x94>)
 8000950:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000952:	4b21      	ldr	r3, [pc, #132]	@ (80009d8 <MX_USART2_UART_Init+0x90>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <MX_USART2_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b1d      	ldr	r3, [pc, #116]	@ (80009d8 <MX_USART2_UART_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000966:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <MX_USART2_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <MX_USART2_UART_Init+0x90>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <MX_USART2_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <MX_USART2_UART_Init+0x90>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097e:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <MX_USART2_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_USART2_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098a:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <MX_USART2_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000990:	4811      	ldr	r0, [pc, #68]	@ (80009d8 <MX_USART2_UART_Init+0x90>)
 8000992:	f002 fb67 	bl	8003064 <HAL_UART_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800099c:	f000 f844 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a0:	2100      	movs	r1, #0
 80009a2:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <MX_USART2_UART_Init+0x90>)
 80009a4:	f003 f960 	bl	8003c68 <HAL_UARTEx_SetTxFifoThreshold>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009ae:	f000 f83b 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4808      	ldr	r0, [pc, #32]	@ (80009d8 <MX_USART2_UART_Init+0x90>)
 80009b6:	f003 f995 	bl	8003ce4 <HAL_UARTEx_SetRxFifoThreshold>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009c0:	f000 f832 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_USART2_UART_Init+0x90>)
 80009c6:	f003 f916 	bl	8003bf6 <HAL_UARTEx_DisableFifoMode>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009d0:	f000 f82a 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	2000022c 	.word	0x2000022c
 80009dc:	40004400 	.word	0x40004400

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <MX_GPIO_Init+0x44>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000a24 <MX_GPIO_Init+0x44>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <MX_GPIO_Init+0x44>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <MX_GPIO_Init+0x44>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	4a08      	ldr	r2, [pc, #32]	@ (8000a24 <MX_GPIO_Init+0x44>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a0a:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <MX_GPIO_Init+0x44>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <Error_Handler+0x8>

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a46:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a56:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a6a:	f000 fe2b 	bl	80016c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000

08000a7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a17      	ldr	r2, [pc, #92]	@ (8000af8 <HAL_SPI_MspInit+0x7c>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d128      	bne.n	8000af0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a9e:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <HAL_SPI_MspInit+0x80>)
 8000aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aa2:	4a16      	ldr	r2, [pc, #88]	@ (8000afc <HAL_SPI_MspInit+0x80>)
 8000aa4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000aa8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aaa:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <HAL_SPI_MspInit+0x80>)
 8000aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <HAL_SPI_MspInit+0x80>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	4a10      	ldr	r2, [pc, #64]	@ (8000afc <HAL_SPI_MspInit+0x80>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <HAL_SPI_MspInit+0x80>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ace:	23e0      	movs	r3, #224	@ 0xe0
 8000ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ade:	2305      	movs	r3, #5
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aec:	f000 fbc4 	bl	8001278 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	@ 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40013000 	.word	0x40013000
 8000afc:	40021000 	.word	0x40021000

08000b00 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b20:	d128      	bne.n	8000b74 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b22:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b26:	4a15      	ldr	r2, [pc, #84]	@ (8000b7c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b2e:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b7c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b46:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b52:	2303      	movs	r3, #3
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b62:	2301      	movs	r3, #1
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b70:	f000 fb82 	bl	8001278 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	@ 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40021000 	.word	0x40021000

08000b80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc4 <HAL_TIM_Base_MspInit+0x44>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d113      	bne.n	8000bba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b92:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc8 <HAL_TIM_Base_MspInit+0x48>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b96:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc8 <HAL_TIM_Base_MspInit+0x48>)
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <HAL_TIM_Base_MspInit+0x48>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	2019      	movs	r0, #25
 8000bb0:	f000 fb2d 	bl	800120e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bb4:	2019      	movs	r0, #25
 8000bb6:	f000 fb44 	bl	8001242 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40014400 	.word	0x40014400
 8000bc8:	40021000 	.word	0x40021000

08000bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b09e      	sub	sp, #120	@ 0x78
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be4:	f107 0320 	add.w	r3, r7, #32
 8000be8:	2244      	movs	r2, #68	@ 0x44
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f003 fba4 	bl	800433a <memset>
  if(huart->Instance==USART1)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a4c      	ldr	r2, [pc, #304]	@ (8000d28 <HAL_UART_MspInit+0x15c>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d154      	bne.n	8000ca6 <HAL_UART_MspInit+0xda>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c04:	f107 0320 	add.w	r3, r7, #32
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 fa99 	bl	8002140 <HAL_RCCEx_PeriphCLKConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c14:	f7ff ff08 	bl	8000a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c18:	4b44      	ldr	r3, [pc, #272]	@ (8000d2c <HAL_UART_MspInit+0x160>)
 8000c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c1c:	4a43      	ldr	r2, [pc, #268]	@ (8000d2c <HAL_UART_MspInit+0x160>)
 8000c1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c22:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c24:	4b41      	ldr	r3, [pc, #260]	@ (8000d2c <HAL_UART_MspInit+0x160>)
 8000c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	4b3e      	ldr	r3, [pc, #248]	@ (8000d2c <HAL_UART_MspInit+0x160>)
 8000c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c34:	4a3d      	ldr	r2, [pc, #244]	@ (8000d2c <HAL_UART_MspInit+0x160>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d2c <HAL_UART_MspInit+0x160>)
 8000c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c48:	4b38      	ldr	r3, [pc, #224]	@ (8000d2c <HAL_UART_MspInit+0x160>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4c:	4a37      	ldr	r2, [pc, #220]	@ (8000d2c <HAL_UART_MspInit+0x160>)
 8000c4e:	f043 0302 	orr.w	r3, r3, #2
 8000c52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c54:	4b35      	ldr	r3, [pc, #212]	@ (8000d2c <HAL_UART_MspInit+0x160>)
 8000c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c64:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c72:	2307      	movs	r3, #7
 8000c74:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c80:	f000 fafa 	bl	8001278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c84:	2340      	movs	r3, #64	@ 0x40
 8000c86:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c94:	2307      	movs	r3, #7
 8000c96:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4824      	ldr	r0, [pc, #144]	@ (8000d30 <HAL_UART_MspInit+0x164>)
 8000ca0:	f000 faea 	bl	8001278 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ca4:	e03b      	b.n	8000d1e <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART2)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a22      	ldr	r2, [pc, #136]	@ (8000d34 <HAL_UART_MspInit+0x168>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d136      	bne.n	8000d1e <HAL_UART_MspInit+0x152>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb8:	f107 0320 	add.w	r3, r7, #32
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 fa3f 	bl	8002140 <HAL_RCCEx_PeriphCLKConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_UART_MspInit+0x100>
      Error_Handler();
 8000cc8:	f7ff feae 	bl	8000a28 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ccc:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <HAL_UART_MspInit+0x160>)
 8000cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd0:	4a16      	ldr	r2, [pc, #88]	@ (8000d2c <HAL_UART_MspInit+0x160>)
 8000cd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cd8:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <HAL_UART_MspInit+0x160>)
 8000cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <HAL_UART_MspInit+0x160>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce8:	4a10      	ldr	r2, [pc, #64]	@ (8000d2c <HAL_UART_MspInit+0x160>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <HAL_UART_MspInit+0x160>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d14:	4619      	mov	r1, r3
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1a:	f000 faad 	bl	8001278 <HAL_GPIO_Init>
}
 8000d1e:	bf00      	nop
 8000d20:	3778      	adds	r7, #120	@ 0x78
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40013800 	.word	0x40013800
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	48000400 	.word	0x48000400
 8000d34:	40004400 	.word	0x40004400

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <NMI_Handler+0x4>

08000d40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <MemManage_Handler+0x4>

08000d50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8e:	f000 f923 	bl	8000fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000d9c:	4802      	ldr	r0, [pc, #8]	@ (8000da8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d9e:	f001 fe5f 	bl	8002a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000014c 	.word	0x2000014c

08000dac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	e00a      	b.n	8000dd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dbe:	f3af 8000 	nop.w
 8000dc2:	4601      	mov	r1, r0
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	1c5a      	adds	r2, r3, #1
 8000dc8:	60ba      	str	r2, [r7, #8]
 8000dca:	b2ca      	uxtb	r2, r1
 8000dcc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dbf0      	blt.n	8000dbe <_read+0x12>
  }

  return len;
 8000ddc:	687b      	ldr	r3, [r7, #4]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e0e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <_isatty>:

int _isatty(int file)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e58:	4a14      	ldr	r2, [pc, #80]	@ (8000eac <_sbrk+0x5c>)
 8000e5a:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <_sbrk+0x60>)
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e64:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <_sbrk+0x64>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	@ (8000eb8 <_sbrk+0x68>)
 8000e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e72:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d207      	bcs.n	8000e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e80:	f003 faaa 	bl	80043d8 <__errno>
 8000e84:	4603      	mov	r3, r0
 8000e86:	220c      	movs	r2, #12
 8000e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	e009      	b.n	8000ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e96:	4b07      	ldr	r3, [pc, #28]	@ (8000eb4 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	4a05      	ldr	r2, [pc, #20]	@ (8000eb4 <_sbrk+0x64>)
 8000ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20008000 	.word	0x20008000
 8000eb0:	00000400 	.word	0x00000400
 8000eb4:	200002c8 	.word	0x200002c8
 8000eb8:	20000430 	.word	0x20000430

08000ebc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <SystemInit+0x20>)
 8000ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ec6:	4a05      	ldr	r2, [pc, #20]	@ (8000edc <SystemInit+0x20>)
 8000ec8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ecc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ee0:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ee2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee4:	f7ff ffea 	bl	8000ebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee8:	480c      	ldr	r0, [pc, #48]	@ (8000f1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000eea:	490d      	ldr	r1, [pc, #52]	@ (8000f20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eec:	4a0d      	ldr	r2, [pc, #52]	@ (8000f24 <LoopForever+0xe>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a0a      	ldr	r2, [pc, #40]	@ (8000f28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f00:	4c0a      	ldr	r4, [pc, #40]	@ (8000f2c <LoopForever+0x16>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f003 fa69 	bl	80043e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f12:	f7ff fb99 	bl	8000648 <main>

08000f16 <LoopForever>:

LoopForever:
    b LoopForever
 8000f16:	e7fe      	b.n	8000f16 <LoopForever>
  ldr   r0, =_estack
 8000f18:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000f24:	08005020 	.word	0x08005020
  ldr r2, =_sbss
 8000f28:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000f2c:	20000430 	.word	0x20000430

08000f30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC1_2_IRQHandler>

08000f32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 f95b 	bl	80011f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f42:	200f      	movs	r0, #15
 8000f44:	f000 f80e 	bl	8000f64 <HAL_InitTick>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d002      	beq.n	8000f54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	71fb      	strb	r3, [r7, #7]
 8000f52:	e001      	b.n	8000f58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f54:	f7ff fd6e 	bl	8000a34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f58:	79fb      	ldrb	r3, [r7, #7]

}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f70:	4b16      	ldr	r3, [pc, #88]	@ (8000fcc <HAL_InitTick+0x68>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d022      	beq.n	8000fbe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f78:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <HAL_InitTick+0x6c>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <HAL_InitTick+0x68>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f84:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 f966 	bl	800125e <HAL_SYSTICK_Config>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d10f      	bne.n	8000fb8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b0f      	cmp	r3, #15
 8000f9c:	d809      	bhi.n	8000fb2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa6:	f000 f932 	bl	800120e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000faa:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <HAL_InitTick+0x70>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	e007      	b.n	8000fc2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	e004      	b.n	8000fc2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	e001      	b.n	8000fc2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fdc:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <HAL_IncTick+0x1c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <HAL_IncTick+0x20>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a03      	ldr	r2, [pc, #12]	@ (8000ff4 <HAL_IncTick+0x1c>)
 8000fe8:	6013      	str	r3, [r2, #0]
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	200002cc 	.word	0x200002cc
 8000ff8:	20000008 	.word	0x20000008

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200002cc 	.word	0x200002cc

08001014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800101c:	f7ff ffee 	bl	8000ffc <HAL_GetTick>
 8001020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102c:	d004      	beq.n	8001038 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <HAL_Delay+0x40>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001038:	bf00      	nop
 800103a:	f7ff ffdf 	bl	8000ffc <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d8f7      	bhi.n	800103a <HAL_Delay+0x26>
  {
  }
}
 800104a:	bf00      	nop
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000008 	.word	0x20000008

08001058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001068:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001074:	4013      	ands	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001080:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108a:	4a04      	ldr	r2, [pc, #16]	@ (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	60d3      	str	r3, [r2, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a4:	4b04      	ldr	r3, [pc, #16]	@ (80010b8 <__NVIC_GetPriorityGrouping+0x18>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	f003 0307 	and.w	r3, r3, #7
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	db0b      	blt.n	80010e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f003 021f 	and.w	r2, r3, #31
 80010d4:	4907      	ldr	r1, [pc, #28]	@ (80010f4 <__NVIC_EnableIRQ+0x38>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	095b      	lsrs	r3, r3, #5
 80010dc:	2001      	movs	r0, #1
 80010de:	fa00 f202 	lsl.w	r2, r0, r2
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000e100 	.word	0xe000e100

080010f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db0a      	blt.n	8001122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	490c      	ldr	r1, [pc, #48]	@ (8001144 <__NVIC_SetPriority+0x4c>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	440b      	add	r3, r1
 800111c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001120:	e00a      	b.n	8001138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4908      	ldr	r1, [pc, #32]	@ (8001148 <__NVIC_SetPriority+0x50>)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	3b04      	subs	r3, #4
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	440b      	add	r3, r1
 8001136:	761a      	strb	r2, [r3, #24]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	@ 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f1c3 0307 	rsb	r3, r3, #7
 8001166:	2b04      	cmp	r3, #4
 8001168:	bf28      	it	cs
 800116a:	2304      	movcs	r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3304      	adds	r3, #4
 8001172:	2b06      	cmp	r3, #6
 8001174:	d902      	bls.n	800117c <NVIC_EncodePriority+0x30>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3b03      	subs	r3, #3
 800117a:	e000      	b.n	800117e <NVIC_EncodePriority+0x32>
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	f04f 32ff 	mov.w	r2, #4294967295
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001194:	f04f 31ff 	mov.w	r1, #4294967295
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43d9      	mvns	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	4313      	orrs	r3, r2
         );
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3724      	adds	r7, #36	@ 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011c4:	d301      	bcc.n	80011ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00f      	b.n	80011ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ca:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <SysTick_Config+0x40>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d2:	210f      	movs	r1, #15
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f7ff ff8e 	bl	80010f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <SysTick_Config+0x40>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e2:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <SysTick_Config+0x40>)
 80011e4:	2207      	movs	r2, #7
 80011e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	e000e010 	.word	0xe000e010

080011f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ff29 	bl	8001058 <__NVIC_SetPriorityGrouping>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800121c:	f7ff ff40 	bl	80010a0 <__NVIC_GetPriorityGrouping>
 8001220:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	f7ff ff90 	bl	800114c <NVIC_EncodePriority>
 800122c:	4602      	mov	r2, r0
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff5f 	bl	80010f8 <__NVIC_SetPriority>
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff33 	bl	80010bc <__NVIC_EnableIRQ>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffa4 	bl	80011b4 <SysTick_Config>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001278:	b480      	push	{r7}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001286:	e15a      	b.n	800153e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	2101      	movs	r1, #1
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	fa01 f303 	lsl.w	r3, r1, r3
 8001294:	4013      	ands	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 814c 	beq.w	8001538 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d005      	beq.n	80012b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d130      	bne.n	800131a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ee:	2201      	movs	r2, #1
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	091b      	lsrs	r3, r3, #4
 8001304:	f003 0201 	and.w	r2, r3, #1
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	2b03      	cmp	r3, #3
 8001324:	d017      	beq.n	8001356 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d123      	bne.n	80013aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	08da      	lsrs	r2, r3, #3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3208      	adds	r2, #8
 800136a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	220f      	movs	r2, #15
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	691a      	ldr	r2, [r3, #16]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	08da      	lsrs	r2, r3, #3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3208      	adds	r2, #8
 80013a4:	6939      	ldr	r1, [r7, #16]
 80013a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	2203      	movs	r2, #3
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0203 	and.w	r2, r3, #3
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 80a6 	beq.w	8001538 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ec:	4b5b      	ldr	r3, [pc, #364]	@ (800155c <HAL_GPIO_Init+0x2e4>)
 80013ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f0:	4a5a      	ldr	r2, [pc, #360]	@ (800155c <HAL_GPIO_Init+0x2e4>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80013f8:	4b58      	ldr	r3, [pc, #352]	@ (800155c <HAL_GPIO_Init+0x2e4>)
 80013fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001404:	4a56      	ldr	r2, [pc, #344]	@ (8001560 <HAL_GPIO_Init+0x2e8>)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	3302      	adds	r3, #2
 800140c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	220f      	movs	r2, #15
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800142e:	d01f      	beq.n	8001470 <HAL_GPIO_Init+0x1f8>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a4c      	ldr	r2, [pc, #304]	@ (8001564 <HAL_GPIO_Init+0x2ec>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d019      	beq.n	800146c <HAL_GPIO_Init+0x1f4>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a4b      	ldr	r2, [pc, #300]	@ (8001568 <HAL_GPIO_Init+0x2f0>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d013      	beq.n	8001468 <HAL_GPIO_Init+0x1f0>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a4a      	ldr	r2, [pc, #296]	@ (800156c <HAL_GPIO_Init+0x2f4>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d00d      	beq.n	8001464 <HAL_GPIO_Init+0x1ec>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a49      	ldr	r2, [pc, #292]	@ (8001570 <HAL_GPIO_Init+0x2f8>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d007      	beq.n	8001460 <HAL_GPIO_Init+0x1e8>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a48      	ldr	r2, [pc, #288]	@ (8001574 <HAL_GPIO_Init+0x2fc>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d101      	bne.n	800145c <HAL_GPIO_Init+0x1e4>
 8001458:	2305      	movs	r3, #5
 800145a:	e00a      	b.n	8001472 <HAL_GPIO_Init+0x1fa>
 800145c:	2306      	movs	r3, #6
 800145e:	e008      	b.n	8001472 <HAL_GPIO_Init+0x1fa>
 8001460:	2304      	movs	r3, #4
 8001462:	e006      	b.n	8001472 <HAL_GPIO_Init+0x1fa>
 8001464:	2303      	movs	r3, #3
 8001466:	e004      	b.n	8001472 <HAL_GPIO_Init+0x1fa>
 8001468:	2302      	movs	r3, #2
 800146a:	e002      	b.n	8001472 <HAL_GPIO_Init+0x1fa>
 800146c:	2301      	movs	r3, #1
 800146e:	e000      	b.n	8001472 <HAL_GPIO_Init+0x1fa>
 8001470:	2300      	movs	r3, #0
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	f002 0203 	and.w	r2, r2, #3
 8001478:	0092      	lsls	r2, r2, #2
 800147a:	4093      	lsls	r3, r2
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001482:	4937      	ldr	r1, [pc, #220]	@ (8001560 <HAL_GPIO_Init+0x2e8>)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001490:	4b39      	ldr	r3, [pc, #228]	@ (8001578 <HAL_GPIO_Init+0x300>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	43db      	mvns	r3, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014b4:	4a30      	ldr	r2, [pc, #192]	@ (8001578 <HAL_GPIO_Init+0x300>)
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001578 <HAL_GPIO_Init+0x300>)
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014de:	4a26      	ldr	r2, [pc, #152]	@ (8001578 <HAL_GPIO_Init+0x300>)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80014e4:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <HAL_GPIO_Init+0x300>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001508:	4a1b      	ldr	r2, [pc, #108]	@ (8001578 <HAL_GPIO_Init+0x300>)
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800150e:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <HAL_GPIO_Init+0x300>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	43db      	mvns	r3, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4313      	orrs	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001532:	4a11      	ldr	r2, [pc, #68]	@ (8001578 <HAL_GPIO_Init+0x300>)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	3301      	adds	r3, #1
 800153c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	fa22 f303 	lsr.w	r3, r2, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	f47f ae9d 	bne.w	8001288 <HAL_GPIO_Init+0x10>
  }
}
 800154e:	bf00      	nop
 8001550:	bf00      	nop
 8001552:	371c      	adds	r7, #28
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40021000 	.word	0x40021000
 8001560:	40010000 	.word	0x40010000
 8001564:	48000400 	.word	0x48000400
 8001568:	48000800 	.word	0x48000800
 800156c:	48000c00 	.word	0x48000c00
 8001570:	48001000 	.word	0x48001000
 8001574:	48001400 	.word	0x48001400
 8001578:	40010400 	.word	0x40010400

0800157c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d141      	bne.n	800160e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800158a:	4b4b      	ldr	r3, [pc, #300]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001596:	d131      	bne.n	80015fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001598:	4b47      	ldr	r3, [pc, #284]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800159e:	4a46      	ldr	r2, [pc, #280]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a8:	4b43      	ldr	r3, [pc, #268]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015b0:	4a41      	ldr	r2, [pc, #260]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015b8:	4b40      	ldr	r3, [pc, #256]	@ (80016bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2232      	movs	r2, #50	@ 0x32
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	4a3f      	ldr	r2, [pc, #252]	@ (80016c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	0c9b      	lsrs	r3, r3, #18
 80015ca:	3301      	adds	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ce:	e002      	b.n	80015d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d6:	4b38      	ldr	r3, [pc, #224]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015e2:	d102      	bne.n	80015ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f2      	bne.n	80015d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015ea:	4b33      	ldr	r3, [pc, #204]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015f6:	d158      	bne.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e057      	b.n	80016ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015fc:	4b2e      	ldr	r3, [pc, #184]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001602:	4a2d      	ldr	r2, [pc, #180]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001604:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001608:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800160c:	e04d      	b.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001614:	d141      	bne.n	800169a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001616:	4b28      	ldr	r3, [pc, #160]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800161e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001622:	d131      	bne.n	8001688 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001624:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800162a:	4a23      	ldr	r2, [pc, #140]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001630:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001634:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800163c:	4a1e      	ldr	r2, [pc, #120]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001642:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001644:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2232      	movs	r2, #50	@ 0x32
 800164a:	fb02 f303 	mul.w	r3, r2, r3
 800164e:	4a1c      	ldr	r2, [pc, #112]	@ (80016c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001650:	fba2 2303 	umull	r2, r3, r2, r3
 8001654:	0c9b      	lsrs	r3, r3, #18
 8001656:	3301      	adds	r3, #1
 8001658:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800165a:	e002      	b.n	8001662 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3b01      	subs	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800166a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800166e:	d102      	bne.n	8001676 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f2      	bne.n	800165c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800167e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001682:	d112      	bne.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e011      	b.n	80016ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001688:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001694:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001698:	e007      	b.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800169a:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016a2:	4a05      	ldr	r2, [pc, #20]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	40007000 	.word	0x40007000
 80016bc:	20000000 	.word	0x20000000
 80016c0:	431bde83 	.word	0x431bde83

080016c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d2:	6093      	str	r3, [r2, #8]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40007000 	.word	0x40007000

080016e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e2fe      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d075      	beq.n	80017ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001702:	4b97      	ldr	r3, [pc, #604]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800170c:	4b94      	ldr	r3, [pc, #592]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	2b0c      	cmp	r3, #12
 800171a:	d102      	bne.n	8001722 <HAL_RCC_OscConfig+0x3e>
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d002      	beq.n	8001728 <HAL_RCC_OscConfig+0x44>
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	2b08      	cmp	r3, #8
 8001726:	d10b      	bne.n	8001740 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001728:	4b8d      	ldr	r3, [pc, #564]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d05b      	beq.n	80017ec <HAL_RCC_OscConfig+0x108>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d157      	bne.n	80017ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e2d9      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001748:	d106      	bne.n	8001758 <HAL_RCC_OscConfig+0x74>
 800174a:	4b85      	ldr	r3, [pc, #532]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a84      	ldr	r2, [pc, #528]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 8001750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	e01d      	b.n	8001794 <HAL_RCC_OscConfig+0xb0>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0x98>
 8001762:	4b7f      	ldr	r3, [pc, #508]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a7e      	ldr	r2, [pc, #504]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 8001768:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b7c      	ldr	r3, [pc, #496]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a7b      	ldr	r2, [pc, #492]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0xb0>
 800177c:	4b78      	ldr	r3, [pc, #480]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a77      	ldr	r2, [pc, #476]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 8001782:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b75      	ldr	r3, [pc, #468]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a74      	ldr	r2, [pc, #464]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 800178e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d013      	beq.n	80017c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff fc2e 	bl	8000ffc <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff fc2a 	bl	8000ffc <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	@ 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e29e      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0xc0>
 80017c2:	e014      	b.n	80017ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff fc1a 	bl	8000ffc <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff fc16 	bl	8000ffc <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	@ 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e28a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017de:	4b60      	ldr	r3, [pc, #384]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0xe8>
 80017ea:	e000      	b.n	80017ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d075      	beq.n	80018e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017fa:	4b59      	ldr	r3, [pc, #356]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001804:	4b56      	ldr	r3, [pc, #344]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	2b0c      	cmp	r3, #12
 8001812:	d102      	bne.n	800181a <HAL_RCC_OscConfig+0x136>
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d002      	beq.n	8001820 <HAL_RCC_OscConfig+0x13c>
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	2b04      	cmp	r3, #4
 800181e:	d11f      	bne.n	8001860 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001820:	4b4f      	ldr	r3, [pc, #316]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_OscConfig+0x154>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e25d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001838:	4b49      	ldr	r3, [pc, #292]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	061b      	lsls	r3, r3, #24
 8001846:	4946      	ldr	r1, [pc, #280]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800184c:	4b45      	ldr	r3, [pc, #276]	@ (8001964 <HAL_RCC_OscConfig+0x280>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fb87 	bl	8000f64 <HAL_InitTick>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d043      	beq.n	80018e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e249      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d023      	beq.n	80018b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001868:	4b3d      	ldr	r3, [pc, #244]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a3c      	ldr	r2, [pc, #240]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 800186e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff fbc2 	bl	8000ffc <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187c:	f7ff fbbe 	bl	8000ffc <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e232      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800188e:	4b34      	ldr	r3, [pc, #208]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189a:	4b31      	ldr	r3, [pc, #196]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	061b      	lsls	r3, r3, #24
 80018a8:	492d      	ldr	r1, [pc, #180]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	604b      	str	r3, [r1, #4]
 80018ae:	e01a      	b.n	80018e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a2a      	ldr	r2, [pc, #168]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 80018b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff fb9e 	bl	8000ffc <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c4:	f7ff fb9a 	bl	8000ffc <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e20e      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d6:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1e0>
 80018e2:	e000      	b.n	80018e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d041      	beq.n	8001976 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d01c      	beq.n	8001934 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fa:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 80018fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001900:	4a17      	ldr	r2, [pc, #92]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190a:	f7ff fb77 	bl	8000ffc <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001912:	f7ff fb73 	bl	8000ffc <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e1e7      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001924:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 8001926:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0ef      	beq.n	8001912 <HAL_RCC_OscConfig+0x22e>
 8001932:	e020      	b.n	8001976 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001934:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 8001936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800193a:	4a09      	ldr	r2, [pc, #36]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff fb5a 	bl	8000ffc <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800194a:	e00d      	b.n	8001968 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194c:	f7ff fb56 	bl	8000ffc <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d906      	bls.n	8001968 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1ca      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000
 8001964:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001968:	4b8c      	ldr	r3, [pc, #560]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 800196a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1ea      	bne.n	800194c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80a6 	beq.w	8001ad0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001988:	4b84      	ldr	r3, [pc, #528]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 800198a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_OscConfig+0x2b4>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x2b6>
 8001998:	2300      	movs	r3, #0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00d      	beq.n	80019ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 80019a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a2:	4a7e      	ldr	r2, [pc, #504]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019aa:	4b7c      	ldr	r3, [pc, #496]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 80019ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019b6:	2301      	movs	r3, #1
 80019b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ba:	4b79      	ldr	r3, [pc, #484]	@ (8001ba0 <HAL_RCC_OscConfig+0x4bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d118      	bne.n	80019f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019c6:	4b76      	ldr	r3, [pc, #472]	@ (8001ba0 <HAL_RCC_OscConfig+0x4bc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a75      	ldr	r2, [pc, #468]	@ (8001ba0 <HAL_RCC_OscConfig+0x4bc>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d2:	f7ff fb13 	bl	8000ffc <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019da:	f7ff fb0f 	bl	8000ffc <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e183      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ec:	4b6c      	ldr	r3, [pc, #432]	@ (8001ba0 <HAL_RCC_OscConfig+0x4bc>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d108      	bne.n	8001a12 <HAL_RCC_OscConfig+0x32e>
 8001a00:	4b66      	ldr	r3, [pc, #408]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a06:	4a65      	ldr	r2, [pc, #404]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a10:	e024      	b.n	8001a5c <HAL_RCC_OscConfig+0x378>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b05      	cmp	r3, #5
 8001a18:	d110      	bne.n	8001a3c <HAL_RCC_OscConfig+0x358>
 8001a1a:	4b60      	ldr	r3, [pc, #384]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a20:	4a5e      	ldr	r2, [pc, #376]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a2a:	4b5c      	ldr	r3, [pc, #368]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a30:	4a5a      	ldr	r2, [pc, #360]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a3a:	e00f      	b.n	8001a5c <HAL_RCC_OscConfig+0x378>
 8001a3c:	4b57      	ldr	r3, [pc, #348]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a42:	4a56      	ldr	r2, [pc, #344]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a4c:	4b53      	ldr	r3, [pc, #332]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a52:	4a52      	ldr	r2, [pc, #328]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d016      	beq.n	8001a92 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff faca 	bl	8000ffc <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fac6 	bl	8000ffc <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e138      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a82:	4b46      	ldr	r3, [pc, #280]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0ed      	beq.n	8001a6c <HAL_RCC_OscConfig+0x388>
 8001a90:	e015      	b.n	8001abe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a92:	f7ff fab3 	bl	8000ffc <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9a:	f7ff faaf 	bl	8000ffc <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e121      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ab0:	4b3a      	ldr	r3, [pc, #232]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1ed      	bne.n	8001a9a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001abe:	7ffb      	ldrb	r3, [r7, #31]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d105      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac4:	4b35      	ldr	r3, [pc, #212]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac8:	4a34      	ldr	r2, [pc, #208]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001aca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ace:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d03c      	beq.n	8001b56 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d01c      	beq.n	8001b1e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aea:	4a2c      	ldr	r2, [pc, #176]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7ff fa82 	bl	8000ffc <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001afc:	f7ff fa7e 	bl	8000ffc <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e0f2      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b0e:	4b23      	ldr	r3, [pc, #140]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0ef      	beq.n	8001afc <HAL_RCC_OscConfig+0x418>
 8001b1c:	e01b      	b.n	8001b56 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b24:	4a1d      	ldr	r2, [pc, #116]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fa65 	bl	8000ffc <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b36:	f7ff fa61 	bl	8000ffc <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e0d5      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b48:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ef      	bne.n	8001b36 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 80c9 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b60:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b0c      	cmp	r3, #12
 8001b6a:	f000 8083 	beq.w	8001c74 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d15e      	bne.n	8001c34 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b76:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a08      	ldr	r2, [pc, #32]	@ (8001b9c <HAL_RCC_OscConfig+0x4b8>)
 8001b7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b82:	f7ff fa3b 	bl	8000ffc <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b88:	e00c      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8a:	f7ff fa37 	bl	8000ffc <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d905      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e0ab      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba4:	4b55      	ldr	r3, [pc, #340]	@ (8001cfc <HAL_RCC_OscConfig+0x618>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1ec      	bne.n	8001b8a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb0:	4b52      	ldr	r3, [pc, #328]	@ (8001cfc <HAL_RCC_OscConfig+0x618>)
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	4b52      	ldr	r3, [pc, #328]	@ (8001d00 <HAL_RCC_OscConfig+0x61c>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6a11      	ldr	r1, [r2, #32]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bc0:	3a01      	subs	r2, #1
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	4311      	orrs	r1, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001bca:	0212      	lsls	r2, r2, #8
 8001bcc:	4311      	orrs	r1, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001bd2:	0852      	lsrs	r2, r2, #1
 8001bd4:	3a01      	subs	r2, #1
 8001bd6:	0552      	lsls	r2, r2, #21
 8001bd8:	4311      	orrs	r1, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bde:	0852      	lsrs	r2, r2, #1
 8001be0:	3a01      	subs	r2, #1
 8001be2:	0652      	lsls	r2, r2, #25
 8001be4:	4311      	orrs	r1, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001bea:	06d2      	lsls	r2, r2, #27
 8001bec:	430a      	orrs	r2, r1
 8001bee:	4943      	ldr	r1, [pc, #268]	@ (8001cfc <HAL_RCC_OscConfig+0x618>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf4:	4b41      	ldr	r3, [pc, #260]	@ (8001cfc <HAL_RCC_OscConfig+0x618>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a40      	ldr	r2, [pc, #256]	@ (8001cfc <HAL_RCC_OscConfig+0x618>)
 8001bfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bfe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c00:	4b3e      	ldr	r3, [pc, #248]	@ (8001cfc <HAL_RCC_OscConfig+0x618>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4a3d      	ldr	r2, [pc, #244]	@ (8001cfc <HAL_RCC_OscConfig+0x618>)
 8001c06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f9f6 	bl	8000ffc <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c14:	f7ff f9f2 	bl	8000ffc <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e066      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c26:	4b35      	ldr	r3, [pc, #212]	@ (8001cfc <HAL_RCC_OscConfig+0x618>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x530>
 8001c32:	e05e      	b.n	8001cf2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c34:	4b31      	ldr	r3, [pc, #196]	@ (8001cfc <HAL_RCC_OscConfig+0x618>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a30      	ldr	r2, [pc, #192]	@ (8001cfc <HAL_RCC_OscConfig+0x618>)
 8001c3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff f9dc 	bl	8000ffc <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c48:	f7ff f9d8 	bl	8000ffc <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e04c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5a:	4b28      	ldr	r3, [pc, #160]	@ (8001cfc <HAL_RCC_OscConfig+0x618>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c66:	4b25      	ldr	r3, [pc, #148]	@ (8001cfc <HAL_RCC_OscConfig+0x618>)
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	4924      	ldr	r1, [pc, #144]	@ (8001cfc <HAL_RCC_OscConfig+0x618>)
 8001c6c:	4b25      	ldr	r3, [pc, #148]	@ (8001d04 <HAL_RCC_OscConfig+0x620>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	60cb      	str	r3, [r1, #12]
 8001c72:	e03e      	b.n	8001cf2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e039      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c80:	4b1e      	ldr	r3, [pc, #120]	@ (8001cfc <HAL_RCC_OscConfig+0x618>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f003 0203 	and.w	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d12c      	bne.n	8001cee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d123      	bne.n	8001cee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d11b      	bne.n	8001cee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d113      	bne.n	8001cee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d109      	bne.n	8001cee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce4:	085b      	lsrs	r3, r3, #1
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	019f800c 	.word	0x019f800c
 8001d04:	feeefffc 	.word	0xfeeefffc

08001d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e11e      	b.n	8001f5e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d20:	4b91      	ldr	r3, [pc, #580]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d910      	bls.n	8001d50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b8e      	ldr	r3, [pc, #568]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 020f 	bic.w	r2, r3, #15
 8001d36:	498c      	ldr	r1, [pc, #560]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b8a      	ldr	r3, [pc, #552]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e106      	b.n	8001f5e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d073      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d129      	bne.n	8001db8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d64:	4b81      	ldr	r3, [pc, #516]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0f4      	b.n	8001f5e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d74:	f000 f99e 	bl	80020b4 <RCC_GetSysClockFreqFromPLLSource>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4a7c      	ldr	r2, [pc, #496]	@ (8001f70 <HAL_RCC_ClockConfig+0x268>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d93f      	bls.n	8001e02 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d82:	4b7a      	ldr	r3, [pc, #488]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d009      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d033      	beq.n	8001e02 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d12f      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001da2:	4b72      	ldr	r3, [pc, #456]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001daa:	4a70      	ldr	r2, [pc, #448]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001dac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001db0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001db2:	2380      	movs	r3, #128	@ 0x80
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	e024      	b.n	8001e02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d107      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dc0:	4b6a      	ldr	r3, [pc, #424]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d109      	bne.n	8001de0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0c6      	b.n	8001f5e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd0:	4b66      	ldr	r3, [pc, #408]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0be      	b.n	8001f5e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001de0:	f000 f8ce 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8001de4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4a61      	ldr	r2, [pc, #388]	@ (8001f70 <HAL_RCC_ClockConfig+0x268>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d909      	bls.n	8001e02 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dee:	4b5f      	ldr	r3, [pc, #380]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001df6:	4a5d      	ldr	r2, [pc, #372]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001df8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dfc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001dfe:	2380      	movs	r3, #128	@ 0x80
 8001e00:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e02:	4b5a      	ldr	r3, [pc, #360]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f023 0203 	bic.w	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4957      	ldr	r1, [pc, #348]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e14:	f7ff f8f2 	bl	8000ffc <HAL_GetTick>
 8001e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1c:	f7ff f8ee 	bl	8000ffc <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e095      	b.n	8001f5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	4b4e      	ldr	r3, [pc, #312]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 020c 	and.w	r2, r3, #12
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d1eb      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d023      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e5c:	4b43      	ldr	r3, [pc, #268]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	4a42      	ldr	r2, [pc, #264]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001e62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e66:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d007      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e74:	4b3d      	ldr	r3, [pc, #244]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001e7c:	4a3b      	ldr	r2, [pc, #236]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001e7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e84:	4b39      	ldr	r3, [pc, #228]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	4936      	ldr	r1, [pc, #216]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2b80      	cmp	r3, #128	@ 0x80
 8001e9c:	d105      	bne.n	8001eaa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e9e:	4b33      	ldr	r3, [pc, #204]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	4a32      	ldr	r2, [pc, #200]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001ea4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ea8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eaa:	4b2f      	ldr	r3, [pc, #188]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d21d      	bcs.n	8001ef4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 020f 	bic.w	r2, r3, #15
 8001ec0:	4929      	ldr	r1, [pc, #164]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ec8:	f7ff f898 	bl	8000ffc <HAL_GetTick>
 8001ecc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	e00a      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed0:	f7ff f894 	bl	8000ffc <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e03b      	b.n	8001f5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	4b20      	ldr	r3, [pc, #128]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d1ed      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d008      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f00:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4917      	ldr	r1, [pc, #92]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d009      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f1e:	4b13      	ldr	r3, [pc, #76]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	490f      	ldr	r1, [pc, #60]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f32:	f000 f825 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8001f36:	4602      	mov	r2, r0
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	490c      	ldr	r1, [pc, #48]	@ (8001f74 <HAL_RCC_ClockConfig+0x26c>)
 8001f44:	5ccb      	ldrb	r3, [r1, r3]
 8001f46:	f003 031f 	and.w	r3, r3, #31
 8001f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f78 <HAL_RCC_ClockConfig+0x270>)
 8001f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f52:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <HAL_RCC_ClockConfig+0x274>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff f804 	bl	8000f64 <HAL_InitTick>
 8001f5c:	4603      	mov	r3, r0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40022000 	.word	0x40022000
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	04c4b400 	.word	0x04c4b400
 8001f74:	08004f9c 	.word	0x08004f9c
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	20000004 	.word	0x20000004

08001f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f86:	4b2c      	ldr	r3, [pc, #176]	@ (8002038 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d102      	bne.n	8001f98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f92:	4b2a      	ldr	r3, [pc, #168]	@ (800203c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	e047      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f98:	4b27      	ldr	r3, [pc, #156]	@ (8002038 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d102      	bne.n	8001faa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fa4:	4b26      	ldr	r3, [pc, #152]	@ (8002040 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	e03e      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001faa:	4b23      	ldr	r3, [pc, #140]	@ (8002038 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b0c      	cmp	r3, #12
 8001fb4:	d136      	bne.n	8002024 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fb6:	4b20      	ldr	r3, [pc, #128]	@ (8002038 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002038 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	3301      	adds	r3, #1
 8001fcc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d10c      	bne.n	8001fee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fd4:	4a1a      	ldr	r2, [pc, #104]	@ (8002040 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fdc:	4a16      	ldr	r2, [pc, #88]	@ (8002038 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fde:	68d2      	ldr	r2, [r2, #12]
 8001fe0:	0a12      	lsrs	r2, r2, #8
 8001fe2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	617b      	str	r3, [r7, #20]
      break;
 8001fec:	e00c      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fee:	4a13      	ldr	r2, [pc, #76]	@ (800203c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	4a10      	ldr	r2, [pc, #64]	@ (8002038 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff8:	68d2      	ldr	r2, [r2, #12]
 8001ffa:	0a12      	lsrs	r2, r2, #8
 8001ffc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002000:	fb02 f303 	mul.w	r3, r2, r3
 8002004:	617b      	str	r3, [r7, #20]
      break;
 8002006:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002008:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <HAL_RCC_GetSysClockFreq+0xb8>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	0e5b      	lsrs	r3, r3, #25
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	3301      	adds	r3, #1
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	e001      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002028:	693b      	ldr	r3, [r7, #16]
}
 800202a:	4618      	mov	r0, r3
 800202c:	371c      	adds	r7, #28
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
 800203c:	00f42400 	.word	0x00f42400
 8002040:	007a1200 	.word	0x007a1200

08002044 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002048:	4b03      	ldr	r3, [pc, #12]	@ (8002058 <HAL_RCC_GetHCLKFreq+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000000 	.word	0x20000000

0800205c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002060:	f7ff fff0 	bl	8002044 <HAL_RCC_GetHCLKFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	4904      	ldr	r1, [pc, #16]	@ (8002084 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002072:	5ccb      	ldrb	r3, [r1, r3]
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	08004fac 	.word	0x08004fac

08002088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800208c:	f7ff ffda 	bl	8002044 <HAL_RCC_GetHCLKFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	0adb      	lsrs	r3, r3, #11
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4904      	ldr	r1, [pc, #16]	@ (80020b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	08004fac 	.word	0x08004fac

080020b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3301      	adds	r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d10c      	bne.n	80020f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020d8:	4a17      	ldr	r2, [pc, #92]	@ (8002138 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	4a14      	ldr	r2, [pc, #80]	@ (8002134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020e2:	68d2      	ldr	r2, [r2, #12]
 80020e4:	0a12      	lsrs	r2, r2, #8
 80020e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	617b      	str	r3, [r7, #20]
    break;
 80020f0:	e00c      	b.n	800210c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020f2:	4a12      	ldr	r2, [pc, #72]	@ (800213c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020fc:	68d2      	ldr	r2, [r2, #12]
 80020fe:	0a12      	lsrs	r2, r2, #8
 8002100:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002104:	fb02 f303 	mul.w	r3, r2, r3
 8002108:	617b      	str	r3, [r7, #20]
    break;
 800210a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800210c:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0e5b      	lsrs	r3, r3, #25
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	3301      	adds	r3, #1
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	fbb2 f3f3 	udiv	r3, r2, r3
 8002124:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002126:	687b      	ldr	r3, [r7, #4]
}
 8002128:	4618      	mov	r0, r3
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	40021000 	.word	0x40021000
 8002138:	007a1200 	.word	0x007a1200
 800213c:	00f42400 	.word	0x00f42400

08002140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002148:	2300      	movs	r3, #0
 800214a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800214c:	2300      	movs	r3, #0
 800214e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 8098 	beq.w	800228e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002162:	4b43      	ldr	r3, [pc, #268]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10d      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800216e:	4b40      	ldr	r3, [pc, #256]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002172:	4a3f      	ldr	r2, [pc, #252]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002178:	6593      	str	r3, [r2, #88]	@ 0x58
 800217a:	4b3d      	ldr	r3, [pc, #244]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800217c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002186:	2301      	movs	r3, #1
 8002188:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800218a:	4b3a      	ldr	r3, [pc, #232]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a39      	ldr	r2, [pc, #228]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002194:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002196:	f7fe ff31 	bl	8000ffc <HAL_GetTick>
 800219a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800219c:	e009      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219e:	f7fe ff2d 	bl	8000ffc <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d902      	bls.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	74fb      	strb	r3, [r7, #19]
        break;
 80021b0:	e005      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021b2:	4b30      	ldr	r3, [pc, #192]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0ef      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80021be:	7cfb      	ldrb	r3, [r7, #19]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d159      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d01e      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d019      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021e0:	4b23      	ldr	r3, [pc, #140]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021ec:	4b20      	ldr	r3, [pc, #128]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002202:	4a1b      	ldr	r2, [pc, #108]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002208:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800220c:	4a18      	ldr	r2, [pc, #96]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d016      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221e:	f7fe feed 	bl	8000ffc <HAL_GetTick>
 8002222:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002224:	e00b      	b.n	800223e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002226:	f7fe fee9 	bl	8000ffc <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002234:	4293      	cmp	r3, r2
 8002236:	d902      	bls.n	800223e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	74fb      	strb	r3, [r7, #19]
            break;
 800223c:	e006      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223e:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0ec      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800224c:	7cfb      	ldrb	r3, [r7, #19]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10b      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002252:	4b07      	ldr	r3, [pc, #28]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002258:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	4903      	ldr	r1, [pc, #12]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002268:	e008      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800226a:	7cfb      	ldrb	r3, [r7, #19]
 800226c:	74bb      	strb	r3, [r7, #18]
 800226e:	e005      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002270:	40021000 	.word	0x40021000
 8002274:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800227c:	7c7b      	ldrb	r3, [r7, #17]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d105      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002282:	4ba6      	ldr	r3, [pc, #664]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002286:	4aa5      	ldr	r2, [pc, #660]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800228c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800229a:	4ba0      	ldr	r3, [pc, #640]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800229c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a0:	f023 0203 	bic.w	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	499c      	ldr	r1, [pc, #624]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022bc:	4b97      	ldr	r3, [pc, #604]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c2:	f023 020c 	bic.w	r2, r3, #12
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	4994      	ldr	r1, [pc, #592]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022de:	4b8f      	ldr	r3, [pc, #572]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	498b      	ldr	r1, [pc, #556]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002300:	4b86      	ldr	r3, [pc, #536]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002306:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	4983      	ldr	r1, [pc, #524]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002322:	4b7e      	ldr	r3, [pc, #504]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002328:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	497a      	ldr	r1, [pc, #488]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002344:	4b75      	ldr	r3, [pc, #468]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	4972      	ldr	r1, [pc, #456]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002366:	4b6d      	ldr	r3, [pc, #436]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	4969      	ldr	r1, [pc, #420]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002388:	4b64      	ldr	r3, [pc, #400]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800238e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4961      	ldr	r1, [pc, #388]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023aa:	4b5c      	ldr	r3, [pc, #368]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	4958      	ldr	r1, [pc, #352]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d015      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023cc:	4b53      	ldr	r3, [pc, #332]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023da:	4950      	ldr	r1, [pc, #320]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023ea:	d105      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ec:	4b4b      	ldr	r3, [pc, #300]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a4a      	ldr	r2, [pc, #296]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023f6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002400:	2b00      	cmp	r3, #0
 8002402:	d015      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002404:	4b45      	ldr	r3, [pc, #276]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002412:	4942      	ldr	r1, [pc, #264]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002422:	d105      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002424:	4b3d      	ldr	r3, [pc, #244]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a3c      	ldr	r2, [pc, #240]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800242e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d015      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800243c:	4b37      	ldr	r3, [pc, #220]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002442:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	4934      	ldr	r1, [pc, #208]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800245a:	d105      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800245c:	4b2f      	ldr	r3, [pc, #188]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4a2e      	ldr	r2, [pc, #184]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002466:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d015      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002474:	4b29      	ldr	r3, [pc, #164]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002482:	4926      	ldr	r1, [pc, #152]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002492:	d105      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002494:	4b21      	ldr	r3, [pc, #132]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4a20      	ldr	r2, [pc, #128]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800249e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d015      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024ac:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ba:	4918      	ldr	r1, [pc, #96]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024ca:	d105      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024cc:	4b13      	ldr	r3, [pc, #76]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4a12      	ldr	r2, [pc, #72]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d015      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024e4:	4b0d      	ldr	r3, [pc, #52]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f2:	490a      	ldr	r1, [pc, #40]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002502:	d105      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002504:	4b05      	ldr	r3, [pc, #20]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a04      	ldr	r2, [pc, #16]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800250a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800250e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002510:	7cbb      	ldrb	r3, [r7, #18]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000

08002520 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e09d      	b.n	800266e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	2b00      	cmp	r3, #0
 8002538:	d108      	bne.n	800254c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002542:	d009      	beq.n	8002558 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	61da      	str	r2, [r3, #28]
 800254a:	e005      	b.n	8002558 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe fa82 	bl	8000a7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800258e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002598:	d902      	bls.n	80025a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	e002      	b.n	80025a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80025a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80025ae:	d007      	beq.n	80025c0 <HAL_SPI_Init+0xa0>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025b8:	d002      	beq.n	80025c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002602:	ea42 0103 	orr.w	r1, r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	0c1b      	lsrs	r3, r3, #16
 800261c:	f003 0204 	and.w	r2, r3, #4
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800263c:	ea42 0103 	orr.w	r1, r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800265c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e049      	b.n	800271c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d106      	bne.n	80026a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7fe fa6f 	bl	8000b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2202      	movs	r2, #2
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3304      	adds	r3, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	4610      	mov	r0, r2
 80026b6:	f000 fb4b 	bl	8002d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b01      	cmp	r3, #1
 8002736:	d001      	beq.n	800273c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e04a      	b.n	80027d2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a21      	ldr	r2, [pc, #132]	@ (80027e0 <HAL_TIM_Base_Start_IT+0xbc>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d018      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x6c>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002766:	d013      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x6c>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1d      	ldr	r2, [pc, #116]	@ (80027e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00e      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x6c>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a1c      	ldr	r2, [pc, #112]	@ (80027e8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d009      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x6c>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a1a      	ldr	r2, [pc, #104]	@ (80027ec <HAL_TIM_Base_Start_IT+0xc8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d004      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x6c>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a19      	ldr	r2, [pc, #100]	@ (80027f0 <HAL_TIM_Base_Start_IT+0xcc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d115      	bne.n	80027bc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	4b17      	ldr	r3, [pc, #92]	@ (80027f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002798:	4013      	ands	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b06      	cmp	r3, #6
 80027a0:	d015      	beq.n	80027ce <HAL_TIM_Base_Start_IT+0xaa>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027a8:	d011      	beq.n	80027ce <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0201 	orr.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ba:	e008      	b.n	80027ce <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e000      	b.n	80027d0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40012c00 	.word	0x40012c00
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40000800 	.word	0x40000800
 80027ec:	40013400 	.word	0x40013400
 80027f0:	40014000 	.word	0x40014000
 80027f4:	00010007 	.word	0x00010007

080027f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e097      	b.n	800293c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d106      	bne.n	8002826 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7fe f96d 	bl	8000b00 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2202      	movs	r2, #2
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800283c:	f023 0307 	bic.w	r3, r3, #7
 8002840:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3304      	adds	r3, #4
 800284a:	4619      	mov	r1, r3
 800284c:	4610      	mov	r0, r2
 800284e:	f000 fa7f 	bl	8002d50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800287a:	f023 0303 	bic.w	r3, r3, #3
 800287e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	021b      	lsls	r3, r3, #8
 800288a:	4313      	orrs	r3, r2
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002898:	f023 030c 	bic.w	r3, r3, #12
 800289c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80028a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	4313      	orrs	r3, r2
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	011a      	lsls	r2, r3, #4
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	031b      	lsls	r3, r3, #12
 80028c8:	4313      	orrs	r3, r2
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80028d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80028de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	4313      	orrs	r3, r2
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002954:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800295c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002964:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800296c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d110      	bne.n	8002996 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d102      	bne.n	8002980 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800297a:	7b7b      	ldrb	r3, [r7, #13]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d001      	beq.n	8002984 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e069      	b.n	8002a58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002994:	e031      	b.n	80029fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b04      	cmp	r3, #4
 800299a:	d110      	bne.n	80029be <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800299c:	7bbb      	ldrb	r3, [r7, #14]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d102      	bne.n	80029a8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80029a2:	7b3b      	ldrb	r3, [r7, #12]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d001      	beq.n	80029ac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e055      	b.n	8002a58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029bc:	e01d      	b.n	80029fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d108      	bne.n	80029d6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80029c4:	7bbb      	ldrb	r3, [r7, #14]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d105      	bne.n	80029d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80029ca:	7b7b      	ldrb	r3, [r7, #13]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d102      	bne.n	80029d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80029d0:	7b3b      	ldrb	r3, [r7, #12]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d001      	beq.n	80029da <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e03e      	b.n	8002a58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2202      	movs	r2, #2
 80029de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2202      	movs	r2, #2
 80029e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2202      	movs	r2, #2
 80029ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2202      	movs	r2, #2
 80029f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_TIM_Encoder_Start+0xc4>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d008      	beq.n	8002a18 <HAL_TIM_Encoder_Start+0xd4>
 8002a06:	e00f      	b.n	8002a28 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fa39 	bl	8002e88 <TIM_CCxChannelCmd>
      break;
 8002a16:	e016      	b.n	8002a46 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	2104      	movs	r1, #4
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fa31 	bl	8002e88 <TIM_CCxChannelCmd>
      break;
 8002a26:	e00e      	b.n	8002a46 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 fa29 	bl	8002e88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	2104      	movs	r1, #4
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fa22 	bl	8002e88 <TIM_CCxChannelCmd>
      break;
 8002a44:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0201 	orr.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d020      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01b      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0202 	mvn.w	r2, #2
 8002a94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f931 	bl	8002d12 <HAL_TIM_IC_CaptureCallback>
 8002ab0:	e005      	b.n	8002abe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f923 	bl	8002cfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f934 	bl	8002d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d020      	beq.n	8002b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d01b      	beq.n	8002b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0204 	mvn.w	r2, #4
 8002ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f90b 	bl	8002d12 <HAL_TIM_IC_CaptureCallback>
 8002afc:	e005      	b.n	8002b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f8fd 	bl	8002cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f90e 	bl	8002d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d020      	beq.n	8002b5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d01b      	beq.n	8002b5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0208 	mvn.w	r2, #8
 8002b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2204      	movs	r2, #4
 8002b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f8e5 	bl	8002d12 <HAL_TIM_IC_CaptureCallback>
 8002b48:	e005      	b.n	8002b56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f8d7 	bl	8002cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f8e8 	bl	8002d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d020      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01b      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0210 	mvn.w	r2, #16
 8002b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f8bf 	bl	8002d12 <HAL_TIM_IC_CaptureCallback>
 8002b94:	e005      	b.n	8002ba2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f8b1 	bl	8002cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f8c2 	bl	8002d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00c      	beq.n	8002bcc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0201 	mvn.w	r2, #1
 8002bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fd fd0a 	bl	80005e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d104      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00c      	beq.n	8002bfa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f9f9 	bl	8002fec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00c      	beq.n	8002c1e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f9f1 	bl	8003000 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00c      	beq.n	8002c42 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d007      	beq.n	8002c42 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f87c 	bl	8002d3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00c      	beq.n	8002c66 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d007      	beq.n	8002c66 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f06f 0220 	mvn.w	r2, #32
 8002c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f9b9 	bl	8002fd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00c      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f9c5 	bl	8003014 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00c      	beq.n	8002cae <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d007      	beq.n	8002cae <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f9bd 	bl	8003028 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00c      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d007      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f9b5 	bl	800303c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00c      	beq.n	8002cf6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f9ad 	bl	8003050 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a42      	ldr	r2, [pc, #264]	@ (8002e6c <TIM_Base_SetConfig+0x11c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00f      	beq.n	8002d88 <TIM_Base_SetConfig+0x38>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d6e:	d00b      	beq.n	8002d88 <TIM_Base_SetConfig+0x38>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a3f      	ldr	r2, [pc, #252]	@ (8002e70 <TIM_Base_SetConfig+0x120>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d007      	beq.n	8002d88 <TIM_Base_SetConfig+0x38>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a3e      	ldr	r2, [pc, #248]	@ (8002e74 <TIM_Base_SetConfig+0x124>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d003      	beq.n	8002d88 <TIM_Base_SetConfig+0x38>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a3d      	ldr	r2, [pc, #244]	@ (8002e78 <TIM_Base_SetConfig+0x128>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d108      	bne.n	8002d9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a33      	ldr	r2, [pc, #204]	@ (8002e6c <TIM_Base_SetConfig+0x11c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01b      	beq.n	8002dda <TIM_Base_SetConfig+0x8a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002da8:	d017      	beq.n	8002dda <TIM_Base_SetConfig+0x8a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a30      	ldr	r2, [pc, #192]	@ (8002e70 <TIM_Base_SetConfig+0x120>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <TIM_Base_SetConfig+0x8a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a2f      	ldr	r2, [pc, #188]	@ (8002e74 <TIM_Base_SetConfig+0x124>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00f      	beq.n	8002dda <TIM_Base_SetConfig+0x8a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a2e      	ldr	r2, [pc, #184]	@ (8002e78 <TIM_Base_SetConfig+0x128>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00b      	beq.n	8002dda <TIM_Base_SetConfig+0x8a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a2d      	ldr	r2, [pc, #180]	@ (8002e7c <TIM_Base_SetConfig+0x12c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d007      	beq.n	8002dda <TIM_Base_SetConfig+0x8a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a2c      	ldr	r2, [pc, #176]	@ (8002e80 <TIM_Base_SetConfig+0x130>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d003      	beq.n	8002dda <TIM_Base_SetConfig+0x8a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8002e84 <TIM_Base_SetConfig+0x134>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d108      	bne.n	8002dec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a16      	ldr	r2, [pc, #88]	@ (8002e6c <TIM_Base_SetConfig+0x11c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00f      	beq.n	8002e38 <TIM_Base_SetConfig+0xe8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a17      	ldr	r2, [pc, #92]	@ (8002e78 <TIM_Base_SetConfig+0x128>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00b      	beq.n	8002e38 <TIM_Base_SetConfig+0xe8>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a16      	ldr	r2, [pc, #88]	@ (8002e7c <TIM_Base_SetConfig+0x12c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d007      	beq.n	8002e38 <TIM_Base_SetConfig+0xe8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a15      	ldr	r2, [pc, #84]	@ (8002e80 <TIM_Base_SetConfig+0x130>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d003      	beq.n	8002e38 <TIM_Base_SetConfig+0xe8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a14      	ldr	r2, [pc, #80]	@ (8002e84 <TIM_Base_SetConfig+0x134>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d103      	bne.n	8002e40 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d105      	bne.n	8002e5e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f023 0201 	bic.w	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	611a      	str	r2, [r3, #16]
  }
}
 8002e5e:	bf00      	nop
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40012c00 	.word	0x40012c00
 8002e70:	40000400 	.word	0x40000400
 8002e74:	40000800 	.word	0x40000800
 8002e78:	40013400 	.word	0x40013400
 8002e7c:	40014000 	.word	0x40014000
 8002e80:	40014400 	.word	0x40014400
 8002e84:	40014800 	.word	0x40014800

08002e88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a1a      	ldr	r2, [r3, #32]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	401a      	ands	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a1a      	ldr	r2, [r3, #32]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	621a      	str	r2, [r3, #32]
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e065      	b.n	8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a2c      	ldr	r2, [pc, #176]	@ (8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d004      	beq.n	8002f20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a2b      	ldr	r2, [pc, #172]	@ (8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d108      	bne.n	8002f32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002f26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d018      	beq.n	8002f8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f62:	d013      	beq.n	8002f8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a18      	ldr	r2, [pc, #96]	@ (8002fcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00e      	beq.n	8002f8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a17      	ldr	r2, [pc, #92]	@ (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d009      	beq.n	8002f8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a12      	ldr	r2, [pc, #72]	@ (8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d004      	beq.n	8002f8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a13      	ldr	r2, [pc, #76]	@ (8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d10c      	bne.n	8002fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	40013400 	.word	0x40013400
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	40000800 	.word	0x40000800
 8002fd4:	40014000 	.word	0x40014000

08002fd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e042      	b.n	80030fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307c:	2b00      	cmp	r3, #0
 800307e:	d106      	bne.n	800308e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7fd fd9f 	bl	8000bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2224      	movs	r2, #36	@ 0x24
 8003092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0201 	bic.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fb82 	bl	80037b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f8b3 	bl	8003220 <UART_SetConfig>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e01b      	b.n	80030fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 fc01 	bl	80038fc <UART_CheckIdleState>
 80030fa:	4603      	mov	r3, r0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08a      	sub	sp, #40	@ 0x28
 8003108:	af02      	add	r7, sp, #8
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311a:	2b20      	cmp	r3, #32
 800311c:	d17b      	bne.n	8003216 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_UART_Transmit+0x26>
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e074      	b.n	8003218 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2221      	movs	r2, #33	@ 0x21
 800313a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800313e:	f7fd ff5d 	bl	8000ffc <HAL_GetTick>
 8003142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	88fa      	ldrh	r2, [r7, #6]
 8003148:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	88fa      	ldrh	r2, [r7, #6]
 8003150:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800315c:	d108      	bne.n	8003170 <HAL_UART_Transmit+0x6c>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d104      	bne.n	8003170 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	e003      	b.n	8003178 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003174:	2300      	movs	r3, #0
 8003176:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003178:	e030      	b.n	80031dc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2200      	movs	r2, #0
 8003182:	2180      	movs	r1, #128	@ 0x80
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fc63 	bl	8003a50 <UART_WaitOnFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e03d      	b.n	8003218 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10b      	bne.n	80031ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	3302      	adds	r3, #2
 80031b6:	61bb      	str	r3, [r7, #24]
 80031b8:	e007      	b.n	80031ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	3301      	adds	r3, #1
 80031c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1c8      	bne.n	800317a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2200      	movs	r2, #0
 80031f0:	2140      	movs	r1, #64	@ 0x40
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 fc2c 	bl	8003a50 <UART_WaitOnFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e006      	b.n	8003218 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	e000      	b.n	8003218 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003216:	2302      	movs	r3, #2
  }
}
 8003218:	4618      	mov	r0, r3
 800321a:	3720      	adds	r7, #32
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003224:	b08c      	sub	sp, #48	@ 0x30
 8003226:	af00      	add	r7, sp, #0
 8003228:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	431a      	orrs	r2, r3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	431a      	orrs	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	4313      	orrs	r3, r2
 8003246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4bab      	ldr	r3, [pc, #684]	@ (80034fc <UART_SetConfig+0x2dc>)
 8003250:	4013      	ands	r3, r2
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003258:	430b      	orrs	r3, r1
 800325a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4aa0      	ldr	r2, [pc, #640]	@ (8003500 <UART_SetConfig+0x2e0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d004      	beq.n	800328c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003288:	4313      	orrs	r3, r2
 800328a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003296:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032a0:	430b      	orrs	r3, r1
 80032a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032aa:	f023 010f 	bic.w	r1, r3, #15
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a91      	ldr	r2, [pc, #580]	@ (8003504 <UART_SetConfig+0x2e4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d125      	bne.n	8003310 <UART_SetConfig+0xf0>
 80032c4:	4b90      	ldr	r3, [pc, #576]	@ (8003508 <UART_SetConfig+0x2e8>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d81a      	bhi.n	8003308 <UART_SetConfig+0xe8>
 80032d2:	a201      	add	r2, pc, #4	@ (adr r2, 80032d8 <UART_SetConfig+0xb8>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	080032e9 	.word	0x080032e9
 80032dc:	080032f9 	.word	0x080032f9
 80032e0:	080032f1 	.word	0x080032f1
 80032e4:	08003301 	.word	0x08003301
 80032e8:	2301      	movs	r3, #1
 80032ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ee:	e0d6      	b.n	800349e <UART_SetConfig+0x27e>
 80032f0:	2302      	movs	r3, #2
 80032f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032f6:	e0d2      	b.n	800349e <UART_SetConfig+0x27e>
 80032f8:	2304      	movs	r3, #4
 80032fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032fe:	e0ce      	b.n	800349e <UART_SetConfig+0x27e>
 8003300:	2308      	movs	r3, #8
 8003302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003306:	e0ca      	b.n	800349e <UART_SetConfig+0x27e>
 8003308:	2310      	movs	r3, #16
 800330a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800330e:	e0c6      	b.n	800349e <UART_SetConfig+0x27e>
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a7d      	ldr	r2, [pc, #500]	@ (800350c <UART_SetConfig+0x2ec>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d138      	bne.n	800338c <UART_SetConfig+0x16c>
 800331a:	4b7b      	ldr	r3, [pc, #492]	@ (8003508 <UART_SetConfig+0x2e8>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b0c      	cmp	r3, #12
 8003326:	d82d      	bhi.n	8003384 <UART_SetConfig+0x164>
 8003328:	a201      	add	r2, pc, #4	@ (adr r2, 8003330 <UART_SetConfig+0x110>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003365 	.word	0x08003365
 8003334:	08003385 	.word	0x08003385
 8003338:	08003385 	.word	0x08003385
 800333c:	08003385 	.word	0x08003385
 8003340:	08003375 	.word	0x08003375
 8003344:	08003385 	.word	0x08003385
 8003348:	08003385 	.word	0x08003385
 800334c:	08003385 	.word	0x08003385
 8003350:	0800336d 	.word	0x0800336d
 8003354:	08003385 	.word	0x08003385
 8003358:	08003385 	.word	0x08003385
 800335c:	08003385 	.word	0x08003385
 8003360:	0800337d 	.word	0x0800337d
 8003364:	2300      	movs	r3, #0
 8003366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800336a:	e098      	b.n	800349e <UART_SetConfig+0x27e>
 800336c:	2302      	movs	r3, #2
 800336e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003372:	e094      	b.n	800349e <UART_SetConfig+0x27e>
 8003374:	2304      	movs	r3, #4
 8003376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800337a:	e090      	b.n	800349e <UART_SetConfig+0x27e>
 800337c:	2308      	movs	r3, #8
 800337e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003382:	e08c      	b.n	800349e <UART_SetConfig+0x27e>
 8003384:	2310      	movs	r3, #16
 8003386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800338a:	e088      	b.n	800349e <UART_SetConfig+0x27e>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a5f      	ldr	r2, [pc, #380]	@ (8003510 <UART_SetConfig+0x2f0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d125      	bne.n	80033e2 <UART_SetConfig+0x1c2>
 8003396:	4b5c      	ldr	r3, [pc, #368]	@ (8003508 <UART_SetConfig+0x2e8>)
 8003398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80033a0:	2b30      	cmp	r3, #48	@ 0x30
 80033a2:	d016      	beq.n	80033d2 <UART_SetConfig+0x1b2>
 80033a4:	2b30      	cmp	r3, #48	@ 0x30
 80033a6:	d818      	bhi.n	80033da <UART_SetConfig+0x1ba>
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d00a      	beq.n	80033c2 <UART_SetConfig+0x1a2>
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d814      	bhi.n	80033da <UART_SetConfig+0x1ba>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <UART_SetConfig+0x19a>
 80033b4:	2b10      	cmp	r3, #16
 80033b6:	d008      	beq.n	80033ca <UART_SetConfig+0x1aa>
 80033b8:	e00f      	b.n	80033da <UART_SetConfig+0x1ba>
 80033ba:	2300      	movs	r3, #0
 80033bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033c0:	e06d      	b.n	800349e <UART_SetConfig+0x27e>
 80033c2:	2302      	movs	r3, #2
 80033c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033c8:	e069      	b.n	800349e <UART_SetConfig+0x27e>
 80033ca:	2304      	movs	r3, #4
 80033cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033d0:	e065      	b.n	800349e <UART_SetConfig+0x27e>
 80033d2:	2308      	movs	r3, #8
 80033d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033d8:	e061      	b.n	800349e <UART_SetConfig+0x27e>
 80033da:	2310      	movs	r3, #16
 80033dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033e0:	e05d      	b.n	800349e <UART_SetConfig+0x27e>
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a4b      	ldr	r2, [pc, #300]	@ (8003514 <UART_SetConfig+0x2f4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d125      	bne.n	8003438 <UART_SetConfig+0x218>
 80033ec:	4b46      	ldr	r3, [pc, #280]	@ (8003508 <UART_SetConfig+0x2e8>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80033f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80033f8:	d016      	beq.n	8003428 <UART_SetConfig+0x208>
 80033fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80033fc:	d818      	bhi.n	8003430 <UART_SetConfig+0x210>
 80033fe:	2b80      	cmp	r3, #128	@ 0x80
 8003400:	d00a      	beq.n	8003418 <UART_SetConfig+0x1f8>
 8003402:	2b80      	cmp	r3, #128	@ 0x80
 8003404:	d814      	bhi.n	8003430 <UART_SetConfig+0x210>
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <UART_SetConfig+0x1f0>
 800340a:	2b40      	cmp	r3, #64	@ 0x40
 800340c:	d008      	beq.n	8003420 <UART_SetConfig+0x200>
 800340e:	e00f      	b.n	8003430 <UART_SetConfig+0x210>
 8003410:	2300      	movs	r3, #0
 8003412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003416:	e042      	b.n	800349e <UART_SetConfig+0x27e>
 8003418:	2302      	movs	r3, #2
 800341a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800341e:	e03e      	b.n	800349e <UART_SetConfig+0x27e>
 8003420:	2304      	movs	r3, #4
 8003422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003426:	e03a      	b.n	800349e <UART_SetConfig+0x27e>
 8003428:	2308      	movs	r3, #8
 800342a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800342e:	e036      	b.n	800349e <UART_SetConfig+0x27e>
 8003430:	2310      	movs	r3, #16
 8003432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003436:	e032      	b.n	800349e <UART_SetConfig+0x27e>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a30      	ldr	r2, [pc, #192]	@ (8003500 <UART_SetConfig+0x2e0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d12a      	bne.n	8003498 <UART_SetConfig+0x278>
 8003442:	4b31      	ldr	r3, [pc, #196]	@ (8003508 <UART_SetConfig+0x2e8>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003448:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800344c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003450:	d01a      	beq.n	8003488 <UART_SetConfig+0x268>
 8003452:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003456:	d81b      	bhi.n	8003490 <UART_SetConfig+0x270>
 8003458:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800345c:	d00c      	beq.n	8003478 <UART_SetConfig+0x258>
 800345e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003462:	d815      	bhi.n	8003490 <UART_SetConfig+0x270>
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <UART_SetConfig+0x250>
 8003468:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800346c:	d008      	beq.n	8003480 <UART_SetConfig+0x260>
 800346e:	e00f      	b.n	8003490 <UART_SetConfig+0x270>
 8003470:	2300      	movs	r3, #0
 8003472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003476:	e012      	b.n	800349e <UART_SetConfig+0x27e>
 8003478:	2302      	movs	r3, #2
 800347a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800347e:	e00e      	b.n	800349e <UART_SetConfig+0x27e>
 8003480:	2304      	movs	r3, #4
 8003482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003486:	e00a      	b.n	800349e <UART_SetConfig+0x27e>
 8003488:	2308      	movs	r3, #8
 800348a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800348e:	e006      	b.n	800349e <UART_SetConfig+0x27e>
 8003490:	2310      	movs	r3, #16
 8003492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003496:	e002      	b.n	800349e <UART_SetConfig+0x27e>
 8003498:	2310      	movs	r3, #16
 800349a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a17      	ldr	r2, [pc, #92]	@ (8003500 <UART_SetConfig+0x2e0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	f040 80a8 	bne.w	80035fa <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d834      	bhi.n	800351c <UART_SetConfig+0x2fc>
 80034b2:	a201      	add	r2, pc, #4	@ (adr r2, 80034b8 <UART_SetConfig+0x298>)
 80034b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b8:	080034dd 	.word	0x080034dd
 80034bc:	0800351d 	.word	0x0800351d
 80034c0:	080034e5 	.word	0x080034e5
 80034c4:	0800351d 	.word	0x0800351d
 80034c8:	080034eb 	.word	0x080034eb
 80034cc:	0800351d 	.word	0x0800351d
 80034d0:	0800351d 	.word	0x0800351d
 80034d4:	0800351d 	.word	0x0800351d
 80034d8:	080034f3 	.word	0x080034f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034dc:	f7fe fdbe 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 80034e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034e2:	e021      	b.n	8003528 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003518 <UART_SetConfig+0x2f8>)
 80034e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034e8:	e01e      	b.n	8003528 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ea:	f7fe fd49 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 80034ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034f0:	e01a      	b.n	8003528 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034f8:	e016      	b.n	8003528 <UART_SetConfig+0x308>
 80034fa:	bf00      	nop
 80034fc:	cfff69f3 	.word	0xcfff69f3
 8003500:	40008000 	.word	0x40008000
 8003504:	40013800 	.word	0x40013800
 8003508:	40021000 	.word	0x40021000
 800350c:	40004400 	.word	0x40004400
 8003510:	40004800 	.word	0x40004800
 8003514:	40004c00 	.word	0x40004c00
 8003518:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003526:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 812a 	beq.w	8003784 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	4a9e      	ldr	r2, [pc, #632]	@ (80037b0 <UART_SetConfig+0x590>)
 8003536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800353a:	461a      	mov	r2, r3
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003542:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4413      	add	r3, r2
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	429a      	cmp	r2, r3
 8003552:	d305      	bcc.n	8003560 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	429a      	cmp	r2, r3
 800355e:	d903      	bls.n	8003568 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003566:	e10d      	b.n	8003784 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	2200      	movs	r2, #0
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	60fa      	str	r2, [r7, #12]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	4a8e      	ldr	r2, [pc, #568]	@ (80037b0 <UART_SetConfig+0x590>)
 8003576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800357a:	b29b      	uxth	r3, r3
 800357c:	2200      	movs	r2, #0
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003586:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800358a:	f7fc fe99 	bl	80002c0 <__aeabi_uldivmod>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4610      	mov	r0, r2
 8003594:	4619      	mov	r1, r3
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	020b      	lsls	r3, r1, #8
 80035a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80035a4:	0202      	lsls	r2, r0, #8
 80035a6:	6979      	ldr	r1, [r7, #20]
 80035a8:	6849      	ldr	r1, [r1, #4]
 80035aa:	0849      	lsrs	r1, r1, #1
 80035ac:	2000      	movs	r0, #0
 80035ae:	460c      	mov	r4, r1
 80035b0:	4605      	mov	r5, r0
 80035b2:	eb12 0804 	adds.w	r8, r2, r4
 80035b6:	eb43 0905 	adc.w	r9, r3, r5
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	469a      	mov	sl, r3
 80035c2:	4693      	mov	fp, r2
 80035c4:	4652      	mov	r2, sl
 80035c6:	465b      	mov	r3, fp
 80035c8:	4640      	mov	r0, r8
 80035ca:	4649      	mov	r1, r9
 80035cc:	f7fc fe78 	bl	80002c0 <__aeabi_uldivmod>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4613      	mov	r3, r2
 80035d6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035de:	d308      	bcc.n	80035f2 <UART_SetConfig+0x3d2>
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035e6:	d204      	bcs.n	80035f2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6a3a      	ldr	r2, [r7, #32]
 80035ee:	60da      	str	r2, [r3, #12]
 80035f0:	e0c8      	b.n	8003784 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80035f8:	e0c4      	b.n	8003784 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003602:	d167      	bne.n	80036d4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003604:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003608:	2b08      	cmp	r3, #8
 800360a:	d828      	bhi.n	800365e <UART_SetConfig+0x43e>
 800360c:	a201      	add	r2, pc, #4	@ (adr r2, 8003614 <UART_SetConfig+0x3f4>)
 800360e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003612:	bf00      	nop
 8003614:	08003639 	.word	0x08003639
 8003618:	08003641 	.word	0x08003641
 800361c:	08003649 	.word	0x08003649
 8003620:	0800365f 	.word	0x0800365f
 8003624:	0800364f 	.word	0x0800364f
 8003628:	0800365f 	.word	0x0800365f
 800362c:	0800365f 	.word	0x0800365f
 8003630:	0800365f 	.word	0x0800365f
 8003634:	08003657 	.word	0x08003657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003638:	f7fe fd10 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 800363c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800363e:	e014      	b.n	800366a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003640:	f7fe fd22 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 8003644:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003646:	e010      	b.n	800366a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003648:	4b5a      	ldr	r3, [pc, #360]	@ (80037b4 <UART_SetConfig+0x594>)
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800364c:	e00d      	b.n	800366a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800364e:	f7fe fc97 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8003652:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003654:	e009      	b.n	800366a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800365a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800365c:	e005      	b.n	800366a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003668:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 8089 	beq.w	8003784 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	4a4e      	ldr	r2, [pc, #312]	@ (80037b0 <UART_SetConfig+0x590>)
 8003678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800367c:	461a      	mov	r2, r3
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	fbb3 f3f2 	udiv	r3, r3, r2
 8003684:	005a      	lsls	r2, r3, #1
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	085b      	lsrs	r3, r3, #1
 800368c:	441a      	add	r2, r3
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	fbb2 f3f3 	udiv	r3, r2, r3
 8003696:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	2b0f      	cmp	r3, #15
 800369c:	d916      	bls.n	80036cc <UART_SetConfig+0x4ac>
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a4:	d212      	bcs.n	80036cc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f023 030f 	bic.w	r3, r3, #15
 80036ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	085b      	lsrs	r3, r3, #1
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	8bfb      	ldrh	r3, [r7, #30]
 80036be:	4313      	orrs	r3, r2
 80036c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	8bfa      	ldrh	r2, [r7, #30]
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	e05b      	b.n	8003784 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80036d2:	e057      	b.n	8003784 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d828      	bhi.n	800372e <UART_SetConfig+0x50e>
 80036dc:	a201      	add	r2, pc, #4	@ (adr r2, 80036e4 <UART_SetConfig+0x4c4>)
 80036de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e2:	bf00      	nop
 80036e4:	08003709 	.word	0x08003709
 80036e8:	08003711 	.word	0x08003711
 80036ec:	08003719 	.word	0x08003719
 80036f0:	0800372f 	.word	0x0800372f
 80036f4:	0800371f 	.word	0x0800371f
 80036f8:	0800372f 	.word	0x0800372f
 80036fc:	0800372f 	.word	0x0800372f
 8003700:	0800372f 	.word	0x0800372f
 8003704:	08003727 	.word	0x08003727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003708:	f7fe fca8 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 800370c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800370e:	e014      	b.n	800373a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003710:	f7fe fcba 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 8003714:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003716:	e010      	b.n	800373a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003718:	4b26      	ldr	r3, [pc, #152]	@ (80037b4 <UART_SetConfig+0x594>)
 800371a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800371c:	e00d      	b.n	800373a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800371e:	f7fe fc2f 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8003722:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003724:	e009      	b.n	800373a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800372a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800372c:	e005      	b.n	800373a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003738:	bf00      	nop
    }

    if (pclk != 0U)
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	2b00      	cmp	r3, #0
 800373e:	d021      	beq.n	8003784 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	4a1a      	ldr	r2, [pc, #104]	@ (80037b0 <UART_SetConfig+0x590>)
 8003746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800374a:	461a      	mov	r2, r3
 800374c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	085b      	lsrs	r3, r3, #1
 8003758:	441a      	add	r2, r3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003762:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	2b0f      	cmp	r3, #15
 8003768:	d909      	bls.n	800377e <UART_SetConfig+0x55e>
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003770:	d205      	bcs.n	800377e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	b29a      	uxth	r2, r3
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60da      	str	r2, [r3, #12]
 800377c:	e002      	b.n	8003784 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2201      	movs	r2, #1
 8003788:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2201      	movs	r2, #1
 8003790:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2200      	movs	r2, #0
 8003798:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2200      	movs	r2, #0
 800379e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80037a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3730      	adds	r7, #48	@ 0x30
 80037a8:	46bd      	mov	sp, r7
 80037aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ae:	bf00      	nop
 80037b0:	08004fb4 	.word	0x08004fb4
 80037b4:	00f42400 	.word	0x00f42400

080037b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d01a      	beq.n	80038ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038b6:	d10a      	bne.n	80038ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	605a      	str	r2, [r3, #4]
  }
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b098      	sub	sp, #96	@ 0x60
 8003900:	af02      	add	r7, sp, #8
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800390c:	f7fd fb76 	bl	8000ffc <HAL_GetTick>
 8003910:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b08      	cmp	r3, #8
 800391e:	d12f      	bne.n	8003980 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003920:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003928:	2200      	movs	r2, #0
 800392a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f88e 	bl	8003a50 <UART_WaitOnFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d022      	beq.n	8003980 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003942:	e853 3f00 	ldrex	r3, [r3]
 8003946:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800394a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800394e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003958:	647b      	str	r3, [r7, #68]	@ 0x44
 800395a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800395e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e6      	bne.n	800393a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e063      	b.n	8003a48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b04      	cmp	r3, #4
 800398c:	d149      	bne.n	8003a22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800398e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003996:	2200      	movs	r2, #0
 8003998:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f857 	bl	8003a50 <UART_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d03c      	beq.n	8003a22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	623b      	str	r3, [r7, #32]
   return(result);
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80039c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e6      	bne.n	80039a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3308      	adds	r3, #8
 80039e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	e853 3f00 	ldrex	r3, [r3]
 80039e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3308      	adds	r3, #8
 80039f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039fa:	61fa      	str	r2, [r7, #28]
 80039fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fe:	69b9      	ldr	r1, [r7, #24]
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	e841 2300 	strex	r3, r2, [r1]
 8003a06:	617b      	str	r3, [r7, #20]
   return(result);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1e5      	bne.n	80039da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e012      	b.n	8003a48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3758      	adds	r7, #88	@ 0x58
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a60:	e04f      	b.n	8003b02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d04b      	beq.n	8003b02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6a:	f7fd fac7 	bl	8000ffc <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d302      	bcc.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e04e      	b.n	8003b22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d037      	beq.n	8003b02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b80      	cmp	r3, #128	@ 0x80
 8003a96:	d034      	beq.n	8003b02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b40      	cmp	r3, #64	@ 0x40
 8003a9c:	d031      	beq.n	8003b02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d110      	bne.n	8003ace <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2208      	movs	r2, #8
 8003ab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 f838 	bl	8003b2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2208      	movs	r2, #8
 8003abe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e029      	b.n	8003b22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ad8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003adc:	d111      	bne.n	8003b02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ae6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f81e 	bl	8003b2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e00f      	b.n	8003b22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	bf0c      	ite	eq
 8003b12:	2301      	moveq	r3, #1
 8003b14:	2300      	movne	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d0a0      	beq.n	8003a62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b095      	sub	sp, #84	@ 0x54
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3a:	e853 3f00 	ldrex	r3, [r3]
 8003b3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b50:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b58:	e841 2300 	strex	r3, r2, [r1]
 8003b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e6      	bne.n	8003b32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3308      	adds	r3, #8
 8003b6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3308      	adds	r3, #8
 8003b86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e3      	bne.n	8003b64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d118      	bne.n	8003bd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f023 0310 	bic.w	r3, r3, #16
 8003bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	6979      	ldr	r1, [r7, #20]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	e841 2300 	strex	r3, r2, [r1]
 8003bce:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e6      	bne.n	8003ba4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003bea:	bf00      	nop
 8003bec:	3754      	adds	r7, #84	@ 0x54
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b085      	sub	sp, #20
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_UARTEx_DisableFifoMode+0x16>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e027      	b.n	8003c5c <HAL_UARTEx_DisableFifoMode+0x66>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2224      	movs	r2, #36	@ 0x24
 8003c18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003c3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e02d      	b.n	8003cdc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2224      	movs	r2, #36	@ 0x24
 8003c8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f84f 	bl	8003d60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e02d      	b.n	8003d58 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2224      	movs	r2, #36	@ 0x24
 8003d08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0201 	bic.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f811 	bl	8003d60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d108      	bne.n	8003d82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d80:	e031      	b.n	8003de6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d82:	2308      	movs	r3, #8
 8003d84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d86:	2308      	movs	r3, #8
 8003d88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	0e5b      	lsrs	r3, r3, #25
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	0f5b      	lsrs	r3, r3, #29
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003daa:	7bbb      	ldrb	r3, [r7, #14]
 8003dac:	7b3a      	ldrb	r2, [r7, #12]
 8003dae:	4911      	ldr	r1, [pc, #68]	@ (8003df4 <UARTEx_SetNbDataToProcess+0x94>)
 8003db0:	5c8a      	ldrb	r2, [r1, r2]
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003db6:	7b3a      	ldrb	r2, [r7, #12]
 8003db8:	490f      	ldr	r1, [pc, #60]	@ (8003df8 <UARTEx_SetNbDataToProcess+0x98>)
 8003dba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003dbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	7b7a      	ldrb	r2, [r7, #13]
 8003dcc:	4909      	ldr	r1, [pc, #36]	@ (8003df4 <UARTEx_SetNbDataToProcess+0x94>)
 8003dce:	5c8a      	ldrb	r2, [r1, r2]
 8003dd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003dd4:	7b7a      	ldrb	r2, [r7, #13]
 8003dd6:	4908      	ldr	r1, [pc, #32]	@ (8003df8 <UARTEx_SetNbDataToProcess+0x98>)
 8003dd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003dda:	fb93 f3f2 	sdiv	r3, r3, r2
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003de6:	bf00      	nop
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	08004fcc 	.word	0x08004fcc
 8003df8:	08004fd4 	.word	0x08004fd4

08003dfc <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8003e00:	4907      	ldr	r1, [pc, #28]	@ (8003e20 <MX_FATFS_Init+0x24>)
 8003e02:	4808      	ldr	r0, [pc, #32]	@ (8003e24 <MX_FATFS_Init+0x28>)
 8003e04:	f000 f8b6 	bl	8003f74 <FATFS_LinkDriver>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8003e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e12:	e003      	b.n	8003e1c <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8003e14:	4b04      	ldr	r3, [pc, #16]	@ (8003e28 <MX_FATFS_Init+0x2c>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8003e1a:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	200002d0 	.word	0x200002d0
 8003e24:	20000010 	.word	0x20000010
 8003e28:	200002d4 	.word	0x200002d4

08003e2c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8003e36:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <USER_initialize+0x24>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003e3c:	4b04      	ldr	r3, [pc, #16]	@ (8003e50 <USER_initialize+0x24>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	2000000c 	.word	0x2000000c

08003e54 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8003e5e:	4b06      	ldr	r3, [pc, #24]	@ (8003e78 <USER_status+0x24>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003e64:	4b04      	ldr	r3, [pc, #16]	@ (8003e78 <USER_status+0x24>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	2000000c 	.word	0x2000000c

08003e7c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	4603      	mov	r3, r0
 8003e8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8003e8c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8003eaa:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	603a      	str	r2, [r7, #0]
 8003ec2:	71fb      	strb	r3, [r7, #7]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	73fb      	strb	r3, [r7, #15]
    return res;
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8003eea:	2301      	movs	r3, #1
 8003eec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8003ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f70 <FATFS_LinkDriverEx+0x94>)
 8003ef4:	7a5b      	ldrb	r3, [r3, #9]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d131      	bne.n	8003f60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003efc:	4b1c      	ldr	r3, [pc, #112]	@ (8003f70 <FATFS_LinkDriverEx+0x94>)
 8003efe:	7a5b      	ldrb	r3, [r3, #9]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	4b1a      	ldr	r3, [pc, #104]	@ (8003f70 <FATFS_LinkDriverEx+0x94>)
 8003f06:	2100      	movs	r1, #0
 8003f08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8003f0a:	4b19      	ldr	r3, [pc, #100]	@ (8003f70 <FATFS_LinkDriverEx+0x94>)
 8003f0c:	7a5b      	ldrb	r3, [r3, #9]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	4a17      	ldr	r2, [pc, #92]	@ (8003f70 <FATFS_LinkDriverEx+0x94>)
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8003f1a:	4b15      	ldr	r3, [pc, #84]	@ (8003f70 <FATFS_LinkDriverEx+0x94>)
 8003f1c:	7a5b      	ldrb	r3, [r3, #9]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b13      	ldr	r3, [pc, #76]	@ (8003f70 <FATFS_LinkDriverEx+0x94>)
 8003f24:	4413      	add	r3, r2
 8003f26:	79fa      	ldrb	r2, [r7, #7]
 8003f28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8003f2a:	4b11      	ldr	r3, [pc, #68]	@ (8003f70 <FATFS_LinkDriverEx+0x94>)
 8003f2c:	7a5b      	ldrb	r3, [r3, #9]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	b2d1      	uxtb	r1, r2
 8003f34:	4a0e      	ldr	r2, [pc, #56]	@ (8003f70 <FATFS_LinkDriverEx+0x94>)
 8003f36:	7251      	strb	r1, [r2, #9]
 8003f38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8003f3a:	7dbb      	ldrb	r3, [r7, #22]
 8003f3c:	3330      	adds	r3, #48	@ 0x30
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	3301      	adds	r3, #1
 8003f48:	223a      	movs	r2, #58	@ 0x3a
 8003f4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	3302      	adds	r3, #2
 8003f50:	222f      	movs	r2, #47	@ 0x2f
 8003f52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	3303      	adds	r3, #3
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	200002d8 	.word	0x200002d8

08003f74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	6839      	ldr	r1, [r7, #0]
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff ffaa 	bl	8003edc <FATFS_LinkDriverEx>
 8003f88:	4603      	mov	r3, r0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <std>:
 8003f94:	2300      	movs	r3, #0
 8003f96:	b510      	push	{r4, lr}
 8003f98:	4604      	mov	r4, r0
 8003f9a:	e9c0 3300 	strd	r3, r3, [r0]
 8003f9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003fa2:	6083      	str	r3, [r0, #8]
 8003fa4:	8181      	strh	r1, [r0, #12]
 8003fa6:	6643      	str	r3, [r0, #100]	@ 0x64
 8003fa8:	81c2      	strh	r2, [r0, #14]
 8003faa:	6183      	str	r3, [r0, #24]
 8003fac:	4619      	mov	r1, r3
 8003fae:	2208      	movs	r2, #8
 8003fb0:	305c      	adds	r0, #92	@ 0x5c
 8003fb2:	f000 f9c2 	bl	800433a <memset>
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fec <std+0x58>)
 8003fb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8003fba:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff0 <std+0x5c>)
 8003fbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff4 <std+0x60>)
 8003fc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff8 <std+0x64>)
 8003fc4:	6323      	str	r3, [r4, #48]	@ 0x30
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003ffc <std+0x68>)
 8003fc8:	6224      	str	r4, [r4, #32]
 8003fca:	429c      	cmp	r4, r3
 8003fcc:	d006      	beq.n	8003fdc <std+0x48>
 8003fce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003fd2:	4294      	cmp	r4, r2
 8003fd4:	d002      	beq.n	8003fdc <std+0x48>
 8003fd6:	33d0      	adds	r3, #208	@ 0xd0
 8003fd8:	429c      	cmp	r4, r3
 8003fda:	d105      	bne.n	8003fe8 <std+0x54>
 8003fdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fe4:	f000 ba22 	b.w	800442c <__retarget_lock_init_recursive>
 8003fe8:	bd10      	pop	{r4, pc}
 8003fea:	bf00      	nop
 8003fec:	080042b5 	.word	0x080042b5
 8003ff0:	080042d7 	.word	0x080042d7
 8003ff4:	0800430f 	.word	0x0800430f
 8003ff8:	08004333 	.word	0x08004333
 8003ffc:	200002e4 	.word	0x200002e4

08004000 <stdio_exit_handler>:
 8004000:	4a02      	ldr	r2, [pc, #8]	@ (800400c <stdio_exit_handler+0xc>)
 8004002:	4903      	ldr	r1, [pc, #12]	@ (8004010 <stdio_exit_handler+0x10>)
 8004004:	4803      	ldr	r0, [pc, #12]	@ (8004014 <stdio_exit_handler+0x14>)
 8004006:	f000 b869 	b.w	80040dc <_fwalk_sglue>
 800400a:	bf00      	nop
 800400c:	20000024 	.word	0x20000024
 8004010:	08004cdd 	.word	0x08004cdd
 8004014:	20000034 	.word	0x20000034

08004018 <cleanup_stdio>:
 8004018:	6841      	ldr	r1, [r0, #4]
 800401a:	4b0c      	ldr	r3, [pc, #48]	@ (800404c <cleanup_stdio+0x34>)
 800401c:	4299      	cmp	r1, r3
 800401e:	b510      	push	{r4, lr}
 8004020:	4604      	mov	r4, r0
 8004022:	d001      	beq.n	8004028 <cleanup_stdio+0x10>
 8004024:	f000 fe5a 	bl	8004cdc <_fflush_r>
 8004028:	68a1      	ldr	r1, [r4, #8]
 800402a:	4b09      	ldr	r3, [pc, #36]	@ (8004050 <cleanup_stdio+0x38>)
 800402c:	4299      	cmp	r1, r3
 800402e:	d002      	beq.n	8004036 <cleanup_stdio+0x1e>
 8004030:	4620      	mov	r0, r4
 8004032:	f000 fe53 	bl	8004cdc <_fflush_r>
 8004036:	68e1      	ldr	r1, [r4, #12]
 8004038:	4b06      	ldr	r3, [pc, #24]	@ (8004054 <cleanup_stdio+0x3c>)
 800403a:	4299      	cmp	r1, r3
 800403c:	d004      	beq.n	8004048 <cleanup_stdio+0x30>
 800403e:	4620      	mov	r0, r4
 8004040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004044:	f000 be4a 	b.w	8004cdc <_fflush_r>
 8004048:	bd10      	pop	{r4, pc}
 800404a:	bf00      	nop
 800404c:	200002e4 	.word	0x200002e4
 8004050:	2000034c 	.word	0x2000034c
 8004054:	200003b4 	.word	0x200003b4

08004058 <global_stdio_init.part.0>:
 8004058:	b510      	push	{r4, lr}
 800405a:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <global_stdio_init.part.0+0x30>)
 800405c:	4c0b      	ldr	r4, [pc, #44]	@ (800408c <global_stdio_init.part.0+0x34>)
 800405e:	4a0c      	ldr	r2, [pc, #48]	@ (8004090 <global_stdio_init.part.0+0x38>)
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	4620      	mov	r0, r4
 8004064:	2200      	movs	r2, #0
 8004066:	2104      	movs	r1, #4
 8004068:	f7ff ff94 	bl	8003f94 <std>
 800406c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004070:	2201      	movs	r2, #1
 8004072:	2109      	movs	r1, #9
 8004074:	f7ff ff8e 	bl	8003f94 <std>
 8004078:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800407c:	2202      	movs	r2, #2
 800407e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004082:	2112      	movs	r1, #18
 8004084:	f7ff bf86 	b.w	8003f94 <std>
 8004088:	2000041c 	.word	0x2000041c
 800408c:	200002e4 	.word	0x200002e4
 8004090:	08004001 	.word	0x08004001

08004094 <__sfp_lock_acquire>:
 8004094:	4801      	ldr	r0, [pc, #4]	@ (800409c <__sfp_lock_acquire+0x8>)
 8004096:	f000 b9ca 	b.w	800442e <__retarget_lock_acquire_recursive>
 800409a:	bf00      	nop
 800409c:	20000425 	.word	0x20000425

080040a0 <__sfp_lock_release>:
 80040a0:	4801      	ldr	r0, [pc, #4]	@ (80040a8 <__sfp_lock_release+0x8>)
 80040a2:	f000 b9c5 	b.w	8004430 <__retarget_lock_release_recursive>
 80040a6:	bf00      	nop
 80040a8:	20000425 	.word	0x20000425

080040ac <__sinit>:
 80040ac:	b510      	push	{r4, lr}
 80040ae:	4604      	mov	r4, r0
 80040b0:	f7ff fff0 	bl	8004094 <__sfp_lock_acquire>
 80040b4:	6a23      	ldr	r3, [r4, #32]
 80040b6:	b11b      	cbz	r3, 80040c0 <__sinit+0x14>
 80040b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040bc:	f7ff bff0 	b.w	80040a0 <__sfp_lock_release>
 80040c0:	4b04      	ldr	r3, [pc, #16]	@ (80040d4 <__sinit+0x28>)
 80040c2:	6223      	str	r3, [r4, #32]
 80040c4:	4b04      	ldr	r3, [pc, #16]	@ (80040d8 <__sinit+0x2c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f5      	bne.n	80040b8 <__sinit+0xc>
 80040cc:	f7ff ffc4 	bl	8004058 <global_stdio_init.part.0>
 80040d0:	e7f2      	b.n	80040b8 <__sinit+0xc>
 80040d2:	bf00      	nop
 80040d4:	08004019 	.word	0x08004019
 80040d8:	2000041c 	.word	0x2000041c

080040dc <_fwalk_sglue>:
 80040dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040e0:	4607      	mov	r7, r0
 80040e2:	4688      	mov	r8, r1
 80040e4:	4614      	mov	r4, r2
 80040e6:	2600      	movs	r6, #0
 80040e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040ec:	f1b9 0901 	subs.w	r9, r9, #1
 80040f0:	d505      	bpl.n	80040fe <_fwalk_sglue+0x22>
 80040f2:	6824      	ldr	r4, [r4, #0]
 80040f4:	2c00      	cmp	r4, #0
 80040f6:	d1f7      	bne.n	80040e8 <_fwalk_sglue+0xc>
 80040f8:	4630      	mov	r0, r6
 80040fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040fe:	89ab      	ldrh	r3, [r5, #12]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d907      	bls.n	8004114 <_fwalk_sglue+0x38>
 8004104:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004108:	3301      	adds	r3, #1
 800410a:	d003      	beq.n	8004114 <_fwalk_sglue+0x38>
 800410c:	4629      	mov	r1, r5
 800410e:	4638      	mov	r0, r7
 8004110:	47c0      	blx	r8
 8004112:	4306      	orrs	r6, r0
 8004114:	3568      	adds	r5, #104	@ 0x68
 8004116:	e7e9      	b.n	80040ec <_fwalk_sglue+0x10>

08004118 <iprintf>:
 8004118:	b40f      	push	{r0, r1, r2, r3}
 800411a:	b507      	push	{r0, r1, r2, lr}
 800411c:	4906      	ldr	r1, [pc, #24]	@ (8004138 <iprintf+0x20>)
 800411e:	ab04      	add	r3, sp, #16
 8004120:	6808      	ldr	r0, [r1, #0]
 8004122:	f853 2b04 	ldr.w	r2, [r3], #4
 8004126:	6881      	ldr	r1, [r0, #8]
 8004128:	9301      	str	r3, [sp, #4]
 800412a:	f000 faad 	bl	8004688 <_vfiprintf_r>
 800412e:	b003      	add	sp, #12
 8004130:	f85d eb04 	ldr.w	lr, [sp], #4
 8004134:	b004      	add	sp, #16
 8004136:	4770      	bx	lr
 8004138:	20000030 	.word	0x20000030

0800413c <setbuf>:
 800413c:	fab1 f281 	clz	r2, r1
 8004140:	0952      	lsrs	r2, r2, #5
 8004142:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004146:	0052      	lsls	r2, r2, #1
 8004148:	f000 b800 	b.w	800414c <setvbuf>

0800414c <setvbuf>:
 800414c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004150:	461d      	mov	r5, r3
 8004152:	4b57      	ldr	r3, [pc, #348]	@ (80042b0 <setvbuf+0x164>)
 8004154:	681f      	ldr	r7, [r3, #0]
 8004156:	4604      	mov	r4, r0
 8004158:	460e      	mov	r6, r1
 800415a:	4690      	mov	r8, r2
 800415c:	b127      	cbz	r7, 8004168 <setvbuf+0x1c>
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	b913      	cbnz	r3, 8004168 <setvbuf+0x1c>
 8004162:	4638      	mov	r0, r7
 8004164:	f7ff ffa2 	bl	80040ac <__sinit>
 8004168:	f1b8 0f02 	cmp.w	r8, #2
 800416c:	d006      	beq.n	800417c <setvbuf+0x30>
 800416e:	f1b8 0f01 	cmp.w	r8, #1
 8004172:	f200 809a 	bhi.w	80042aa <setvbuf+0x15e>
 8004176:	2d00      	cmp	r5, #0
 8004178:	f2c0 8097 	blt.w	80042aa <setvbuf+0x15e>
 800417c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800417e:	07d9      	lsls	r1, r3, #31
 8004180:	d405      	bmi.n	800418e <setvbuf+0x42>
 8004182:	89a3      	ldrh	r3, [r4, #12]
 8004184:	059a      	lsls	r2, r3, #22
 8004186:	d402      	bmi.n	800418e <setvbuf+0x42>
 8004188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800418a:	f000 f950 	bl	800442e <__retarget_lock_acquire_recursive>
 800418e:	4621      	mov	r1, r4
 8004190:	4638      	mov	r0, r7
 8004192:	f000 fda3 	bl	8004cdc <_fflush_r>
 8004196:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004198:	b141      	cbz	r1, 80041ac <setvbuf+0x60>
 800419a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800419e:	4299      	cmp	r1, r3
 80041a0:	d002      	beq.n	80041a8 <setvbuf+0x5c>
 80041a2:	4638      	mov	r0, r7
 80041a4:	f000 f946 	bl	8004434 <_free_r>
 80041a8:	2300      	movs	r3, #0
 80041aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80041ac:	2300      	movs	r3, #0
 80041ae:	61a3      	str	r3, [r4, #24]
 80041b0:	6063      	str	r3, [r4, #4]
 80041b2:	89a3      	ldrh	r3, [r4, #12]
 80041b4:	061b      	lsls	r3, r3, #24
 80041b6:	d503      	bpl.n	80041c0 <setvbuf+0x74>
 80041b8:	6921      	ldr	r1, [r4, #16]
 80041ba:	4638      	mov	r0, r7
 80041bc:	f000 f93a 	bl	8004434 <_free_r>
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80041c6:	f023 0303 	bic.w	r3, r3, #3
 80041ca:	f1b8 0f02 	cmp.w	r8, #2
 80041ce:	81a3      	strh	r3, [r4, #12]
 80041d0:	d061      	beq.n	8004296 <setvbuf+0x14a>
 80041d2:	ab01      	add	r3, sp, #4
 80041d4:	466a      	mov	r2, sp
 80041d6:	4621      	mov	r1, r4
 80041d8:	4638      	mov	r0, r7
 80041da:	f000 fda7 	bl	8004d2c <__swhatbuf_r>
 80041de:	89a3      	ldrh	r3, [r4, #12]
 80041e0:	4318      	orrs	r0, r3
 80041e2:	81a0      	strh	r0, [r4, #12]
 80041e4:	bb2d      	cbnz	r5, 8004232 <setvbuf+0xe6>
 80041e6:	9d00      	ldr	r5, [sp, #0]
 80041e8:	4628      	mov	r0, r5
 80041ea:	f000 f96d 	bl	80044c8 <malloc>
 80041ee:	4606      	mov	r6, r0
 80041f0:	2800      	cmp	r0, #0
 80041f2:	d152      	bne.n	800429a <setvbuf+0x14e>
 80041f4:	f8dd 9000 	ldr.w	r9, [sp]
 80041f8:	45a9      	cmp	r9, r5
 80041fa:	d140      	bne.n	800427e <setvbuf+0x132>
 80041fc:	f04f 35ff 	mov.w	r5, #4294967295
 8004200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004204:	f043 0202 	orr.w	r2, r3, #2
 8004208:	81a2      	strh	r2, [r4, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	60a2      	str	r2, [r4, #8]
 800420e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8004212:	6022      	str	r2, [r4, #0]
 8004214:	6122      	str	r2, [r4, #16]
 8004216:	2201      	movs	r2, #1
 8004218:	6162      	str	r2, [r4, #20]
 800421a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800421c:	07d6      	lsls	r6, r2, #31
 800421e:	d404      	bmi.n	800422a <setvbuf+0xde>
 8004220:	0598      	lsls	r0, r3, #22
 8004222:	d402      	bmi.n	800422a <setvbuf+0xde>
 8004224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004226:	f000 f903 	bl	8004430 <__retarget_lock_release_recursive>
 800422a:	4628      	mov	r0, r5
 800422c:	b003      	add	sp, #12
 800422e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004232:	2e00      	cmp	r6, #0
 8004234:	d0d8      	beq.n	80041e8 <setvbuf+0x9c>
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	b913      	cbnz	r3, 8004240 <setvbuf+0xf4>
 800423a:	4638      	mov	r0, r7
 800423c:	f7ff ff36 	bl	80040ac <__sinit>
 8004240:	f1b8 0f01 	cmp.w	r8, #1
 8004244:	bf08      	it	eq
 8004246:	89a3      	ldrheq	r3, [r4, #12]
 8004248:	6026      	str	r6, [r4, #0]
 800424a:	bf04      	itt	eq
 800424c:	f043 0301 	orreq.w	r3, r3, #1
 8004250:	81a3      	strheq	r3, [r4, #12]
 8004252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004256:	f013 0208 	ands.w	r2, r3, #8
 800425a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800425e:	d01e      	beq.n	800429e <setvbuf+0x152>
 8004260:	07d9      	lsls	r1, r3, #31
 8004262:	bf41      	itttt	mi
 8004264:	2200      	movmi	r2, #0
 8004266:	426d      	negmi	r5, r5
 8004268:	60a2      	strmi	r2, [r4, #8]
 800426a:	61a5      	strmi	r5, [r4, #24]
 800426c:	bf58      	it	pl
 800426e:	60a5      	strpl	r5, [r4, #8]
 8004270:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004272:	07d2      	lsls	r2, r2, #31
 8004274:	d401      	bmi.n	800427a <setvbuf+0x12e>
 8004276:	059b      	lsls	r3, r3, #22
 8004278:	d513      	bpl.n	80042a2 <setvbuf+0x156>
 800427a:	2500      	movs	r5, #0
 800427c:	e7d5      	b.n	800422a <setvbuf+0xde>
 800427e:	4648      	mov	r0, r9
 8004280:	f000 f922 	bl	80044c8 <malloc>
 8004284:	4606      	mov	r6, r0
 8004286:	2800      	cmp	r0, #0
 8004288:	d0b8      	beq.n	80041fc <setvbuf+0xb0>
 800428a:	89a3      	ldrh	r3, [r4, #12]
 800428c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004290:	81a3      	strh	r3, [r4, #12]
 8004292:	464d      	mov	r5, r9
 8004294:	e7cf      	b.n	8004236 <setvbuf+0xea>
 8004296:	2500      	movs	r5, #0
 8004298:	e7b2      	b.n	8004200 <setvbuf+0xb4>
 800429a:	46a9      	mov	r9, r5
 800429c:	e7f5      	b.n	800428a <setvbuf+0x13e>
 800429e:	60a2      	str	r2, [r4, #8]
 80042a0:	e7e6      	b.n	8004270 <setvbuf+0x124>
 80042a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042a4:	f000 f8c4 	bl	8004430 <__retarget_lock_release_recursive>
 80042a8:	e7e7      	b.n	800427a <setvbuf+0x12e>
 80042aa:	f04f 35ff 	mov.w	r5, #4294967295
 80042ae:	e7bc      	b.n	800422a <setvbuf+0xde>
 80042b0:	20000030 	.word	0x20000030

080042b4 <__sread>:
 80042b4:	b510      	push	{r4, lr}
 80042b6:	460c      	mov	r4, r1
 80042b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042bc:	f000 f868 	bl	8004390 <_read_r>
 80042c0:	2800      	cmp	r0, #0
 80042c2:	bfab      	itete	ge
 80042c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80042c6:	89a3      	ldrhlt	r3, [r4, #12]
 80042c8:	181b      	addge	r3, r3, r0
 80042ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80042ce:	bfac      	ite	ge
 80042d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80042d2:	81a3      	strhlt	r3, [r4, #12]
 80042d4:	bd10      	pop	{r4, pc}

080042d6 <__swrite>:
 80042d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042da:	461f      	mov	r7, r3
 80042dc:	898b      	ldrh	r3, [r1, #12]
 80042de:	05db      	lsls	r3, r3, #23
 80042e0:	4605      	mov	r5, r0
 80042e2:	460c      	mov	r4, r1
 80042e4:	4616      	mov	r6, r2
 80042e6:	d505      	bpl.n	80042f4 <__swrite+0x1e>
 80042e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ec:	2302      	movs	r3, #2
 80042ee:	2200      	movs	r2, #0
 80042f0:	f000 f83c 	bl	800436c <_lseek_r>
 80042f4:	89a3      	ldrh	r3, [r4, #12]
 80042f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042fe:	81a3      	strh	r3, [r4, #12]
 8004300:	4632      	mov	r2, r6
 8004302:	463b      	mov	r3, r7
 8004304:	4628      	mov	r0, r5
 8004306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800430a:	f000 b853 	b.w	80043b4 <_write_r>

0800430e <__sseek>:
 800430e:	b510      	push	{r4, lr}
 8004310:	460c      	mov	r4, r1
 8004312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004316:	f000 f829 	bl	800436c <_lseek_r>
 800431a:	1c43      	adds	r3, r0, #1
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	bf15      	itete	ne
 8004320:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004322:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004326:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800432a:	81a3      	strheq	r3, [r4, #12]
 800432c:	bf18      	it	ne
 800432e:	81a3      	strhne	r3, [r4, #12]
 8004330:	bd10      	pop	{r4, pc}

08004332 <__sclose>:
 8004332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004336:	f000 b809 	b.w	800434c <_close_r>

0800433a <memset>:
 800433a:	4402      	add	r2, r0
 800433c:	4603      	mov	r3, r0
 800433e:	4293      	cmp	r3, r2
 8004340:	d100      	bne.n	8004344 <memset+0xa>
 8004342:	4770      	bx	lr
 8004344:	f803 1b01 	strb.w	r1, [r3], #1
 8004348:	e7f9      	b.n	800433e <memset+0x4>
	...

0800434c <_close_r>:
 800434c:	b538      	push	{r3, r4, r5, lr}
 800434e:	4d06      	ldr	r5, [pc, #24]	@ (8004368 <_close_r+0x1c>)
 8004350:	2300      	movs	r3, #0
 8004352:	4604      	mov	r4, r0
 8004354:	4608      	mov	r0, r1
 8004356:	602b      	str	r3, [r5, #0]
 8004358:	f7fc fd45 	bl	8000de6 <_close>
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	d102      	bne.n	8004366 <_close_r+0x1a>
 8004360:	682b      	ldr	r3, [r5, #0]
 8004362:	b103      	cbz	r3, 8004366 <_close_r+0x1a>
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	bd38      	pop	{r3, r4, r5, pc}
 8004368:	20000420 	.word	0x20000420

0800436c <_lseek_r>:
 800436c:	b538      	push	{r3, r4, r5, lr}
 800436e:	4d07      	ldr	r5, [pc, #28]	@ (800438c <_lseek_r+0x20>)
 8004370:	4604      	mov	r4, r0
 8004372:	4608      	mov	r0, r1
 8004374:	4611      	mov	r1, r2
 8004376:	2200      	movs	r2, #0
 8004378:	602a      	str	r2, [r5, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	f7fc fd5a 	bl	8000e34 <_lseek>
 8004380:	1c43      	adds	r3, r0, #1
 8004382:	d102      	bne.n	800438a <_lseek_r+0x1e>
 8004384:	682b      	ldr	r3, [r5, #0]
 8004386:	b103      	cbz	r3, 800438a <_lseek_r+0x1e>
 8004388:	6023      	str	r3, [r4, #0]
 800438a:	bd38      	pop	{r3, r4, r5, pc}
 800438c:	20000420 	.word	0x20000420

08004390 <_read_r>:
 8004390:	b538      	push	{r3, r4, r5, lr}
 8004392:	4d07      	ldr	r5, [pc, #28]	@ (80043b0 <_read_r+0x20>)
 8004394:	4604      	mov	r4, r0
 8004396:	4608      	mov	r0, r1
 8004398:	4611      	mov	r1, r2
 800439a:	2200      	movs	r2, #0
 800439c:	602a      	str	r2, [r5, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	f7fc fd04 	bl	8000dac <_read>
 80043a4:	1c43      	adds	r3, r0, #1
 80043a6:	d102      	bne.n	80043ae <_read_r+0x1e>
 80043a8:	682b      	ldr	r3, [r5, #0]
 80043aa:	b103      	cbz	r3, 80043ae <_read_r+0x1e>
 80043ac:	6023      	str	r3, [r4, #0]
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	20000420 	.word	0x20000420

080043b4 <_write_r>:
 80043b4:	b538      	push	{r3, r4, r5, lr}
 80043b6:	4d07      	ldr	r5, [pc, #28]	@ (80043d4 <_write_r+0x20>)
 80043b8:	4604      	mov	r4, r0
 80043ba:	4608      	mov	r0, r1
 80043bc:	4611      	mov	r1, r2
 80043be:	2200      	movs	r2, #0
 80043c0:	602a      	str	r2, [r5, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	f7fc f92c 	bl	8000620 <_write>
 80043c8:	1c43      	adds	r3, r0, #1
 80043ca:	d102      	bne.n	80043d2 <_write_r+0x1e>
 80043cc:	682b      	ldr	r3, [r5, #0]
 80043ce:	b103      	cbz	r3, 80043d2 <_write_r+0x1e>
 80043d0:	6023      	str	r3, [r4, #0]
 80043d2:	bd38      	pop	{r3, r4, r5, pc}
 80043d4:	20000420 	.word	0x20000420

080043d8 <__errno>:
 80043d8:	4b01      	ldr	r3, [pc, #4]	@ (80043e0 <__errno+0x8>)
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	20000030 	.word	0x20000030

080043e4 <__libc_init_array>:
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	4d0d      	ldr	r5, [pc, #52]	@ (800441c <__libc_init_array+0x38>)
 80043e8:	4c0d      	ldr	r4, [pc, #52]	@ (8004420 <__libc_init_array+0x3c>)
 80043ea:	1b64      	subs	r4, r4, r5
 80043ec:	10a4      	asrs	r4, r4, #2
 80043ee:	2600      	movs	r6, #0
 80043f0:	42a6      	cmp	r6, r4
 80043f2:	d109      	bne.n	8004408 <__libc_init_array+0x24>
 80043f4:	4d0b      	ldr	r5, [pc, #44]	@ (8004424 <__libc_init_array+0x40>)
 80043f6:	4c0c      	ldr	r4, [pc, #48]	@ (8004428 <__libc_init_array+0x44>)
 80043f8:	f000 fdc0 	bl	8004f7c <_init>
 80043fc:	1b64      	subs	r4, r4, r5
 80043fe:	10a4      	asrs	r4, r4, #2
 8004400:	2600      	movs	r6, #0
 8004402:	42a6      	cmp	r6, r4
 8004404:	d105      	bne.n	8004412 <__libc_init_array+0x2e>
 8004406:	bd70      	pop	{r4, r5, r6, pc}
 8004408:	f855 3b04 	ldr.w	r3, [r5], #4
 800440c:	4798      	blx	r3
 800440e:	3601      	adds	r6, #1
 8004410:	e7ee      	b.n	80043f0 <__libc_init_array+0xc>
 8004412:	f855 3b04 	ldr.w	r3, [r5], #4
 8004416:	4798      	blx	r3
 8004418:	3601      	adds	r6, #1
 800441a:	e7f2      	b.n	8004402 <__libc_init_array+0x1e>
 800441c:	08005018 	.word	0x08005018
 8004420:	08005018 	.word	0x08005018
 8004424:	08005018 	.word	0x08005018
 8004428:	0800501c 	.word	0x0800501c

0800442c <__retarget_lock_init_recursive>:
 800442c:	4770      	bx	lr

0800442e <__retarget_lock_acquire_recursive>:
 800442e:	4770      	bx	lr

08004430 <__retarget_lock_release_recursive>:
 8004430:	4770      	bx	lr
	...

08004434 <_free_r>:
 8004434:	b538      	push	{r3, r4, r5, lr}
 8004436:	4605      	mov	r5, r0
 8004438:	2900      	cmp	r1, #0
 800443a:	d041      	beq.n	80044c0 <_free_r+0x8c>
 800443c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004440:	1f0c      	subs	r4, r1, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	bfb8      	it	lt
 8004446:	18e4      	addlt	r4, r4, r3
 8004448:	f000 f8e8 	bl	800461c <__malloc_lock>
 800444c:	4a1d      	ldr	r2, [pc, #116]	@ (80044c4 <_free_r+0x90>)
 800444e:	6813      	ldr	r3, [r2, #0]
 8004450:	b933      	cbnz	r3, 8004460 <_free_r+0x2c>
 8004452:	6063      	str	r3, [r4, #4]
 8004454:	6014      	str	r4, [r2, #0]
 8004456:	4628      	mov	r0, r5
 8004458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800445c:	f000 b8e4 	b.w	8004628 <__malloc_unlock>
 8004460:	42a3      	cmp	r3, r4
 8004462:	d908      	bls.n	8004476 <_free_r+0x42>
 8004464:	6820      	ldr	r0, [r4, #0]
 8004466:	1821      	adds	r1, r4, r0
 8004468:	428b      	cmp	r3, r1
 800446a:	bf01      	itttt	eq
 800446c:	6819      	ldreq	r1, [r3, #0]
 800446e:	685b      	ldreq	r3, [r3, #4]
 8004470:	1809      	addeq	r1, r1, r0
 8004472:	6021      	streq	r1, [r4, #0]
 8004474:	e7ed      	b.n	8004452 <_free_r+0x1e>
 8004476:	461a      	mov	r2, r3
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	b10b      	cbz	r3, 8004480 <_free_r+0x4c>
 800447c:	42a3      	cmp	r3, r4
 800447e:	d9fa      	bls.n	8004476 <_free_r+0x42>
 8004480:	6811      	ldr	r1, [r2, #0]
 8004482:	1850      	adds	r0, r2, r1
 8004484:	42a0      	cmp	r0, r4
 8004486:	d10b      	bne.n	80044a0 <_free_r+0x6c>
 8004488:	6820      	ldr	r0, [r4, #0]
 800448a:	4401      	add	r1, r0
 800448c:	1850      	adds	r0, r2, r1
 800448e:	4283      	cmp	r3, r0
 8004490:	6011      	str	r1, [r2, #0]
 8004492:	d1e0      	bne.n	8004456 <_free_r+0x22>
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	6053      	str	r3, [r2, #4]
 800449a:	4408      	add	r0, r1
 800449c:	6010      	str	r0, [r2, #0]
 800449e:	e7da      	b.n	8004456 <_free_r+0x22>
 80044a0:	d902      	bls.n	80044a8 <_free_r+0x74>
 80044a2:	230c      	movs	r3, #12
 80044a4:	602b      	str	r3, [r5, #0]
 80044a6:	e7d6      	b.n	8004456 <_free_r+0x22>
 80044a8:	6820      	ldr	r0, [r4, #0]
 80044aa:	1821      	adds	r1, r4, r0
 80044ac:	428b      	cmp	r3, r1
 80044ae:	bf04      	itt	eq
 80044b0:	6819      	ldreq	r1, [r3, #0]
 80044b2:	685b      	ldreq	r3, [r3, #4]
 80044b4:	6063      	str	r3, [r4, #4]
 80044b6:	bf04      	itt	eq
 80044b8:	1809      	addeq	r1, r1, r0
 80044ba:	6021      	streq	r1, [r4, #0]
 80044bc:	6054      	str	r4, [r2, #4]
 80044be:	e7ca      	b.n	8004456 <_free_r+0x22>
 80044c0:	bd38      	pop	{r3, r4, r5, pc}
 80044c2:	bf00      	nop
 80044c4:	2000042c 	.word	0x2000042c

080044c8 <malloc>:
 80044c8:	4b02      	ldr	r3, [pc, #8]	@ (80044d4 <malloc+0xc>)
 80044ca:	4601      	mov	r1, r0
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	f000 b825 	b.w	800451c <_malloc_r>
 80044d2:	bf00      	nop
 80044d4:	20000030 	.word	0x20000030

080044d8 <sbrk_aligned>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	4e0f      	ldr	r6, [pc, #60]	@ (8004518 <sbrk_aligned+0x40>)
 80044dc:	460c      	mov	r4, r1
 80044de:	6831      	ldr	r1, [r6, #0]
 80044e0:	4605      	mov	r5, r0
 80044e2:	b911      	cbnz	r1, 80044ea <sbrk_aligned+0x12>
 80044e4:	f000 fd3a 	bl	8004f5c <_sbrk_r>
 80044e8:	6030      	str	r0, [r6, #0]
 80044ea:	4621      	mov	r1, r4
 80044ec:	4628      	mov	r0, r5
 80044ee:	f000 fd35 	bl	8004f5c <_sbrk_r>
 80044f2:	1c43      	adds	r3, r0, #1
 80044f4:	d103      	bne.n	80044fe <sbrk_aligned+0x26>
 80044f6:	f04f 34ff 	mov.w	r4, #4294967295
 80044fa:	4620      	mov	r0, r4
 80044fc:	bd70      	pop	{r4, r5, r6, pc}
 80044fe:	1cc4      	adds	r4, r0, #3
 8004500:	f024 0403 	bic.w	r4, r4, #3
 8004504:	42a0      	cmp	r0, r4
 8004506:	d0f8      	beq.n	80044fa <sbrk_aligned+0x22>
 8004508:	1a21      	subs	r1, r4, r0
 800450a:	4628      	mov	r0, r5
 800450c:	f000 fd26 	bl	8004f5c <_sbrk_r>
 8004510:	3001      	adds	r0, #1
 8004512:	d1f2      	bne.n	80044fa <sbrk_aligned+0x22>
 8004514:	e7ef      	b.n	80044f6 <sbrk_aligned+0x1e>
 8004516:	bf00      	nop
 8004518:	20000428 	.word	0x20000428

0800451c <_malloc_r>:
 800451c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004520:	1ccd      	adds	r5, r1, #3
 8004522:	f025 0503 	bic.w	r5, r5, #3
 8004526:	3508      	adds	r5, #8
 8004528:	2d0c      	cmp	r5, #12
 800452a:	bf38      	it	cc
 800452c:	250c      	movcc	r5, #12
 800452e:	2d00      	cmp	r5, #0
 8004530:	4606      	mov	r6, r0
 8004532:	db01      	blt.n	8004538 <_malloc_r+0x1c>
 8004534:	42a9      	cmp	r1, r5
 8004536:	d904      	bls.n	8004542 <_malloc_r+0x26>
 8004538:	230c      	movs	r3, #12
 800453a:	6033      	str	r3, [r6, #0]
 800453c:	2000      	movs	r0, #0
 800453e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004542:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004618 <_malloc_r+0xfc>
 8004546:	f000 f869 	bl	800461c <__malloc_lock>
 800454a:	f8d8 3000 	ldr.w	r3, [r8]
 800454e:	461c      	mov	r4, r3
 8004550:	bb44      	cbnz	r4, 80045a4 <_malloc_r+0x88>
 8004552:	4629      	mov	r1, r5
 8004554:	4630      	mov	r0, r6
 8004556:	f7ff ffbf 	bl	80044d8 <sbrk_aligned>
 800455a:	1c43      	adds	r3, r0, #1
 800455c:	4604      	mov	r4, r0
 800455e:	d158      	bne.n	8004612 <_malloc_r+0xf6>
 8004560:	f8d8 4000 	ldr.w	r4, [r8]
 8004564:	4627      	mov	r7, r4
 8004566:	2f00      	cmp	r7, #0
 8004568:	d143      	bne.n	80045f2 <_malloc_r+0xd6>
 800456a:	2c00      	cmp	r4, #0
 800456c:	d04b      	beq.n	8004606 <_malloc_r+0xea>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	4639      	mov	r1, r7
 8004572:	4630      	mov	r0, r6
 8004574:	eb04 0903 	add.w	r9, r4, r3
 8004578:	f000 fcf0 	bl	8004f5c <_sbrk_r>
 800457c:	4581      	cmp	r9, r0
 800457e:	d142      	bne.n	8004606 <_malloc_r+0xea>
 8004580:	6821      	ldr	r1, [r4, #0]
 8004582:	1a6d      	subs	r5, r5, r1
 8004584:	4629      	mov	r1, r5
 8004586:	4630      	mov	r0, r6
 8004588:	f7ff ffa6 	bl	80044d8 <sbrk_aligned>
 800458c:	3001      	adds	r0, #1
 800458e:	d03a      	beq.n	8004606 <_malloc_r+0xea>
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	442b      	add	r3, r5
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	f8d8 3000 	ldr.w	r3, [r8]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	bb62      	cbnz	r2, 80045f8 <_malloc_r+0xdc>
 800459e:	f8c8 7000 	str.w	r7, [r8]
 80045a2:	e00f      	b.n	80045c4 <_malloc_r+0xa8>
 80045a4:	6822      	ldr	r2, [r4, #0]
 80045a6:	1b52      	subs	r2, r2, r5
 80045a8:	d420      	bmi.n	80045ec <_malloc_r+0xd0>
 80045aa:	2a0b      	cmp	r2, #11
 80045ac:	d917      	bls.n	80045de <_malloc_r+0xc2>
 80045ae:	1961      	adds	r1, r4, r5
 80045b0:	42a3      	cmp	r3, r4
 80045b2:	6025      	str	r5, [r4, #0]
 80045b4:	bf18      	it	ne
 80045b6:	6059      	strne	r1, [r3, #4]
 80045b8:	6863      	ldr	r3, [r4, #4]
 80045ba:	bf08      	it	eq
 80045bc:	f8c8 1000 	streq.w	r1, [r8]
 80045c0:	5162      	str	r2, [r4, r5]
 80045c2:	604b      	str	r3, [r1, #4]
 80045c4:	4630      	mov	r0, r6
 80045c6:	f000 f82f 	bl	8004628 <__malloc_unlock>
 80045ca:	f104 000b 	add.w	r0, r4, #11
 80045ce:	1d23      	adds	r3, r4, #4
 80045d0:	f020 0007 	bic.w	r0, r0, #7
 80045d4:	1ac2      	subs	r2, r0, r3
 80045d6:	bf1c      	itt	ne
 80045d8:	1a1b      	subne	r3, r3, r0
 80045da:	50a3      	strne	r3, [r4, r2]
 80045dc:	e7af      	b.n	800453e <_malloc_r+0x22>
 80045de:	6862      	ldr	r2, [r4, #4]
 80045e0:	42a3      	cmp	r3, r4
 80045e2:	bf0c      	ite	eq
 80045e4:	f8c8 2000 	streq.w	r2, [r8]
 80045e8:	605a      	strne	r2, [r3, #4]
 80045ea:	e7eb      	b.n	80045c4 <_malloc_r+0xa8>
 80045ec:	4623      	mov	r3, r4
 80045ee:	6864      	ldr	r4, [r4, #4]
 80045f0:	e7ae      	b.n	8004550 <_malloc_r+0x34>
 80045f2:	463c      	mov	r4, r7
 80045f4:	687f      	ldr	r7, [r7, #4]
 80045f6:	e7b6      	b.n	8004566 <_malloc_r+0x4a>
 80045f8:	461a      	mov	r2, r3
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	42a3      	cmp	r3, r4
 80045fe:	d1fb      	bne.n	80045f8 <_malloc_r+0xdc>
 8004600:	2300      	movs	r3, #0
 8004602:	6053      	str	r3, [r2, #4]
 8004604:	e7de      	b.n	80045c4 <_malloc_r+0xa8>
 8004606:	230c      	movs	r3, #12
 8004608:	6033      	str	r3, [r6, #0]
 800460a:	4630      	mov	r0, r6
 800460c:	f000 f80c 	bl	8004628 <__malloc_unlock>
 8004610:	e794      	b.n	800453c <_malloc_r+0x20>
 8004612:	6005      	str	r5, [r0, #0]
 8004614:	e7d6      	b.n	80045c4 <_malloc_r+0xa8>
 8004616:	bf00      	nop
 8004618:	2000042c 	.word	0x2000042c

0800461c <__malloc_lock>:
 800461c:	4801      	ldr	r0, [pc, #4]	@ (8004624 <__malloc_lock+0x8>)
 800461e:	f7ff bf06 	b.w	800442e <__retarget_lock_acquire_recursive>
 8004622:	bf00      	nop
 8004624:	20000424 	.word	0x20000424

08004628 <__malloc_unlock>:
 8004628:	4801      	ldr	r0, [pc, #4]	@ (8004630 <__malloc_unlock+0x8>)
 800462a:	f7ff bf01 	b.w	8004430 <__retarget_lock_release_recursive>
 800462e:	bf00      	nop
 8004630:	20000424 	.word	0x20000424

08004634 <__sfputc_r>:
 8004634:	6893      	ldr	r3, [r2, #8]
 8004636:	3b01      	subs	r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	b410      	push	{r4}
 800463c:	6093      	str	r3, [r2, #8]
 800463e:	da08      	bge.n	8004652 <__sfputc_r+0x1e>
 8004640:	6994      	ldr	r4, [r2, #24]
 8004642:	42a3      	cmp	r3, r4
 8004644:	db01      	blt.n	800464a <__sfputc_r+0x16>
 8004646:	290a      	cmp	r1, #10
 8004648:	d103      	bne.n	8004652 <__sfputc_r+0x1e>
 800464a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800464e:	f000 bbcf 	b.w	8004df0 <__swbuf_r>
 8004652:	6813      	ldr	r3, [r2, #0]
 8004654:	1c58      	adds	r0, r3, #1
 8004656:	6010      	str	r0, [r2, #0]
 8004658:	7019      	strb	r1, [r3, #0]
 800465a:	4608      	mov	r0, r1
 800465c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004660:	4770      	bx	lr

08004662 <__sfputs_r>:
 8004662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004664:	4606      	mov	r6, r0
 8004666:	460f      	mov	r7, r1
 8004668:	4614      	mov	r4, r2
 800466a:	18d5      	adds	r5, r2, r3
 800466c:	42ac      	cmp	r4, r5
 800466e:	d101      	bne.n	8004674 <__sfputs_r+0x12>
 8004670:	2000      	movs	r0, #0
 8004672:	e007      	b.n	8004684 <__sfputs_r+0x22>
 8004674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004678:	463a      	mov	r2, r7
 800467a:	4630      	mov	r0, r6
 800467c:	f7ff ffda 	bl	8004634 <__sfputc_r>
 8004680:	1c43      	adds	r3, r0, #1
 8004682:	d1f3      	bne.n	800466c <__sfputs_r+0xa>
 8004684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004688 <_vfiprintf_r>:
 8004688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468c:	460d      	mov	r5, r1
 800468e:	b09d      	sub	sp, #116	@ 0x74
 8004690:	4614      	mov	r4, r2
 8004692:	4698      	mov	r8, r3
 8004694:	4606      	mov	r6, r0
 8004696:	b118      	cbz	r0, 80046a0 <_vfiprintf_r+0x18>
 8004698:	6a03      	ldr	r3, [r0, #32]
 800469a:	b90b      	cbnz	r3, 80046a0 <_vfiprintf_r+0x18>
 800469c:	f7ff fd06 	bl	80040ac <__sinit>
 80046a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046a2:	07d9      	lsls	r1, r3, #31
 80046a4:	d405      	bmi.n	80046b2 <_vfiprintf_r+0x2a>
 80046a6:	89ab      	ldrh	r3, [r5, #12]
 80046a8:	059a      	lsls	r2, r3, #22
 80046aa:	d402      	bmi.n	80046b2 <_vfiprintf_r+0x2a>
 80046ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046ae:	f7ff febe 	bl	800442e <__retarget_lock_acquire_recursive>
 80046b2:	89ab      	ldrh	r3, [r5, #12]
 80046b4:	071b      	lsls	r3, r3, #28
 80046b6:	d501      	bpl.n	80046bc <_vfiprintf_r+0x34>
 80046b8:	692b      	ldr	r3, [r5, #16]
 80046ba:	b99b      	cbnz	r3, 80046e4 <_vfiprintf_r+0x5c>
 80046bc:	4629      	mov	r1, r5
 80046be:	4630      	mov	r0, r6
 80046c0:	f000 fbd4 	bl	8004e6c <__swsetup_r>
 80046c4:	b170      	cbz	r0, 80046e4 <_vfiprintf_r+0x5c>
 80046c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046c8:	07dc      	lsls	r4, r3, #31
 80046ca:	d504      	bpl.n	80046d6 <_vfiprintf_r+0x4e>
 80046cc:	f04f 30ff 	mov.w	r0, #4294967295
 80046d0:	b01d      	add	sp, #116	@ 0x74
 80046d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d6:	89ab      	ldrh	r3, [r5, #12]
 80046d8:	0598      	lsls	r0, r3, #22
 80046da:	d4f7      	bmi.n	80046cc <_vfiprintf_r+0x44>
 80046dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046de:	f7ff fea7 	bl	8004430 <__retarget_lock_release_recursive>
 80046e2:	e7f3      	b.n	80046cc <_vfiprintf_r+0x44>
 80046e4:	2300      	movs	r3, #0
 80046e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80046e8:	2320      	movs	r3, #32
 80046ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80046f2:	2330      	movs	r3, #48	@ 0x30
 80046f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80048a4 <_vfiprintf_r+0x21c>
 80046f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046fc:	f04f 0901 	mov.w	r9, #1
 8004700:	4623      	mov	r3, r4
 8004702:	469a      	mov	sl, r3
 8004704:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004708:	b10a      	cbz	r2, 800470e <_vfiprintf_r+0x86>
 800470a:	2a25      	cmp	r2, #37	@ 0x25
 800470c:	d1f9      	bne.n	8004702 <_vfiprintf_r+0x7a>
 800470e:	ebba 0b04 	subs.w	fp, sl, r4
 8004712:	d00b      	beq.n	800472c <_vfiprintf_r+0xa4>
 8004714:	465b      	mov	r3, fp
 8004716:	4622      	mov	r2, r4
 8004718:	4629      	mov	r1, r5
 800471a:	4630      	mov	r0, r6
 800471c:	f7ff ffa1 	bl	8004662 <__sfputs_r>
 8004720:	3001      	adds	r0, #1
 8004722:	f000 80a7 	beq.w	8004874 <_vfiprintf_r+0x1ec>
 8004726:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004728:	445a      	add	r2, fp
 800472a:	9209      	str	r2, [sp, #36]	@ 0x24
 800472c:	f89a 3000 	ldrb.w	r3, [sl]
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 809f 	beq.w	8004874 <_vfiprintf_r+0x1ec>
 8004736:	2300      	movs	r3, #0
 8004738:	f04f 32ff 	mov.w	r2, #4294967295
 800473c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004740:	f10a 0a01 	add.w	sl, sl, #1
 8004744:	9304      	str	r3, [sp, #16]
 8004746:	9307      	str	r3, [sp, #28]
 8004748:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800474c:	931a      	str	r3, [sp, #104]	@ 0x68
 800474e:	4654      	mov	r4, sl
 8004750:	2205      	movs	r2, #5
 8004752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004756:	4853      	ldr	r0, [pc, #332]	@ (80048a4 <_vfiprintf_r+0x21c>)
 8004758:	f7fb fd62 	bl	8000220 <memchr>
 800475c:	9a04      	ldr	r2, [sp, #16]
 800475e:	b9d8      	cbnz	r0, 8004798 <_vfiprintf_r+0x110>
 8004760:	06d1      	lsls	r1, r2, #27
 8004762:	bf44      	itt	mi
 8004764:	2320      	movmi	r3, #32
 8004766:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800476a:	0713      	lsls	r3, r2, #28
 800476c:	bf44      	itt	mi
 800476e:	232b      	movmi	r3, #43	@ 0x2b
 8004770:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004774:	f89a 3000 	ldrb.w	r3, [sl]
 8004778:	2b2a      	cmp	r3, #42	@ 0x2a
 800477a:	d015      	beq.n	80047a8 <_vfiprintf_r+0x120>
 800477c:	9a07      	ldr	r2, [sp, #28]
 800477e:	4654      	mov	r4, sl
 8004780:	2000      	movs	r0, #0
 8004782:	f04f 0c0a 	mov.w	ip, #10
 8004786:	4621      	mov	r1, r4
 8004788:	f811 3b01 	ldrb.w	r3, [r1], #1
 800478c:	3b30      	subs	r3, #48	@ 0x30
 800478e:	2b09      	cmp	r3, #9
 8004790:	d94b      	bls.n	800482a <_vfiprintf_r+0x1a2>
 8004792:	b1b0      	cbz	r0, 80047c2 <_vfiprintf_r+0x13a>
 8004794:	9207      	str	r2, [sp, #28]
 8004796:	e014      	b.n	80047c2 <_vfiprintf_r+0x13a>
 8004798:	eba0 0308 	sub.w	r3, r0, r8
 800479c:	fa09 f303 	lsl.w	r3, r9, r3
 80047a0:	4313      	orrs	r3, r2
 80047a2:	9304      	str	r3, [sp, #16]
 80047a4:	46a2      	mov	sl, r4
 80047a6:	e7d2      	b.n	800474e <_vfiprintf_r+0xc6>
 80047a8:	9b03      	ldr	r3, [sp, #12]
 80047aa:	1d19      	adds	r1, r3, #4
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	9103      	str	r1, [sp, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bfbb      	ittet	lt
 80047b4:	425b      	neglt	r3, r3
 80047b6:	f042 0202 	orrlt.w	r2, r2, #2
 80047ba:	9307      	strge	r3, [sp, #28]
 80047bc:	9307      	strlt	r3, [sp, #28]
 80047be:	bfb8      	it	lt
 80047c0:	9204      	strlt	r2, [sp, #16]
 80047c2:	7823      	ldrb	r3, [r4, #0]
 80047c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80047c6:	d10a      	bne.n	80047de <_vfiprintf_r+0x156>
 80047c8:	7863      	ldrb	r3, [r4, #1]
 80047ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80047cc:	d132      	bne.n	8004834 <_vfiprintf_r+0x1ac>
 80047ce:	9b03      	ldr	r3, [sp, #12]
 80047d0:	1d1a      	adds	r2, r3, #4
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	9203      	str	r2, [sp, #12]
 80047d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047da:	3402      	adds	r4, #2
 80047dc:	9305      	str	r3, [sp, #20]
 80047de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80048b4 <_vfiprintf_r+0x22c>
 80047e2:	7821      	ldrb	r1, [r4, #0]
 80047e4:	2203      	movs	r2, #3
 80047e6:	4650      	mov	r0, sl
 80047e8:	f7fb fd1a 	bl	8000220 <memchr>
 80047ec:	b138      	cbz	r0, 80047fe <_vfiprintf_r+0x176>
 80047ee:	9b04      	ldr	r3, [sp, #16]
 80047f0:	eba0 000a 	sub.w	r0, r0, sl
 80047f4:	2240      	movs	r2, #64	@ 0x40
 80047f6:	4082      	lsls	r2, r0
 80047f8:	4313      	orrs	r3, r2
 80047fa:	3401      	adds	r4, #1
 80047fc:	9304      	str	r3, [sp, #16]
 80047fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004802:	4829      	ldr	r0, [pc, #164]	@ (80048a8 <_vfiprintf_r+0x220>)
 8004804:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004808:	2206      	movs	r2, #6
 800480a:	f7fb fd09 	bl	8000220 <memchr>
 800480e:	2800      	cmp	r0, #0
 8004810:	d03f      	beq.n	8004892 <_vfiprintf_r+0x20a>
 8004812:	4b26      	ldr	r3, [pc, #152]	@ (80048ac <_vfiprintf_r+0x224>)
 8004814:	bb1b      	cbnz	r3, 800485e <_vfiprintf_r+0x1d6>
 8004816:	9b03      	ldr	r3, [sp, #12]
 8004818:	3307      	adds	r3, #7
 800481a:	f023 0307 	bic.w	r3, r3, #7
 800481e:	3308      	adds	r3, #8
 8004820:	9303      	str	r3, [sp, #12]
 8004822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004824:	443b      	add	r3, r7
 8004826:	9309      	str	r3, [sp, #36]	@ 0x24
 8004828:	e76a      	b.n	8004700 <_vfiprintf_r+0x78>
 800482a:	fb0c 3202 	mla	r2, ip, r2, r3
 800482e:	460c      	mov	r4, r1
 8004830:	2001      	movs	r0, #1
 8004832:	e7a8      	b.n	8004786 <_vfiprintf_r+0xfe>
 8004834:	2300      	movs	r3, #0
 8004836:	3401      	adds	r4, #1
 8004838:	9305      	str	r3, [sp, #20]
 800483a:	4619      	mov	r1, r3
 800483c:	f04f 0c0a 	mov.w	ip, #10
 8004840:	4620      	mov	r0, r4
 8004842:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004846:	3a30      	subs	r2, #48	@ 0x30
 8004848:	2a09      	cmp	r2, #9
 800484a:	d903      	bls.n	8004854 <_vfiprintf_r+0x1cc>
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0c6      	beq.n	80047de <_vfiprintf_r+0x156>
 8004850:	9105      	str	r1, [sp, #20]
 8004852:	e7c4      	b.n	80047de <_vfiprintf_r+0x156>
 8004854:	fb0c 2101 	mla	r1, ip, r1, r2
 8004858:	4604      	mov	r4, r0
 800485a:	2301      	movs	r3, #1
 800485c:	e7f0      	b.n	8004840 <_vfiprintf_r+0x1b8>
 800485e:	ab03      	add	r3, sp, #12
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	462a      	mov	r2, r5
 8004864:	4b12      	ldr	r3, [pc, #72]	@ (80048b0 <_vfiprintf_r+0x228>)
 8004866:	a904      	add	r1, sp, #16
 8004868:	4630      	mov	r0, r6
 800486a:	f3af 8000 	nop.w
 800486e:	4607      	mov	r7, r0
 8004870:	1c78      	adds	r0, r7, #1
 8004872:	d1d6      	bne.n	8004822 <_vfiprintf_r+0x19a>
 8004874:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004876:	07d9      	lsls	r1, r3, #31
 8004878:	d405      	bmi.n	8004886 <_vfiprintf_r+0x1fe>
 800487a:	89ab      	ldrh	r3, [r5, #12]
 800487c:	059a      	lsls	r2, r3, #22
 800487e:	d402      	bmi.n	8004886 <_vfiprintf_r+0x1fe>
 8004880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004882:	f7ff fdd5 	bl	8004430 <__retarget_lock_release_recursive>
 8004886:	89ab      	ldrh	r3, [r5, #12]
 8004888:	065b      	lsls	r3, r3, #25
 800488a:	f53f af1f 	bmi.w	80046cc <_vfiprintf_r+0x44>
 800488e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004890:	e71e      	b.n	80046d0 <_vfiprintf_r+0x48>
 8004892:	ab03      	add	r3, sp, #12
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	462a      	mov	r2, r5
 8004898:	4b05      	ldr	r3, [pc, #20]	@ (80048b0 <_vfiprintf_r+0x228>)
 800489a:	a904      	add	r1, sp, #16
 800489c:	4630      	mov	r0, r6
 800489e:	f000 f879 	bl	8004994 <_printf_i>
 80048a2:	e7e4      	b.n	800486e <_vfiprintf_r+0x1e6>
 80048a4:	08004fdc 	.word	0x08004fdc
 80048a8:	08004fe6 	.word	0x08004fe6
 80048ac:	00000000 	.word	0x00000000
 80048b0:	08004663 	.word	0x08004663
 80048b4:	08004fe2 	.word	0x08004fe2

080048b8 <_printf_common>:
 80048b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048bc:	4616      	mov	r6, r2
 80048be:	4698      	mov	r8, r3
 80048c0:	688a      	ldr	r2, [r1, #8]
 80048c2:	690b      	ldr	r3, [r1, #16]
 80048c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048c8:	4293      	cmp	r3, r2
 80048ca:	bfb8      	it	lt
 80048cc:	4613      	movlt	r3, r2
 80048ce:	6033      	str	r3, [r6, #0]
 80048d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048d4:	4607      	mov	r7, r0
 80048d6:	460c      	mov	r4, r1
 80048d8:	b10a      	cbz	r2, 80048de <_printf_common+0x26>
 80048da:	3301      	adds	r3, #1
 80048dc:	6033      	str	r3, [r6, #0]
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	0699      	lsls	r1, r3, #26
 80048e2:	bf42      	ittt	mi
 80048e4:	6833      	ldrmi	r3, [r6, #0]
 80048e6:	3302      	addmi	r3, #2
 80048e8:	6033      	strmi	r3, [r6, #0]
 80048ea:	6825      	ldr	r5, [r4, #0]
 80048ec:	f015 0506 	ands.w	r5, r5, #6
 80048f0:	d106      	bne.n	8004900 <_printf_common+0x48>
 80048f2:	f104 0a19 	add.w	sl, r4, #25
 80048f6:	68e3      	ldr	r3, [r4, #12]
 80048f8:	6832      	ldr	r2, [r6, #0]
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	42ab      	cmp	r3, r5
 80048fe:	dc26      	bgt.n	800494e <_printf_common+0x96>
 8004900:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004904:	6822      	ldr	r2, [r4, #0]
 8004906:	3b00      	subs	r3, #0
 8004908:	bf18      	it	ne
 800490a:	2301      	movne	r3, #1
 800490c:	0692      	lsls	r2, r2, #26
 800490e:	d42b      	bmi.n	8004968 <_printf_common+0xb0>
 8004910:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004914:	4641      	mov	r1, r8
 8004916:	4638      	mov	r0, r7
 8004918:	47c8      	blx	r9
 800491a:	3001      	adds	r0, #1
 800491c:	d01e      	beq.n	800495c <_printf_common+0xa4>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	6922      	ldr	r2, [r4, #16]
 8004922:	f003 0306 	and.w	r3, r3, #6
 8004926:	2b04      	cmp	r3, #4
 8004928:	bf02      	ittt	eq
 800492a:	68e5      	ldreq	r5, [r4, #12]
 800492c:	6833      	ldreq	r3, [r6, #0]
 800492e:	1aed      	subeq	r5, r5, r3
 8004930:	68a3      	ldr	r3, [r4, #8]
 8004932:	bf0c      	ite	eq
 8004934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004938:	2500      	movne	r5, #0
 800493a:	4293      	cmp	r3, r2
 800493c:	bfc4      	itt	gt
 800493e:	1a9b      	subgt	r3, r3, r2
 8004940:	18ed      	addgt	r5, r5, r3
 8004942:	2600      	movs	r6, #0
 8004944:	341a      	adds	r4, #26
 8004946:	42b5      	cmp	r5, r6
 8004948:	d11a      	bne.n	8004980 <_printf_common+0xc8>
 800494a:	2000      	movs	r0, #0
 800494c:	e008      	b.n	8004960 <_printf_common+0xa8>
 800494e:	2301      	movs	r3, #1
 8004950:	4652      	mov	r2, sl
 8004952:	4641      	mov	r1, r8
 8004954:	4638      	mov	r0, r7
 8004956:	47c8      	blx	r9
 8004958:	3001      	adds	r0, #1
 800495a:	d103      	bne.n	8004964 <_printf_common+0xac>
 800495c:	f04f 30ff 	mov.w	r0, #4294967295
 8004960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004964:	3501      	adds	r5, #1
 8004966:	e7c6      	b.n	80048f6 <_printf_common+0x3e>
 8004968:	18e1      	adds	r1, r4, r3
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	2030      	movs	r0, #48	@ 0x30
 800496e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004972:	4422      	add	r2, r4
 8004974:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004978:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800497c:	3302      	adds	r3, #2
 800497e:	e7c7      	b.n	8004910 <_printf_common+0x58>
 8004980:	2301      	movs	r3, #1
 8004982:	4622      	mov	r2, r4
 8004984:	4641      	mov	r1, r8
 8004986:	4638      	mov	r0, r7
 8004988:	47c8      	blx	r9
 800498a:	3001      	adds	r0, #1
 800498c:	d0e6      	beq.n	800495c <_printf_common+0xa4>
 800498e:	3601      	adds	r6, #1
 8004990:	e7d9      	b.n	8004946 <_printf_common+0x8e>
	...

08004994 <_printf_i>:
 8004994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004998:	7e0f      	ldrb	r7, [r1, #24]
 800499a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800499c:	2f78      	cmp	r7, #120	@ 0x78
 800499e:	4691      	mov	r9, r2
 80049a0:	4680      	mov	r8, r0
 80049a2:	460c      	mov	r4, r1
 80049a4:	469a      	mov	sl, r3
 80049a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049aa:	d807      	bhi.n	80049bc <_printf_i+0x28>
 80049ac:	2f62      	cmp	r7, #98	@ 0x62
 80049ae:	d80a      	bhi.n	80049c6 <_printf_i+0x32>
 80049b0:	2f00      	cmp	r7, #0
 80049b2:	f000 80d2 	beq.w	8004b5a <_printf_i+0x1c6>
 80049b6:	2f58      	cmp	r7, #88	@ 0x58
 80049b8:	f000 80b9 	beq.w	8004b2e <_printf_i+0x19a>
 80049bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049c4:	e03a      	b.n	8004a3c <_printf_i+0xa8>
 80049c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049ca:	2b15      	cmp	r3, #21
 80049cc:	d8f6      	bhi.n	80049bc <_printf_i+0x28>
 80049ce:	a101      	add	r1, pc, #4	@ (adr r1, 80049d4 <_printf_i+0x40>)
 80049d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049d4:	08004a2d 	.word	0x08004a2d
 80049d8:	08004a41 	.word	0x08004a41
 80049dc:	080049bd 	.word	0x080049bd
 80049e0:	080049bd 	.word	0x080049bd
 80049e4:	080049bd 	.word	0x080049bd
 80049e8:	080049bd 	.word	0x080049bd
 80049ec:	08004a41 	.word	0x08004a41
 80049f0:	080049bd 	.word	0x080049bd
 80049f4:	080049bd 	.word	0x080049bd
 80049f8:	080049bd 	.word	0x080049bd
 80049fc:	080049bd 	.word	0x080049bd
 8004a00:	08004b41 	.word	0x08004b41
 8004a04:	08004a6b 	.word	0x08004a6b
 8004a08:	08004afb 	.word	0x08004afb
 8004a0c:	080049bd 	.word	0x080049bd
 8004a10:	080049bd 	.word	0x080049bd
 8004a14:	08004b63 	.word	0x08004b63
 8004a18:	080049bd 	.word	0x080049bd
 8004a1c:	08004a6b 	.word	0x08004a6b
 8004a20:	080049bd 	.word	0x080049bd
 8004a24:	080049bd 	.word	0x080049bd
 8004a28:	08004b03 	.word	0x08004b03
 8004a2c:	6833      	ldr	r3, [r6, #0]
 8004a2e:	1d1a      	adds	r2, r3, #4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6032      	str	r2, [r6, #0]
 8004a34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e09d      	b.n	8004b7c <_printf_i+0x1e8>
 8004a40:	6833      	ldr	r3, [r6, #0]
 8004a42:	6820      	ldr	r0, [r4, #0]
 8004a44:	1d19      	adds	r1, r3, #4
 8004a46:	6031      	str	r1, [r6, #0]
 8004a48:	0606      	lsls	r6, r0, #24
 8004a4a:	d501      	bpl.n	8004a50 <_printf_i+0xbc>
 8004a4c:	681d      	ldr	r5, [r3, #0]
 8004a4e:	e003      	b.n	8004a58 <_printf_i+0xc4>
 8004a50:	0645      	lsls	r5, r0, #25
 8004a52:	d5fb      	bpl.n	8004a4c <_printf_i+0xb8>
 8004a54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a58:	2d00      	cmp	r5, #0
 8004a5a:	da03      	bge.n	8004a64 <_printf_i+0xd0>
 8004a5c:	232d      	movs	r3, #45	@ 0x2d
 8004a5e:	426d      	negs	r5, r5
 8004a60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a64:	4859      	ldr	r0, [pc, #356]	@ (8004bcc <_printf_i+0x238>)
 8004a66:	230a      	movs	r3, #10
 8004a68:	e011      	b.n	8004a8e <_printf_i+0xfa>
 8004a6a:	6821      	ldr	r1, [r4, #0]
 8004a6c:	6833      	ldr	r3, [r6, #0]
 8004a6e:	0608      	lsls	r0, r1, #24
 8004a70:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a74:	d402      	bmi.n	8004a7c <_printf_i+0xe8>
 8004a76:	0649      	lsls	r1, r1, #25
 8004a78:	bf48      	it	mi
 8004a7a:	b2ad      	uxthmi	r5, r5
 8004a7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a7e:	4853      	ldr	r0, [pc, #332]	@ (8004bcc <_printf_i+0x238>)
 8004a80:	6033      	str	r3, [r6, #0]
 8004a82:	bf14      	ite	ne
 8004a84:	230a      	movne	r3, #10
 8004a86:	2308      	moveq	r3, #8
 8004a88:	2100      	movs	r1, #0
 8004a8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a8e:	6866      	ldr	r6, [r4, #4]
 8004a90:	60a6      	str	r6, [r4, #8]
 8004a92:	2e00      	cmp	r6, #0
 8004a94:	bfa2      	ittt	ge
 8004a96:	6821      	ldrge	r1, [r4, #0]
 8004a98:	f021 0104 	bicge.w	r1, r1, #4
 8004a9c:	6021      	strge	r1, [r4, #0]
 8004a9e:	b90d      	cbnz	r5, 8004aa4 <_printf_i+0x110>
 8004aa0:	2e00      	cmp	r6, #0
 8004aa2:	d04b      	beq.n	8004b3c <_printf_i+0x1a8>
 8004aa4:	4616      	mov	r6, r2
 8004aa6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004aaa:	fb03 5711 	mls	r7, r3, r1, r5
 8004aae:	5dc7      	ldrb	r7, [r0, r7]
 8004ab0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ab4:	462f      	mov	r7, r5
 8004ab6:	42bb      	cmp	r3, r7
 8004ab8:	460d      	mov	r5, r1
 8004aba:	d9f4      	bls.n	8004aa6 <_printf_i+0x112>
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d10b      	bne.n	8004ad8 <_printf_i+0x144>
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	07df      	lsls	r7, r3, #31
 8004ac4:	d508      	bpl.n	8004ad8 <_printf_i+0x144>
 8004ac6:	6923      	ldr	r3, [r4, #16]
 8004ac8:	6861      	ldr	r1, [r4, #4]
 8004aca:	4299      	cmp	r1, r3
 8004acc:	bfde      	ittt	le
 8004ace:	2330      	movle	r3, #48	@ 0x30
 8004ad0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ad4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ad8:	1b92      	subs	r2, r2, r6
 8004ada:	6122      	str	r2, [r4, #16]
 8004adc:	f8cd a000 	str.w	sl, [sp]
 8004ae0:	464b      	mov	r3, r9
 8004ae2:	aa03      	add	r2, sp, #12
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	4640      	mov	r0, r8
 8004ae8:	f7ff fee6 	bl	80048b8 <_printf_common>
 8004aec:	3001      	adds	r0, #1
 8004aee:	d14a      	bne.n	8004b86 <_printf_i+0x1f2>
 8004af0:	f04f 30ff 	mov.w	r0, #4294967295
 8004af4:	b004      	add	sp, #16
 8004af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	f043 0320 	orr.w	r3, r3, #32
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	4833      	ldr	r0, [pc, #204]	@ (8004bd0 <_printf_i+0x23c>)
 8004b04:	2778      	movs	r7, #120	@ 0x78
 8004b06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	6831      	ldr	r1, [r6, #0]
 8004b0e:	061f      	lsls	r7, r3, #24
 8004b10:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b14:	d402      	bmi.n	8004b1c <_printf_i+0x188>
 8004b16:	065f      	lsls	r7, r3, #25
 8004b18:	bf48      	it	mi
 8004b1a:	b2ad      	uxthmi	r5, r5
 8004b1c:	6031      	str	r1, [r6, #0]
 8004b1e:	07d9      	lsls	r1, r3, #31
 8004b20:	bf44      	itt	mi
 8004b22:	f043 0320 	orrmi.w	r3, r3, #32
 8004b26:	6023      	strmi	r3, [r4, #0]
 8004b28:	b11d      	cbz	r5, 8004b32 <_printf_i+0x19e>
 8004b2a:	2310      	movs	r3, #16
 8004b2c:	e7ac      	b.n	8004a88 <_printf_i+0xf4>
 8004b2e:	4827      	ldr	r0, [pc, #156]	@ (8004bcc <_printf_i+0x238>)
 8004b30:	e7e9      	b.n	8004b06 <_printf_i+0x172>
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	f023 0320 	bic.w	r3, r3, #32
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	e7f6      	b.n	8004b2a <_printf_i+0x196>
 8004b3c:	4616      	mov	r6, r2
 8004b3e:	e7bd      	b.n	8004abc <_printf_i+0x128>
 8004b40:	6833      	ldr	r3, [r6, #0]
 8004b42:	6825      	ldr	r5, [r4, #0]
 8004b44:	6961      	ldr	r1, [r4, #20]
 8004b46:	1d18      	adds	r0, r3, #4
 8004b48:	6030      	str	r0, [r6, #0]
 8004b4a:	062e      	lsls	r6, r5, #24
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	d501      	bpl.n	8004b54 <_printf_i+0x1c0>
 8004b50:	6019      	str	r1, [r3, #0]
 8004b52:	e002      	b.n	8004b5a <_printf_i+0x1c6>
 8004b54:	0668      	lsls	r0, r5, #25
 8004b56:	d5fb      	bpl.n	8004b50 <_printf_i+0x1bc>
 8004b58:	8019      	strh	r1, [r3, #0]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	6123      	str	r3, [r4, #16]
 8004b5e:	4616      	mov	r6, r2
 8004b60:	e7bc      	b.n	8004adc <_printf_i+0x148>
 8004b62:	6833      	ldr	r3, [r6, #0]
 8004b64:	1d1a      	adds	r2, r3, #4
 8004b66:	6032      	str	r2, [r6, #0]
 8004b68:	681e      	ldr	r6, [r3, #0]
 8004b6a:	6862      	ldr	r2, [r4, #4]
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	4630      	mov	r0, r6
 8004b70:	f7fb fb56 	bl	8000220 <memchr>
 8004b74:	b108      	cbz	r0, 8004b7a <_printf_i+0x1e6>
 8004b76:	1b80      	subs	r0, r0, r6
 8004b78:	6060      	str	r0, [r4, #4]
 8004b7a:	6863      	ldr	r3, [r4, #4]
 8004b7c:	6123      	str	r3, [r4, #16]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b84:	e7aa      	b.n	8004adc <_printf_i+0x148>
 8004b86:	6923      	ldr	r3, [r4, #16]
 8004b88:	4632      	mov	r2, r6
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	4640      	mov	r0, r8
 8004b8e:	47d0      	blx	sl
 8004b90:	3001      	adds	r0, #1
 8004b92:	d0ad      	beq.n	8004af0 <_printf_i+0x15c>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	079b      	lsls	r3, r3, #30
 8004b98:	d413      	bmi.n	8004bc2 <_printf_i+0x22e>
 8004b9a:	68e0      	ldr	r0, [r4, #12]
 8004b9c:	9b03      	ldr	r3, [sp, #12]
 8004b9e:	4298      	cmp	r0, r3
 8004ba0:	bfb8      	it	lt
 8004ba2:	4618      	movlt	r0, r3
 8004ba4:	e7a6      	b.n	8004af4 <_printf_i+0x160>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	4632      	mov	r2, r6
 8004baa:	4649      	mov	r1, r9
 8004bac:	4640      	mov	r0, r8
 8004bae:	47d0      	blx	sl
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	d09d      	beq.n	8004af0 <_printf_i+0x15c>
 8004bb4:	3501      	adds	r5, #1
 8004bb6:	68e3      	ldr	r3, [r4, #12]
 8004bb8:	9903      	ldr	r1, [sp, #12]
 8004bba:	1a5b      	subs	r3, r3, r1
 8004bbc:	42ab      	cmp	r3, r5
 8004bbe:	dcf2      	bgt.n	8004ba6 <_printf_i+0x212>
 8004bc0:	e7eb      	b.n	8004b9a <_printf_i+0x206>
 8004bc2:	2500      	movs	r5, #0
 8004bc4:	f104 0619 	add.w	r6, r4, #25
 8004bc8:	e7f5      	b.n	8004bb6 <_printf_i+0x222>
 8004bca:	bf00      	nop
 8004bcc:	08004fed 	.word	0x08004fed
 8004bd0:	08004ffe 	.word	0x08004ffe

08004bd4 <__sflush_r>:
 8004bd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bdc:	0716      	lsls	r6, r2, #28
 8004bde:	4605      	mov	r5, r0
 8004be0:	460c      	mov	r4, r1
 8004be2:	d454      	bmi.n	8004c8e <__sflush_r+0xba>
 8004be4:	684b      	ldr	r3, [r1, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	dc02      	bgt.n	8004bf0 <__sflush_r+0x1c>
 8004bea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	dd48      	ble.n	8004c82 <__sflush_r+0xae>
 8004bf0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004bf2:	2e00      	cmp	r6, #0
 8004bf4:	d045      	beq.n	8004c82 <__sflush_r+0xae>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004bfc:	682f      	ldr	r7, [r5, #0]
 8004bfe:	6a21      	ldr	r1, [r4, #32]
 8004c00:	602b      	str	r3, [r5, #0]
 8004c02:	d030      	beq.n	8004c66 <__sflush_r+0x92>
 8004c04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c06:	89a3      	ldrh	r3, [r4, #12]
 8004c08:	0759      	lsls	r1, r3, #29
 8004c0a:	d505      	bpl.n	8004c18 <__sflush_r+0x44>
 8004c0c:	6863      	ldr	r3, [r4, #4]
 8004c0e:	1ad2      	subs	r2, r2, r3
 8004c10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c12:	b10b      	cbz	r3, 8004c18 <__sflush_r+0x44>
 8004c14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c16:	1ad2      	subs	r2, r2, r3
 8004c18:	2300      	movs	r3, #0
 8004c1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c1c:	6a21      	ldr	r1, [r4, #32]
 8004c1e:	4628      	mov	r0, r5
 8004c20:	47b0      	blx	r6
 8004c22:	1c43      	adds	r3, r0, #1
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	d106      	bne.n	8004c36 <__sflush_r+0x62>
 8004c28:	6829      	ldr	r1, [r5, #0]
 8004c2a:	291d      	cmp	r1, #29
 8004c2c:	d82b      	bhi.n	8004c86 <__sflush_r+0xb2>
 8004c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8004cd8 <__sflush_r+0x104>)
 8004c30:	410a      	asrs	r2, r1
 8004c32:	07d6      	lsls	r6, r2, #31
 8004c34:	d427      	bmi.n	8004c86 <__sflush_r+0xb2>
 8004c36:	2200      	movs	r2, #0
 8004c38:	6062      	str	r2, [r4, #4]
 8004c3a:	04d9      	lsls	r1, r3, #19
 8004c3c:	6922      	ldr	r2, [r4, #16]
 8004c3e:	6022      	str	r2, [r4, #0]
 8004c40:	d504      	bpl.n	8004c4c <__sflush_r+0x78>
 8004c42:	1c42      	adds	r2, r0, #1
 8004c44:	d101      	bne.n	8004c4a <__sflush_r+0x76>
 8004c46:	682b      	ldr	r3, [r5, #0]
 8004c48:	b903      	cbnz	r3, 8004c4c <__sflush_r+0x78>
 8004c4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c4e:	602f      	str	r7, [r5, #0]
 8004c50:	b1b9      	cbz	r1, 8004c82 <__sflush_r+0xae>
 8004c52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c56:	4299      	cmp	r1, r3
 8004c58:	d002      	beq.n	8004c60 <__sflush_r+0x8c>
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	f7ff fbea 	bl	8004434 <_free_r>
 8004c60:	2300      	movs	r3, #0
 8004c62:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c64:	e00d      	b.n	8004c82 <__sflush_r+0xae>
 8004c66:	2301      	movs	r3, #1
 8004c68:	4628      	mov	r0, r5
 8004c6a:	47b0      	blx	r6
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	1c50      	adds	r0, r2, #1
 8004c70:	d1c9      	bne.n	8004c06 <__sflush_r+0x32>
 8004c72:	682b      	ldr	r3, [r5, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0c6      	beq.n	8004c06 <__sflush_r+0x32>
 8004c78:	2b1d      	cmp	r3, #29
 8004c7a:	d001      	beq.n	8004c80 <__sflush_r+0xac>
 8004c7c:	2b16      	cmp	r3, #22
 8004c7e:	d11e      	bne.n	8004cbe <__sflush_r+0xea>
 8004c80:	602f      	str	r7, [r5, #0]
 8004c82:	2000      	movs	r0, #0
 8004c84:	e022      	b.n	8004ccc <__sflush_r+0xf8>
 8004c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c8a:	b21b      	sxth	r3, r3
 8004c8c:	e01b      	b.n	8004cc6 <__sflush_r+0xf2>
 8004c8e:	690f      	ldr	r7, [r1, #16]
 8004c90:	2f00      	cmp	r7, #0
 8004c92:	d0f6      	beq.n	8004c82 <__sflush_r+0xae>
 8004c94:	0793      	lsls	r3, r2, #30
 8004c96:	680e      	ldr	r6, [r1, #0]
 8004c98:	bf08      	it	eq
 8004c9a:	694b      	ldreq	r3, [r1, #20]
 8004c9c:	600f      	str	r7, [r1, #0]
 8004c9e:	bf18      	it	ne
 8004ca0:	2300      	movne	r3, #0
 8004ca2:	eba6 0807 	sub.w	r8, r6, r7
 8004ca6:	608b      	str	r3, [r1, #8]
 8004ca8:	f1b8 0f00 	cmp.w	r8, #0
 8004cac:	dde9      	ble.n	8004c82 <__sflush_r+0xae>
 8004cae:	6a21      	ldr	r1, [r4, #32]
 8004cb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004cb2:	4643      	mov	r3, r8
 8004cb4:	463a      	mov	r2, r7
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	47b0      	blx	r6
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	dc08      	bgt.n	8004cd0 <__sflush_r+0xfc>
 8004cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cc6:	81a3      	strh	r3, [r4, #12]
 8004cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cd0:	4407      	add	r7, r0
 8004cd2:	eba8 0800 	sub.w	r8, r8, r0
 8004cd6:	e7e7      	b.n	8004ca8 <__sflush_r+0xd4>
 8004cd8:	dfbffffe 	.word	0xdfbffffe

08004cdc <_fflush_r>:
 8004cdc:	b538      	push	{r3, r4, r5, lr}
 8004cde:	690b      	ldr	r3, [r1, #16]
 8004ce0:	4605      	mov	r5, r0
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	b913      	cbnz	r3, 8004cec <_fflush_r+0x10>
 8004ce6:	2500      	movs	r5, #0
 8004ce8:	4628      	mov	r0, r5
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
 8004cec:	b118      	cbz	r0, 8004cf6 <_fflush_r+0x1a>
 8004cee:	6a03      	ldr	r3, [r0, #32]
 8004cf0:	b90b      	cbnz	r3, 8004cf6 <_fflush_r+0x1a>
 8004cf2:	f7ff f9db 	bl	80040ac <__sinit>
 8004cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f3      	beq.n	8004ce6 <_fflush_r+0xa>
 8004cfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d00:	07d0      	lsls	r0, r2, #31
 8004d02:	d404      	bmi.n	8004d0e <_fflush_r+0x32>
 8004d04:	0599      	lsls	r1, r3, #22
 8004d06:	d402      	bmi.n	8004d0e <_fflush_r+0x32>
 8004d08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d0a:	f7ff fb90 	bl	800442e <__retarget_lock_acquire_recursive>
 8004d0e:	4628      	mov	r0, r5
 8004d10:	4621      	mov	r1, r4
 8004d12:	f7ff ff5f 	bl	8004bd4 <__sflush_r>
 8004d16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d18:	07da      	lsls	r2, r3, #31
 8004d1a:	4605      	mov	r5, r0
 8004d1c:	d4e4      	bmi.n	8004ce8 <_fflush_r+0xc>
 8004d1e:	89a3      	ldrh	r3, [r4, #12]
 8004d20:	059b      	lsls	r3, r3, #22
 8004d22:	d4e1      	bmi.n	8004ce8 <_fflush_r+0xc>
 8004d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d26:	f7ff fb83 	bl	8004430 <__retarget_lock_release_recursive>
 8004d2a:	e7dd      	b.n	8004ce8 <_fflush_r+0xc>

08004d2c <__swhatbuf_r>:
 8004d2c:	b570      	push	{r4, r5, r6, lr}
 8004d2e:	460c      	mov	r4, r1
 8004d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d34:	2900      	cmp	r1, #0
 8004d36:	b096      	sub	sp, #88	@ 0x58
 8004d38:	4615      	mov	r5, r2
 8004d3a:	461e      	mov	r6, r3
 8004d3c:	da0d      	bge.n	8004d5a <__swhatbuf_r+0x2e>
 8004d3e:	89a3      	ldrh	r3, [r4, #12]
 8004d40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d44:	f04f 0100 	mov.w	r1, #0
 8004d48:	bf14      	ite	ne
 8004d4a:	2340      	movne	r3, #64	@ 0x40
 8004d4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d50:	2000      	movs	r0, #0
 8004d52:	6031      	str	r1, [r6, #0]
 8004d54:	602b      	str	r3, [r5, #0]
 8004d56:	b016      	add	sp, #88	@ 0x58
 8004d58:	bd70      	pop	{r4, r5, r6, pc}
 8004d5a:	466a      	mov	r2, sp
 8004d5c:	f000 f8dc 	bl	8004f18 <_fstat_r>
 8004d60:	2800      	cmp	r0, #0
 8004d62:	dbec      	blt.n	8004d3e <__swhatbuf_r+0x12>
 8004d64:	9901      	ldr	r1, [sp, #4]
 8004d66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d6e:	4259      	negs	r1, r3
 8004d70:	4159      	adcs	r1, r3
 8004d72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d76:	e7eb      	b.n	8004d50 <__swhatbuf_r+0x24>

08004d78 <__smakebuf_r>:
 8004d78:	898b      	ldrh	r3, [r1, #12]
 8004d7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d7c:	079d      	lsls	r5, r3, #30
 8004d7e:	4606      	mov	r6, r0
 8004d80:	460c      	mov	r4, r1
 8004d82:	d507      	bpl.n	8004d94 <__smakebuf_r+0x1c>
 8004d84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	6123      	str	r3, [r4, #16]
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	6163      	str	r3, [r4, #20]
 8004d90:	b003      	add	sp, #12
 8004d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d94:	ab01      	add	r3, sp, #4
 8004d96:	466a      	mov	r2, sp
 8004d98:	f7ff ffc8 	bl	8004d2c <__swhatbuf_r>
 8004d9c:	9f00      	ldr	r7, [sp, #0]
 8004d9e:	4605      	mov	r5, r0
 8004da0:	4639      	mov	r1, r7
 8004da2:	4630      	mov	r0, r6
 8004da4:	f7ff fbba 	bl	800451c <_malloc_r>
 8004da8:	b948      	cbnz	r0, 8004dbe <__smakebuf_r+0x46>
 8004daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dae:	059a      	lsls	r2, r3, #22
 8004db0:	d4ee      	bmi.n	8004d90 <__smakebuf_r+0x18>
 8004db2:	f023 0303 	bic.w	r3, r3, #3
 8004db6:	f043 0302 	orr.w	r3, r3, #2
 8004dba:	81a3      	strh	r3, [r4, #12]
 8004dbc:	e7e2      	b.n	8004d84 <__smakebuf_r+0xc>
 8004dbe:	89a3      	ldrh	r3, [r4, #12]
 8004dc0:	6020      	str	r0, [r4, #0]
 8004dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dc6:	81a3      	strh	r3, [r4, #12]
 8004dc8:	9b01      	ldr	r3, [sp, #4]
 8004dca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004dce:	b15b      	cbz	r3, 8004de8 <__smakebuf_r+0x70>
 8004dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	f000 f8b1 	bl	8004f3c <_isatty_r>
 8004dda:	b128      	cbz	r0, 8004de8 <__smakebuf_r+0x70>
 8004ddc:	89a3      	ldrh	r3, [r4, #12]
 8004dde:	f023 0303 	bic.w	r3, r3, #3
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	81a3      	strh	r3, [r4, #12]
 8004de8:	89a3      	ldrh	r3, [r4, #12]
 8004dea:	431d      	orrs	r5, r3
 8004dec:	81a5      	strh	r5, [r4, #12]
 8004dee:	e7cf      	b.n	8004d90 <__smakebuf_r+0x18>

08004df0 <__swbuf_r>:
 8004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df2:	460e      	mov	r6, r1
 8004df4:	4614      	mov	r4, r2
 8004df6:	4605      	mov	r5, r0
 8004df8:	b118      	cbz	r0, 8004e02 <__swbuf_r+0x12>
 8004dfa:	6a03      	ldr	r3, [r0, #32]
 8004dfc:	b90b      	cbnz	r3, 8004e02 <__swbuf_r+0x12>
 8004dfe:	f7ff f955 	bl	80040ac <__sinit>
 8004e02:	69a3      	ldr	r3, [r4, #24]
 8004e04:	60a3      	str	r3, [r4, #8]
 8004e06:	89a3      	ldrh	r3, [r4, #12]
 8004e08:	071a      	lsls	r2, r3, #28
 8004e0a:	d501      	bpl.n	8004e10 <__swbuf_r+0x20>
 8004e0c:	6923      	ldr	r3, [r4, #16]
 8004e0e:	b943      	cbnz	r3, 8004e22 <__swbuf_r+0x32>
 8004e10:	4621      	mov	r1, r4
 8004e12:	4628      	mov	r0, r5
 8004e14:	f000 f82a 	bl	8004e6c <__swsetup_r>
 8004e18:	b118      	cbz	r0, 8004e22 <__swbuf_r+0x32>
 8004e1a:	f04f 37ff 	mov.w	r7, #4294967295
 8004e1e:	4638      	mov	r0, r7
 8004e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	6922      	ldr	r2, [r4, #16]
 8004e26:	1a98      	subs	r0, r3, r2
 8004e28:	6963      	ldr	r3, [r4, #20]
 8004e2a:	b2f6      	uxtb	r6, r6
 8004e2c:	4283      	cmp	r3, r0
 8004e2e:	4637      	mov	r7, r6
 8004e30:	dc05      	bgt.n	8004e3e <__swbuf_r+0x4e>
 8004e32:	4621      	mov	r1, r4
 8004e34:	4628      	mov	r0, r5
 8004e36:	f7ff ff51 	bl	8004cdc <_fflush_r>
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	d1ed      	bne.n	8004e1a <__swbuf_r+0x2a>
 8004e3e:	68a3      	ldr	r3, [r4, #8]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	60a3      	str	r3, [r4, #8]
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	6022      	str	r2, [r4, #0]
 8004e4a:	701e      	strb	r6, [r3, #0]
 8004e4c:	6962      	ldr	r2, [r4, #20]
 8004e4e:	1c43      	adds	r3, r0, #1
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d004      	beq.n	8004e5e <__swbuf_r+0x6e>
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	07db      	lsls	r3, r3, #31
 8004e58:	d5e1      	bpl.n	8004e1e <__swbuf_r+0x2e>
 8004e5a:	2e0a      	cmp	r6, #10
 8004e5c:	d1df      	bne.n	8004e1e <__swbuf_r+0x2e>
 8004e5e:	4621      	mov	r1, r4
 8004e60:	4628      	mov	r0, r5
 8004e62:	f7ff ff3b 	bl	8004cdc <_fflush_r>
 8004e66:	2800      	cmp	r0, #0
 8004e68:	d0d9      	beq.n	8004e1e <__swbuf_r+0x2e>
 8004e6a:	e7d6      	b.n	8004e1a <__swbuf_r+0x2a>

08004e6c <__swsetup_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	4b29      	ldr	r3, [pc, #164]	@ (8004f14 <__swsetup_r+0xa8>)
 8004e70:	4605      	mov	r5, r0
 8004e72:	6818      	ldr	r0, [r3, #0]
 8004e74:	460c      	mov	r4, r1
 8004e76:	b118      	cbz	r0, 8004e80 <__swsetup_r+0x14>
 8004e78:	6a03      	ldr	r3, [r0, #32]
 8004e7a:	b90b      	cbnz	r3, 8004e80 <__swsetup_r+0x14>
 8004e7c:	f7ff f916 	bl	80040ac <__sinit>
 8004e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e84:	0719      	lsls	r1, r3, #28
 8004e86:	d422      	bmi.n	8004ece <__swsetup_r+0x62>
 8004e88:	06da      	lsls	r2, r3, #27
 8004e8a:	d407      	bmi.n	8004e9c <__swsetup_r+0x30>
 8004e8c:	2209      	movs	r2, #9
 8004e8e:	602a      	str	r2, [r5, #0]
 8004e90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e94:	81a3      	strh	r3, [r4, #12]
 8004e96:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9a:	e033      	b.n	8004f04 <__swsetup_r+0x98>
 8004e9c:	0758      	lsls	r0, r3, #29
 8004e9e:	d512      	bpl.n	8004ec6 <__swsetup_r+0x5a>
 8004ea0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ea2:	b141      	cbz	r1, 8004eb6 <__swsetup_r+0x4a>
 8004ea4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ea8:	4299      	cmp	r1, r3
 8004eaa:	d002      	beq.n	8004eb2 <__swsetup_r+0x46>
 8004eac:	4628      	mov	r0, r5
 8004eae:	f7ff fac1 	bl	8004434 <_free_r>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004eb6:	89a3      	ldrh	r3, [r4, #12]
 8004eb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ebc:	81a3      	strh	r3, [r4, #12]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	6063      	str	r3, [r4, #4]
 8004ec2:	6923      	ldr	r3, [r4, #16]
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	89a3      	ldrh	r3, [r4, #12]
 8004ec8:	f043 0308 	orr.w	r3, r3, #8
 8004ecc:	81a3      	strh	r3, [r4, #12]
 8004ece:	6923      	ldr	r3, [r4, #16]
 8004ed0:	b94b      	cbnz	r3, 8004ee6 <__swsetup_r+0x7a>
 8004ed2:	89a3      	ldrh	r3, [r4, #12]
 8004ed4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004edc:	d003      	beq.n	8004ee6 <__swsetup_r+0x7a>
 8004ede:	4621      	mov	r1, r4
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	f7ff ff49 	bl	8004d78 <__smakebuf_r>
 8004ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eea:	f013 0201 	ands.w	r2, r3, #1
 8004eee:	d00a      	beq.n	8004f06 <__swsetup_r+0x9a>
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	60a2      	str	r2, [r4, #8]
 8004ef4:	6962      	ldr	r2, [r4, #20]
 8004ef6:	4252      	negs	r2, r2
 8004ef8:	61a2      	str	r2, [r4, #24]
 8004efa:	6922      	ldr	r2, [r4, #16]
 8004efc:	b942      	cbnz	r2, 8004f10 <__swsetup_r+0xa4>
 8004efe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f02:	d1c5      	bne.n	8004e90 <__swsetup_r+0x24>
 8004f04:	bd38      	pop	{r3, r4, r5, pc}
 8004f06:	0799      	lsls	r1, r3, #30
 8004f08:	bf58      	it	pl
 8004f0a:	6962      	ldrpl	r2, [r4, #20]
 8004f0c:	60a2      	str	r2, [r4, #8]
 8004f0e:	e7f4      	b.n	8004efa <__swsetup_r+0x8e>
 8004f10:	2000      	movs	r0, #0
 8004f12:	e7f7      	b.n	8004f04 <__swsetup_r+0x98>
 8004f14:	20000030 	.word	0x20000030

08004f18 <_fstat_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4d07      	ldr	r5, [pc, #28]	@ (8004f38 <_fstat_r+0x20>)
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4604      	mov	r4, r0
 8004f20:	4608      	mov	r0, r1
 8004f22:	4611      	mov	r1, r2
 8004f24:	602b      	str	r3, [r5, #0]
 8004f26:	f7fb ff6a 	bl	8000dfe <_fstat>
 8004f2a:	1c43      	adds	r3, r0, #1
 8004f2c:	d102      	bne.n	8004f34 <_fstat_r+0x1c>
 8004f2e:	682b      	ldr	r3, [r5, #0]
 8004f30:	b103      	cbz	r3, 8004f34 <_fstat_r+0x1c>
 8004f32:	6023      	str	r3, [r4, #0]
 8004f34:	bd38      	pop	{r3, r4, r5, pc}
 8004f36:	bf00      	nop
 8004f38:	20000420 	.word	0x20000420

08004f3c <_isatty_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	4d06      	ldr	r5, [pc, #24]	@ (8004f58 <_isatty_r+0x1c>)
 8004f40:	2300      	movs	r3, #0
 8004f42:	4604      	mov	r4, r0
 8004f44:	4608      	mov	r0, r1
 8004f46:	602b      	str	r3, [r5, #0]
 8004f48:	f7fb ff69 	bl	8000e1e <_isatty>
 8004f4c:	1c43      	adds	r3, r0, #1
 8004f4e:	d102      	bne.n	8004f56 <_isatty_r+0x1a>
 8004f50:	682b      	ldr	r3, [r5, #0]
 8004f52:	b103      	cbz	r3, 8004f56 <_isatty_r+0x1a>
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	bd38      	pop	{r3, r4, r5, pc}
 8004f58:	20000420 	.word	0x20000420

08004f5c <_sbrk_r>:
 8004f5c:	b538      	push	{r3, r4, r5, lr}
 8004f5e:	4d06      	ldr	r5, [pc, #24]	@ (8004f78 <_sbrk_r+0x1c>)
 8004f60:	2300      	movs	r3, #0
 8004f62:	4604      	mov	r4, r0
 8004f64:	4608      	mov	r0, r1
 8004f66:	602b      	str	r3, [r5, #0]
 8004f68:	f7fb ff72 	bl	8000e50 <_sbrk>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d102      	bne.n	8004f76 <_sbrk_r+0x1a>
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	b103      	cbz	r3, 8004f76 <_sbrk_r+0x1a>
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
 8004f78:	20000420 	.word	0x20000420

08004f7c <_init>:
 8004f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7e:	bf00      	nop
 8004f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f82:	bc08      	pop	{r3}
 8004f84:	469e      	mov	lr, r3
 8004f86:	4770      	bx	lr

08004f88 <_fini>:
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	bf00      	nop
 8004f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8e:	bc08      	pop	{r3}
 8004f90:	469e      	mov	lr, r3
 8004f92:	4770      	bx	lr
