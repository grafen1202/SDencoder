
SDencoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efd8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000990  0800f1b8  0800f1b8  000101b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb48  0800fb48  000111f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb48  0800fb48  00010b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb50  0800fb50  000111f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb50  0800fb50  00010b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fb54  0800fb54  00010b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800fb58  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b74  200001f0  0800fd48  000111f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002d64  0800fd48  00011d64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019eef  00000000  00000000  00011220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003687  00000000  00000000  0002b10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  0002e798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001221  00000000  00000000  0002fee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021650  00000000  00000000  00031101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e116  00000000  00000000  00052751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc151  00000000  00000000  00070867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c9b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077ac  00000000  00000000  0013c9fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  001441a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f1a0 	.word	0x0800f1a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800f1a0 	.word	0x0800f1a0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
 #define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2110      	movs	r1, #16
 800103c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001040:	f001 ffb8 	bl	8002fb4 <HAL_GPIO_WritePin>
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2110      	movs	r1, #16
 8001050:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001054:	f001 ffae 	bl	8002fb4 <HAL_GPIO_WritePin>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001066:	bf00      	nop
 8001068:	4808      	ldr	r0, [pc, #32]	@ (800108c <SPI_TxByte+0x30>)
 800106a:	f003 fbcd 	bl	8004808 <HAL_SPI_GetState>
 800106e:	4603      	mov	r3, r0
 8001070:	2b01      	cmp	r3, #1
 8001072:	d1f9      	bne.n	8001068 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8001074:	1df9      	adds	r1, r7, #7
 8001076:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107a:	2201      	movs	r2, #1
 800107c:	4803      	ldr	r0, [pc, #12]	@ (800108c <SPI_TxByte+0x30>)
 800107e:	f003 f82e 	bl	80040de <HAL_SPI_Transmit>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000210 	.word	0x20000210

08001090 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001096:	23ff      	movs	r3, #255	@ 0xff
 8001098:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800109e:	bf00      	nop
 80010a0:	4809      	ldr	r0, [pc, #36]	@ (80010c8 <SPI_RxByte+0x38>)
 80010a2:	f003 fbb1 	bl	8004808 <HAL_SPI_GetState>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d1f9      	bne.n	80010a0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80010ac:	1dba      	adds	r2, r7, #6
 80010ae:	1df9      	adds	r1, r7, #7
 80010b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2301      	movs	r3, #1
 80010b8:	4803      	ldr	r0, [pc, #12]	@ (80010c8 <SPI_RxByte+0x38>)
 80010ba:	f003 f986 	bl	80043ca <HAL_SPI_TransmitReceive>

  return data;
 80010be:	79bb      	ldrb	r3, [r7, #6]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000210 	.word	0x20000210

080010cc <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80010d4:	f7ff ffdc 	bl	8001090 <SPI_RxByte>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	701a      	strb	r2, [r3, #0]
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <SD_ReadyWait+0x34>)
 80010f0:	2232      	movs	r2, #50	@ 0x32
 80010f2:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80010f4:	f7ff ffcc 	bl	8001090 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80010f8:	f7ff ffca 	bl	8001090 <SPI_RxByte>
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2bff      	cmp	r3, #255	@ 0xff
 8001104:	d004      	beq.n	8001110 <SD_ReadyWait+0x28>
 8001106:	4b05      	ldr	r3, [pc, #20]	@ (800111c <SD_ReadyWait+0x34>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1f3      	bne.n	80010f8 <SD_ReadyWait+0x10>

  return res;
 8001110:	79fb      	ldrb	r3, [r7, #7]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200029d2 	.word	0x200029d2

08001120 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001126:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800112a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800112c:	f7ff ff8c 	bl	8001048 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	e005      	b.n	8001142 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001136:	20ff      	movs	r0, #255	@ 0xff
 8001138:	f7ff ff90 	bl	800105c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	3301      	adds	r3, #1
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	2b09      	cmp	r3, #9
 8001146:	ddf6      	ble.n	8001136 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001148:	f7ff ff74 	bl	8001034 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 800114c:	2340      	movs	r3, #64	@ 0x40
 800114e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001160:	2395      	movs	r3, #149	@ 0x95
 8001162:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	e009      	b.n	800117e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800116a:	1d3a      	adds	r2, r7, #4
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff72 	bl	800105c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3301      	adds	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2b05      	cmp	r3, #5
 8001182:	ddf2      	ble.n	800116a <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001184:	e002      	b.n	800118c <SD_PowerOn+0x6c>
  {
    Count--;
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3b01      	subs	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800118c:	f7ff ff80 	bl	8001090 <SPI_RxByte>
 8001190:	4603      	mov	r3, r0
 8001192:	2b01      	cmp	r3, #1
 8001194:	d002      	beq.n	800119c <SD_PowerOn+0x7c>
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f4      	bne.n	8001186 <SD_PowerOn+0x66>
  }

  DESELECT();
 800119c:	f7ff ff54 	bl	8001048 <DESELECT>
  SPI_TxByte(0XFF);
 80011a0:	20ff      	movs	r0, #255	@ 0xff
 80011a2:	f7ff ff5b 	bl	800105c <SPI_TxByte>

  PowerFlag = 1;
 80011a6:	4b03      	ldr	r3, [pc, #12]	@ (80011b4 <SD_PowerOn+0x94>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
}
 80011ac:	bf00      	nop
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	2000020d 	.word	0x2000020d

080011b8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80011bc:	4b03      	ldr	r3, [pc, #12]	@ (80011cc <SD_PowerOff+0x14>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	2000020d 	.word	0x2000020d

080011d0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80011d4:	4b03      	ldr	r3, [pc, #12]	@ (80011e4 <SD_CheckPower+0x14>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	2000020d 	.word	0x2000020d

080011e8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 80011f2:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <SD_RxDataBlock+0x68>)
 80011f4:	220a      	movs	r2, #10
 80011f6:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 80011f8:	f7ff ff4a 	bl	8001090 <SPI_RxByte>
 80011fc:	4603      	mov	r3, r0
 80011fe:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2bff      	cmp	r3, #255	@ 0xff
 8001204:	d104      	bne.n	8001210 <SD_RxDataBlock+0x28>
 8001206:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <SD_RxDataBlock+0x68>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f3      	bne.n	80011f8 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	2bfe      	cmp	r3, #254	@ 0xfe
 8001214:	d001      	beq.n	800121a <SD_RxDataBlock+0x32>
    return FALSE;
 8001216:	2300      	movs	r3, #0
 8001218:	e016      	b.n	8001248 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff53 	bl	80010cc <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	1c5a      	adds	r2, r3, #1
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff4d 	bl	80010cc <SPI_RxBytePtr>
  } while(btr -= 2);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	3b02      	subs	r3, #2
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1ed      	bne.n	800121a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800123e:	f7ff ff27 	bl	8001090 <SPI_RxByte>
  SPI_RxByte();
 8001242:	f7ff ff25 	bl	8001090 <SPI_RxByte>

  return TRUE;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200029d1 	.word	0x200029d1

08001254 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001264:	f7ff ff40 	bl	80010e8 <SD_ReadyWait>
 8001268:	4603      	mov	r3, r0
 800126a:	2bff      	cmp	r3, #255	@ 0xff
 800126c:	d001      	beq.n	8001272 <SD_TxDataBlock+0x1e>
    return FALSE;
 800126e:	2300      	movs	r3, #0
 8001270:	e040      	b.n	80012f4 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001272:	78fb      	ldrb	r3, [r7, #3]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fef1 	bl	800105c <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	2bfd      	cmp	r3, #253	@ 0xfd
 800127e:	d031      	beq.n	80012e4 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fee5 	bl	800105c <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	1c5a      	adds	r2, r3, #1
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fede 	bl	800105c <SPI_TxByte>
    } while (--wc);
 80012a0:	7bbb      	ldrb	r3, [r7, #14]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	73bb      	strb	r3, [r7, #14]
 80012a6:	7bbb      	ldrb	r3, [r7, #14]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1eb      	bne.n	8001284 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80012ac:	f7ff fef0 	bl	8001090 <SPI_RxByte>
    SPI_RxByte();
 80012b0:	f7ff feee 	bl	8001090 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80012b4:	e00b      	b.n	80012ce <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80012b6:	f7ff feeb 	bl	8001090 <SPI_RxByte>
 80012ba:	4603      	mov	r3, r0
 80012bc:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	f003 031f 	and.w	r3, r3, #31
 80012c4:	2b05      	cmp	r3, #5
 80012c6:	d006      	beq.n	80012d6 <SD_TxDataBlock+0x82>
        break;

      i++;
 80012c8:	7b7b      	ldrb	r3, [r7, #13]
 80012ca:	3301      	adds	r3, #1
 80012cc:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80012ce:	7b7b      	ldrb	r3, [r7, #13]
 80012d0:	2b40      	cmp	r3, #64	@ 0x40
 80012d2:	d9f0      	bls.n	80012b6 <SD_TxDataBlock+0x62>
 80012d4:	e000      	b.n	80012d8 <SD_TxDataBlock+0x84>
        break;
 80012d6:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80012d8:	bf00      	nop
 80012da:	f7ff fed9 	bl	8001090 <SPI_RxByte>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0fa      	beq.n	80012da <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	2b05      	cmp	r3, #5
 80012ec:	d101      	bne.n	80012f2 <SD_TxDataBlock+0x9e>
    return TRUE;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001308:	f7ff feee 	bl	80010e8 <SD_ReadyWait>
 800130c:	4603      	mov	r3, r0
 800130e:	2bff      	cmp	r3, #255	@ 0xff
 8001310:	d001      	beq.n	8001316 <SD_SendCmd+0x1a>
    return 0xFF;
 8001312:	23ff      	movs	r3, #255	@ 0xff
 8001314:	e040      	b.n	8001398 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fe9f 	bl	800105c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	0e1b      	lsrs	r3, r3, #24
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fe99 	bl	800105c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	0c1b      	lsrs	r3, r3, #16
 800132e:	b2db      	uxtb	r3, r3
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fe93 	bl	800105c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	b2db      	uxtb	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fe8d 	bl	800105c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fe88 	bl	800105c <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2b40      	cmp	r3, #64	@ 0x40
 8001354:	d101      	bne.n	800135a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001356:	2395      	movs	r3, #149	@ 0x95
 8001358:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2b48      	cmp	r3, #72	@ 0x48
 800135e:	d101      	bne.n	8001364 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001360:	2387      	movs	r3, #135	@ 0x87
 8001362:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fe78 	bl	800105c <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	2b4c      	cmp	r3, #76	@ 0x4c
 8001370:	d101      	bne.n	8001376 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001372:	f7ff fe8d 	bl	8001090 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001376:	230a      	movs	r3, #10
 8001378:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800137a:	f7ff fe89 	bl	8001090 <SPI_RxByte>
 800137e:	4603      	mov	r3, r0
 8001380:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001382:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001386:	2b00      	cmp	r3, #0
 8001388:	da05      	bge.n	8001396 <SD_SendCmd+0x9a>
 800138a:	7bbb      	ldrb	r3, [r7, #14]
 800138c:	3b01      	subs	r3, #1
 800138e:	73bb      	strb	r3, [r7, #14]
 8001390:	7bbb      	ldrb	r3, [r7, #14]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f1      	bne.n	800137a <SD_SendCmd+0x7e>

  return res;
 8001396:	7b7b      	ldrb	r3, [r7, #13]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0d5      	b.n	8001560 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80013b4:	4b6c      	ldr	r3, [pc, #432]	@ (8001568 <SD_disk_initialize+0x1c8>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <SD_disk_initialize+0x2a>
    return Stat;
 80013c2:	4b69      	ldr	r3, [pc, #420]	@ (8001568 <SD_disk_initialize+0x1c8>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	e0ca      	b.n	8001560 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 80013ca:	f7ff fea9 	bl	8001120 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 80013ce:	f7ff fe31 	bl	8001034 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 80013d6:	2100      	movs	r1, #0
 80013d8:	2040      	movs	r0, #64	@ 0x40
 80013da:	f7ff ff8f 	bl	80012fc <SD_SendCmd>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	f040 80a5 	bne.w	8001530 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80013e6:	4b61      	ldr	r3, [pc, #388]	@ (800156c <SD_disk_initialize+0x1cc>)
 80013e8:	2264      	movs	r2, #100	@ 0x64
 80013ea:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80013ec:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80013f0:	2048      	movs	r0, #72	@ 0x48
 80013f2:	f7ff ff83 	bl	80012fc <SD_SendCmd>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d158      	bne.n	80014ae <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	e00c      	b.n	800141c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001402:	7bfc      	ldrb	r4, [r7, #15]
 8001404:	f7ff fe44 	bl	8001090 <SPI_RxByte>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	f104 0310 	add.w	r3, r4, #16
 8001410:	443b      	add	r3, r7
 8001412:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	3301      	adds	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	2b03      	cmp	r3, #3
 8001420:	d9ef      	bls.n	8001402 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001422:	7abb      	ldrb	r3, [r7, #10]
 8001424:	2b01      	cmp	r3, #1
 8001426:	f040 8083 	bne.w	8001530 <SD_disk_initialize+0x190>
 800142a:	7afb      	ldrb	r3, [r7, #11]
 800142c:	2baa      	cmp	r3, #170	@ 0xaa
 800142e:	d17f      	bne.n	8001530 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001430:	2100      	movs	r1, #0
 8001432:	2077      	movs	r0, #119	@ 0x77
 8001434:	f7ff ff62 	bl	80012fc <SD_SendCmd>
 8001438:	4603      	mov	r3, r0
 800143a:	2b01      	cmp	r3, #1
 800143c:	d807      	bhi.n	800144e <SD_disk_initialize+0xae>
 800143e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001442:	2069      	movs	r0, #105	@ 0x69
 8001444:	f7ff ff5a 	bl	80012fc <SD_SendCmd>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d005      	beq.n	800145a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800144e:	4b47      	ldr	r3, [pc, #284]	@ (800156c <SD_disk_initialize+0x1cc>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1eb      	bne.n	8001430 <SD_disk_initialize+0x90>
 8001458:	e000      	b.n	800145c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800145a:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800145c:	4b43      	ldr	r3, [pc, #268]	@ (800156c <SD_disk_initialize+0x1cc>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d064      	beq.n	8001530 <SD_disk_initialize+0x190>
 8001466:	2100      	movs	r1, #0
 8001468:	207a      	movs	r0, #122	@ 0x7a
 800146a:	f7ff ff47 	bl	80012fc <SD_SendCmd>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d15d      	bne.n	8001530 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	e00c      	b.n	8001494 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800147a:	7bfc      	ldrb	r4, [r7, #15]
 800147c:	f7ff fe08 	bl	8001090 <SPI_RxByte>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	f104 0310 	add.w	r3, r4, #16
 8001488:	443b      	add	r3, r7
 800148a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	3301      	adds	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	2b03      	cmp	r3, #3
 8001498:	d9ef      	bls.n	800147a <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800149a:	7a3b      	ldrb	r3, [r7, #8]
 800149c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SD_disk_initialize+0x108>
 80014a4:	2306      	movs	r3, #6
 80014a6:	e000      	b.n	80014aa <SD_disk_initialize+0x10a>
 80014a8:	2302      	movs	r3, #2
 80014aa:	73bb      	strb	r3, [r7, #14]
 80014ac:	e040      	b.n	8001530 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80014ae:	2100      	movs	r1, #0
 80014b0:	2077      	movs	r0, #119	@ 0x77
 80014b2:	f7ff ff23 	bl	80012fc <SD_SendCmd>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d808      	bhi.n	80014ce <SD_disk_initialize+0x12e>
 80014bc:	2100      	movs	r1, #0
 80014be:	2069      	movs	r0, #105	@ 0x69
 80014c0:	f7ff ff1c 	bl	80012fc <SD_SendCmd>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d801      	bhi.n	80014ce <SD_disk_initialize+0x12e>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e000      	b.n	80014d0 <SD_disk_initialize+0x130>
 80014ce:	2301      	movs	r3, #1
 80014d0:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80014d2:	7bbb      	ldrb	r3, [r7, #14]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d10e      	bne.n	80014f6 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80014d8:	2100      	movs	r1, #0
 80014da:	2077      	movs	r0, #119	@ 0x77
 80014dc:	f7ff ff0e 	bl	80012fc <SD_SendCmd>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d80e      	bhi.n	8001504 <SD_disk_initialize+0x164>
 80014e6:	2100      	movs	r1, #0
 80014e8:	2069      	movs	r0, #105	@ 0x69
 80014ea:	f7ff ff07 	bl	80012fc <SD_SendCmd>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d107      	bne.n	8001504 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80014f4:	e00d      	b.n	8001512 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80014f6:	2100      	movs	r1, #0
 80014f8:	2041      	movs	r0, #65	@ 0x41
 80014fa:	f7ff feff 	bl	80012fc <SD_SendCmd>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d005      	beq.n	8001510 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001504:	4b19      	ldr	r3, [pc, #100]	@ (800156c <SD_disk_initialize+0x1cc>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1e1      	bne.n	80014d2 <SD_disk_initialize+0x132>
 800150e:	e000      	b.n	8001512 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001510:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001512:	4b16      	ldr	r3, [pc, #88]	@ (800156c <SD_disk_initialize+0x1cc>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d007      	beq.n	800152c <SD_disk_initialize+0x18c>
 800151c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001520:	2050      	movs	r0, #80	@ 0x50
 8001522:	f7ff feeb 	bl	80012fc <SD_SendCmd>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001530:	4a0f      	ldr	r2, [pc, #60]	@ (8001570 <SD_disk_initialize+0x1d0>)
 8001532:	7bbb      	ldrb	r3, [r7, #14]
 8001534:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001536:	f7ff fd87 	bl	8001048 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800153a:	f7ff fda9 	bl	8001090 <SPI_RxByte>

  if (type)
 800153e:	7bbb      	ldrb	r3, [r7, #14]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d008      	beq.n	8001556 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001544:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <SD_disk_initialize+0x1c8>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <SD_disk_initialize+0x1c8>)
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	e001      	b.n	800155a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001556:	f7ff fe2f 	bl	80011b8 <SD_PowerOff>
  }

  return Stat;
 800155a:	4b03      	ldr	r3, [pc, #12]	@ (8001568 <SD_disk_initialize+0x1c8>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b2db      	uxtb	r3, r3
}
 8001560:	4618      	mov	r0, r3
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	bd90      	pop	{r4, r7, pc}
 8001568:	20000000 	.word	0x20000000
 800156c:	200029d1 	.word	0x200029d1
 8001570:	2000020c 	.word	0x2000020c

08001574 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001584:	2301      	movs	r3, #1
 8001586:	e002      	b.n	800158e <SD_disk_status+0x1a>

  return Stat;
 8001588:	4b04      	ldr	r3, [pc, #16]	@ (800159c <SD_disk_status+0x28>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b2db      	uxtb	r3, r3
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000000 	.word	0x20000000

080015a0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	4603      	mov	r3, r0
 80015ae:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d102      	bne.n	80015bc <SD_disk_read+0x1c>
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <SD_disk_read+0x20>
    return RES_PARERR;
 80015bc:	2304      	movs	r3, #4
 80015be:	e051      	b.n	8001664 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 80015c0:	4b2a      	ldr	r3, [pc, #168]	@ (800166c <SD_disk_read+0xcc>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e048      	b.n	8001664 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80015d2:	4b27      	ldr	r3, [pc, #156]	@ (8001670 <SD_disk_read+0xd0>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	025b      	lsls	r3, r3, #9
 80015e2:	607b      	str	r3, [r7, #4]

  SELECT();
 80015e4:	f7ff fd26 	bl	8001034 <SELECT>

  if (count == 1)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d111      	bne.n	8001612 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	2051      	movs	r0, #81	@ 0x51
 80015f2:	f7ff fe83 	bl	80012fc <SD_SendCmd>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d129      	bne.n	8001650 <SD_disk_read+0xb0>
 80015fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001600:	68b8      	ldr	r0, [r7, #8]
 8001602:	f7ff fdf1 	bl	80011e8 <SD_RxDataBlock>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d021      	beq.n	8001650 <SD_disk_read+0xb0>
      count = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	e01e      	b.n	8001650 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	2052      	movs	r0, #82	@ 0x52
 8001616:	f7ff fe71 	bl	80012fc <SD_SendCmd>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d117      	bne.n	8001650 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001620:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001624:	68b8      	ldr	r0, [r7, #8]
 8001626:	f7ff fddf 	bl	80011e8 <SD_RxDataBlock>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00a      	beq.n	8001646 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001636:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	3b01      	subs	r3, #1
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1ed      	bne.n	8001620 <SD_disk_read+0x80>
 8001644:	e000      	b.n	8001648 <SD_disk_read+0xa8>
          break;
 8001646:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001648:	2100      	movs	r1, #0
 800164a:	204c      	movs	r0, #76	@ 0x4c
 800164c:	f7ff fe56 	bl	80012fc <SD_SendCmd>
    }
  }

  DESELECT();
 8001650:	f7ff fcfa 	bl	8001048 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001654:	f7ff fd1c 	bl	8001090 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	bf14      	ite	ne
 800165e:	2301      	movne	r3, #1
 8001660:	2300      	moveq	r3, #0
 8001662:	b2db      	uxtb	r3, r3
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000000 	.word	0x20000000
 8001670:	2000020c 	.word	0x2000020c

08001674 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d102      	bne.n	8001690 <SD_disk_write+0x1c>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <SD_disk_write+0x20>
    return RES_PARERR;
 8001690:	2304      	movs	r3, #4
 8001692:	e06b      	b.n	800176c <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001694:	4b37      	ldr	r3, [pc, #220]	@ (8001774 <SD_disk_write+0x100>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e062      	b.n	800176c <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80016a6:	4b33      	ldr	r3, [pc, #204]	@ (8001774 <SD_disk_write+0x100>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <SD_disk_write+0x44>
    return RES_WRPRT;
 80016b4:	2302      	movs	r3, #2
 80016b6:	e059      	b.n	800176c <SD_disk_write+0xf8>

  if (!(CardType & 4))
 80016b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001778 <SD_disk_write+0x104>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	025b      	lsls	r3, r3, #9
 80016c8:	607b      	str	r3, [r7, #4]

  SELECT();
 80016ca:	f7ff fcb3 	bl	8001034 <SELECT>

  if (count == 1)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d110      	bne.n	80016f6 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	2058      	movs	r0, #88	@ 0x58
 80016d8:	f7ff fe10 	bl	80012fc <SD_SendCmd>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d13a      	bne.n	8001758 <SD_disk_write+0xe4>
 80016e2:	21fe      	movs	r1, #254	@ 0xfe
 80016e4:	68b8      	ldr	r0, [r7, #8]
 80016e6:	f7ff fdb5 	bl	8001254 <SD_TxDataBlock>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d033      	beq.n	8001758 <SD_disk_write+0xe4>
      count = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	e030      	b.n	8001758 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 80016f6:	4b20      	ldr	r3, [pc, #128]	@ (8001778 <SD_disk_write+0x104>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d007      	beq.n	8001712 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001702:	2100      	movs	r1, #0
 8001704:	2077      	movs	r0, #119	@ 0x77
 8001706:	f7ff fdf9 	bl	80012fc <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800170a:	6839      	ldr	r1, [r7, #0]
 800170c:	2057      	movs	r0, #87	@ 0x57
 800170e:	f7ff fdf5 	bl	80012fc <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	2059      	movs	r0, #89	@ 0x59
 8001716:	f7ff fdf1 	bl	80012fc <SD_SendCmd>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d11b      	bne.n	8001758 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001720:	21fc      	movs	r1, #252	@ 0xfc
 8001722:	68b8      	ldr	r0, [r7, #8]
 8001724:	f7ff fd96 	bl	8001254 <SD_TxDataBlock>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00a      	beq.n	8001744 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001734:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	3b01      	subs	r3, #1
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1ee      	bne.n	8001720 <SD_disk_write+0xac>
 8001742:	e000      	b.n	8001746 <SD_disk_write+0xd2>
          break;
 8001744:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001746:	21fd      	movs	r1, #253	@ 0xfd
 8001748:	2000      	movs	r0, #0
 800174a:	f7ff fd83 	bl	8001254 <SD_TxDataBlock>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <SD_disk_write+0xe4>
      {
        count = 1;
 8001754:	2301      	movs	r3, #1
 8001756:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001758:	f7ff fc76 	bl	8001048 <DESELECT>
  SPI_RxByte();
 800175c:	f7ff fc98 	bl	8001090 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	bf14      	ite	ne
 8001766:	2301      	movne	r3, #1
 8001768:	2300      	moveq	r3, #0
 800176a:	b2db      	uxtb	r3, r3
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000000 	.word	0x20000000
 8001778:	2000020c 	.word	0x2000020c

0800177c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b08b      	sub	sp, #44	@ 0x2c
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	603a      	str	r2, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
 8001788:	460b      	mov	r3, r1
 800178a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001796:	2304      	movs	r3, #4
 8001798:	e119      	b.n	80019ce <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 80017a0:	79bb      	ldrb	r3, [r7, #6]
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d129      	bne.n	80017fa <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d017      	beq.n	80017de <SD_disk_ioctl+0x62>
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	dc1f      	bgt.n	80017f2 <SD_disk_ioctl+0x76>
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <SD_disk_ioctl+0x40>
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d00b      	beq.n	80017d2 <SD_disk_ioctl+0x56>
 80017ba:	e01a      	b.n	80017f2 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80017bc:	f7ff fd08 	bl	80011d0 <SD_CheckPower>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 80017c6:	f7ff fcf7 	bl	80011b8 <SD_PowerOff>
      res = RES_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017d0:	e0fb      	b.n	80019ca <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 80017d2:	f7ff fca5 	bl	8001120 <SD_PowerOn>
      res = RES_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017dc:	e0f5      	b.n	80019ca <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	1c5c      	adds	r4, r3, #1
 80017e2:	f7ff fcf5 	bl	80011d0 <SD_CheckPower>
 80017e6:	4603      	mov	r3, r0
 80017e8:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80017ea:	2300      	movs	r3, #0
 80017ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017f0:	e0eb      	b.n	80019ca <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 80017f2:	2304      	movs	r3, #4
 80017f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80017f8:	e0e7      	b.n	80019ca <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80017fa:	4b77      	ldr	r3, [pc, #476]	@ (80019d8 <SD_disk_ioctl+0x25c>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001808:	2303      	movs	r3, #3
 800180a:	e0e0      	b.n	80019ce <SD_disk_ioctl+0x252>

    SELECT();
 800180c:	f7ff fc12 	bl	8001034 <SELECT>

    switch (ctrl)
 8001810:	79bb      	ldrb	r3, [r7, #6]
 8001812:	2b0d      	cmp	r3, #13
 8001814:	f200 80ca 	bhi.w	80019ac <SD_disk_ioctl+0x230>
 8001818:	a201      	add	r2, pc, #4	@ (adr r2, 8001820 <SD_disk_ioctl+0xa4>)
 800181a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181e:	bf00      	nop
 8001820:	08001917 	.word	0x08001917
 8001824:	08001859 	.word	0x08001859
 8001828:	08001907 	.word	0x08001907
 800182c:	080019ad 	.word	0x080019ad
 8001830:	080019ad 	.word	0x080019ad
 8001834:	080019ad 	.word	0x080019ad
 8001838:	080019ad 	.word	0x080019ad
 800183c:	080019ad 	.word	0x080019ad
 8001840:	080019ad 	.word	0x080019ad
 8001844:	080019ad 	.word	0x080019ad
 8001848:	080019ad 	.word	0x080019ad
 800184c:	08001929 	.word	0x08001929
 8001850:	0800194d 	.word	0x0800194d
 8001854:	08001971 	.word	0x08001971
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001858:	2100      	movs	r1, #0
 800185a:	2049      	movs	r0, #73	@ 0x49
 800185c:	f7ff fd4e 	bl	80012fc <SD_SendCmd>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 80a6 	bne.w	80019b4 <SD_disk_ioctl+0x238>
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	2110      	movs	r1, #16
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fcba 	bl	80011e8 <SD_RxDataBlock>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 809c 	beq.w	80019b4 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 800187c:	7b3b      	ldrb	r3, [r7, #12]
 800187e:	099b      	lsrs	r3, r3, #6
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b01      	cmp	r3, #1
 8001884:	d10d      	bne.n	80018a2 <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001886:	7d7b      	ldrb	r3, [r7, #21]
 8001888:	461a      	mov	r2, r3
 800188a:	7d3b      	ldrb	r3, [r7, #20]
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	b29b      	uxth	r3, r3
 8001890:	4413      	add	r3, r2
 8001892:	b29b      	uxth	r3, r3
 8001894:	3301      	adds	r3, #1
 8001896:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001898:	8bfb      	ldrh	r3, [r7, #30]
 800189a:	029a      	lsls	r2, r3, #10
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e02d      	b.n	80018fe <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80018a2:	7c7b      	ldrb	r3, [r7, #17]
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	7dbb      	ldrb	r3, [r7, #22]
 80018ac:	09db      	lsrs	r3, r3, #7
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	7d7b      	ldrb	r3, [r7, #21]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f003 0306 	and.w	r3, r3, #6
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	3302      	adds	r3, #2
 80018c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80018ca:	7d3b      	ldrb	r3, [r7, #20]
 80018cc:	099b      	lsrs	r3, r3, #6
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	7cfb      	ldrb	r3, [r7, #19]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	4413      	add	r3, r2
 80018da:	b29a      	uxth	r2, r3
 80018dc:	7cbb      	ldrb	r3, [r7, #18]
 80018de:	029b      	lsls	r3, r3, #10
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3301      	adds	r3, #1
 80018ee:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80018f0:	8bfa      	ldrh	r2, [r7, #30]
 80018f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018f6:	3b09      	subs	r3, #9
 80018f8:	409a      	lsls	r2, r3
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001904:	e056      	b.n	80019b4 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800190c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001914:	e055      	b.n	80019c2 <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001916:	f7ff fbe7 	bl	80010e8 <SD_ReadyWait>
 800191a:	4603      	mov	r3, r0
 800191c:	2bff      	cmp	r3, #255	@ 0xff
 800191e:	d14b      	bne.n	80019b8 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001926:	e047      	b.n	80019b8 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001928:	2100      	movs	r1, #0
 800192a:	2049      	movs	r0, #73	@ 0x49
 800192c:	f7ff fce6 	bl	80012fc <SD_SendCmd>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d142      	bne.n	80019bc <SD_disk_ioctl+0x240>
 8001936:	2110      	movs	r1, #16
 8001938:	6a38      	ldr	r0, [r7, #32]
 800193a:	f7ff fc55 	bl	80011e8 <SD_RxDataBlock>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d03b      	beq.n	80019bc <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800194a:	e037      	b.n	80019bc <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800194c:	2100      	movs	r1, #0
 800194e:	204a      	movs	r0, #74	@ 0x4a
 8001950:	f7ff fcd4 	bl	80012fc <SD_SendCmd>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d132      	bne.n	80019c0 <SD_disk_ioctl+0x244>
 800195a:	2110      	movs	r1, #16
 800195c:	6a38      	ldr	r0, [r7, #32]
 800195e:	f7ff fc43 	bl	80011e8 <SD_RxDataBlock>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d02b      	beq.n	80019c0 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800196e:	e027      	b.n	80019c0 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001970:	2100      	movs	r1, #0
 8001972:	207a      	movs	r0, #122	@ 0x7a
 8001974:	f7ff fcc2 	bl	80012fc <SD_SendCmd>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d116      	bne.n	80019ac <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 800197e:	2300      	movs	r3, #0
 8001980:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001984:	e00b      	b.n	800199e <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8001986:	6a3c      	ldr	r4, [r7, #32]
 8001988:	1c63      	adds	r3, r4, #1
 800198a:	623b      	str	r3, [r7, #32]
 800198c:	f7ff fb80 	bl	8001090 <SPI_RxByte>
 8001990:	4603      	mov	r3, r0
 8001992:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001994:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001998:	3301      	adds	r3, #1
 800199a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800199e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d9ef      	bls.n	8001986 <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 80019ac:	2304      	movs	r3, #4
 80019ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80019b2:	e006      	b.n	80019c2 <SD_disk_ioctl+0x246>
      break;
 80019b4:	bf00      	nop
 80019b6:	e004      	b.n	80019c2 <SD_disk_ioctl+0x246>
      break;
 80019b8:	bf00      	nop
 80019ba:	e002      	b.n	80019c2 <SD_disk_ioctl+0x246>
      break;
 80019bc:	bf00      	nop
 80019be:	e000      	b.n	80019c2 <SD_disk_ioctl+0x246>
      break;
 80019c0:	bf00      	nop
    }

    DESELECT();
 80019c2:	f7ff fb41 	bl	8001048 <DESELECT>
    SPI_RxByte();
 80019c6:	f7ff fb63 	bl	8001090 <SPI_RxByte>
  }

  return res;
 80019ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	372c      	adds	r7, #44	@ 0x2c
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd90      	pop	{r4, r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000000 	.word	0x20000000

080019dc <read_encoder_value>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int16_t read_encoder_value(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
  int32_t count_t = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
  uint32_t enc_buff = TIM2->CNT;
 80019e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ec:	603b      	str	r3, [r7, #0]
  TIM2->CNT = 0;
 80019ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019f2:	2200      	movs	r2, #0
 80019f4:	625a      	str	r2, [r3, #36]	@ 0x24
    count_t = (int32_t)enc_buff*-1;
    //printf("-\r\n");
  }
  else
  {
    count_t = (int32_t)enc_buff;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	607b      	str	r3, [r7, #4]
  }
  return (int16_t)count_t;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	b21b      	sxth	r3, r3
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
//		}else{
//			printf("SDopen failed\r\n");
//		}

	}
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	//printf("receive\r\n");
	//printf("%d\r\n",buffer[0]);

	if(buffer[0] == 13){
 8001a28:	4b40      	ldr	r3, [pc, #256]	@ (8001b2c <HAL_UART_RxCpltCallback+0x10c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b0d      	cmp	r3, #13
 8001a2e:	d168      	bne.n	8001b02 <HAL_UART_RxCpltCallback+0xe2>
		//printf("ok\r\n");
		if(data[0] == 97){
 8001a30:	4b3f      	ldr	r3, [pc, #252]	@ (8001b30 <HAL_UART_RxCpltCallback+0x110>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b61      	cmp	r3, #97	@ 0x61
 8001a36:	d124      	bne.n	8001a82 <HAL_UART_RxCpltCallback+0x62>
			for(int i=0;i<datapos-1;i++){
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	e00b      	b.n	8001a56 <HAL_UART_RxCpltCallback+0x36>
				num_char[i] = data[i+1];
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3301      	adds	r3, #1
 8001a42:	4a3b      	ldr	r2, [pc, #236]	@ (8001b30 <HAL_UART_RxCpltCallback+0x110>)
 8001a44:	5cd1      	ldrb	r1, [r2, r3]
 8001a46:	4a3b      	ldr	r2, [pc, #236]	@ (8001b34 <HAL_UART_RxCpltCallback+0x114>)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	460a      	mov	r2, r1
 8001a4e:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<datapos-1;i++){
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	3301      	adds	r3, #1
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b38      	ldr	r3, [pc, #224]	@ (8001b38 <HAL_UART_RxCpltCallback+0x118>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	dbed      	blt.n	8001a3e <HAL_UART_RxCpltCallback+0x1e>
			}
			num_char[datapos-1] = '\0';
 8001a62:	4b35      	ldr	r3, [pc, #212]	@ (8001b38 <HAL_UART_RxCpltCallback+0x118>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	4a32      	ldr	r2, [pc, #200]	@ (8001b34 <HAL_UART_RxCpltCallback+0x114>)
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	54d1      	strb	r1, [r2, r3]
			cangle = strtof(num_char, NULL);
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4830      	ldr	r0, [pc, #192]	@ (8001b34 <HAL_UART_RxCpltCallback+0x114>)
 8001a72:	f009 ff31 	bl	800b8d8 <strtof>
 8001a76:	eef0 7a40 	vmov.f32	s15, s0
 8001a7a:	4b30      	ldr	r3, [pc, #192]	@ (8001b3c <HAL_UART_RxCpltCallback+0x11c>)
 8001a7c:	edc3 7a00 	vstr	s15, [r3]
 8001a80:	e02a      	b.n	8001ad8 <HAL_UART_RxCpltCallback+0xb8>
			//printf("%f",cangle);
		}else if(data[0] == 114){
 8001a82:	4b2b      	ldr	r3, [pc, #172]	@ (8001b30 <HAL_UART_RxCpltCallback+0x110>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b72      	cmp	r3, #114	@ 0x72
 8001a88:	d126      	bne.n	8001ad8 <HAL_UART_RxCpltCallback+0xb8>
			if(f_open(&fil, "file1.csv", FA_OPEN_ALWAYS | FA_WRITE) == FR_OK){
 8001a8a:	2212      	movs	r2, #18
 8001a8c:	492c      	ldr	r1, [pc, #176]	@ (8001b40 <HAL_UART_RxCpltCallback+0x120>)
 8001a8e:	482d      	ldr	r0, [pc, #180]	@ (8001b44 <HAL_UART_RxCpltCallback+0x124>)
 8001a90:	f008 f9d4 	bl	8009e3c <f_open>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d11e      	bne.n	8001ad8 <HAL_UART_RxCpltCallback+0xb8>
				strcpy(sd_buffer, "reset\n");
 8001a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b48 <HAL_UART_RxCpltCallback+0x128>)
 8001a9c:	4a2b      	ldr	r2, [pc, #172]	@ (8001b4c <HAL_UART_RxCpltCallback+0x12c>)
 8001a9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aa2:	6018      	str	r0, [r3, #0]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	8019      	strh	r1, [r3, #0]
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	0c0a      	lsrs	r2, r1, #16
 8001aac:	701a      	strb	r2, [r3, #0]
				cnt = 0;
 8001aae:	4b28      	ldr	r3, [pc, #160]	@ (8001b50 <HAL_UART_RxCpltCallback+0x130>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
				//sprintf(sd_buffer,"%ld,%f,%d\n",time,cangle,cnt);
				f_lseek(&fil, f_size(&fil));
 8001ab4:	4b23      	ldr	r3, [pc, #140]	@ (8001b44 <HAL_UART_RxCpltCallback+0x124>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4822      	ldr	r0, [pc, #136]	@ (8001b44 <HAL_UART_RxCpltCallback+0x124>)
 8001abc:	f008 fdc2 	bl	800a644 <f_lseek>
				f_write(&fil, sd_buffer, strlen(sd_buffer), &bw);
 8001ac0:	4821      	ldr	r0, [pc, #132]	@ (8001b48 <HAL_UART_RxCpltCallback+0x128>)
 8001ac2:	f7fe fbfd 	bl	80002c0 <strlen>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	4b22      	ldr	r3, [pc, #136]	@ (8001b54 <HAL_UART_RxCpltCallback+0x134>)
 8001aca:	491f      	ldr	r1, [pc, #124]	@ (8001b48 <HAL_UART_RxCpltCallback+0x128>)
 8001acc:	481d      	ldr	r0, [pc, #116]	@ (8001b44 <HAL_UART_RxCpltCallback+0x124>)
 8001ace:	f008 fb7d 	bl	800a1cc <f_write>
				f_close(&fil);
 8001ad2:	481c      	ldr	r0, [pc, #112]	@ (8001b44 <HAL_UART_RxCpltCallback+0x124>)
 8001ad4:	f008 fd8c 	bl	800a5f0 <f_close>
			}
		}
		for(int i =0;i < datapos;i++){
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	e007      	b.n	8001aee <HAL_UART_RxCpltCallback+0xce>
			//printf("%d\r\n",data[i]);
			//printf("i:%d,data:%d\r\n",i,data[i]);

			data[i] = 0;
 8001ade:	4a14      	ldr	r2, [pc, #80]	@ (8001b30 <HAL_UART_RxCpltCallback+0x110>)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
		for(int i =0;i < datapos;i++){
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	3301      	adds	r3, #1
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <HAL_UART_RxCpltCallback+0x118>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	dbf2      	blt.n	8001ade <HAL_UART_RxCpltCallback+0xbe>
		}
		datapos = -1;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b38 <HAL_UART_RxCpltCallback+0x118>)
 8001afa:	f04f 32ff 	mov.w	r2, #4294967295
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	e00a      	b.n	8001b18 <HAL_UART_RxCpltCallback+0xf8>
	}else{
		data[datapos] = buffer[0];
 8001b02:	4b0d      	ldr	r3, [pc, #52]	@ (8001b38 <HAL_UART_RxCpltCallback+0x118>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a09      	ldr	r2, [pc, #36]	@ (8001b2c <HAL_UART_RxCpltCallback+0x10c>)
 8001b08:	7811      	ldrb	r1, [r2, #0]
 8001b0a:	4a09      	ldr	r2, [pc, #36]	@ (8001b30 <HAL_UART_RxCpltCallback+0x110>)
 8001b0c:	54d1      	strb	r1, [r2, r3]
		//printf("%d\r\n",data[datapos]);
		datapos++;
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <HAL_UART_RxCpltCallback+0x118>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	3301      	adds	r3, #1
 8001b14:	4a08      	ldr	r2, [pc, #32]	@ (8001b38 <HAL_UART_RxCpltCallback+0x118>)
 8001b16:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Receive_IT(&huart1, buffer, 1);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4904      	ldr	r1, [pc, #16]	@ (8001b2c <HAL_UART_RxCpltCallback+0x10c>)
 8001b1c:	480e      	ldr	r0, [pc, #56]	@ (8001b58 <HAL_UART_RxCpltCallback+0x138>)
 8001b1e:	f003 fdbb 	bl	8005698 <HAL_UART_Receive_IT>
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200028f0 	.word	0x200028f0
 8001b30:	20002910 	.word	0x20002910
 8001b34:	20002934 	.word	0x20002934
 8001b38:	20002930 	.word	0x20002930
 8001b3c:	20002960 	.word	0x20002960
 8001b40:	0800f1b8 	.word	0x0800f1b8
 8001b44:	200014b8 	.word	0x200014b8
 8001b48:	200024ec 	.word	0x200024ec
 8001b4c:	0800f1c4 	.word	0x0800f1c4
 8001b50:	20002954 	.word	0x20002954
 8001b54:	200028ec 	.word	0x200028ec
 8001b58:	20000358 	.word	0x20000358

08001b5c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
	printf("uart_error\r\n");
 8001b64:	4808      	ldr	r0, [pc, #32]	@ (8001b88 <HAL_UART_ErrorCallback+0x2c>)
 8001b66:	f00a fc9d 	bl	800c4a4 <puts>
	HAL_UART_Abort(huart);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f003 fde0 	bl	8005730 <HAL_UART_Abort>
	HAL_UART_Receive_IT(&huart1, buffer, size);
 8001b70:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <HAL_UART_ErrorCallback+0x30>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	4905      	ldr	r1, [pc, #20]	@ (8001b90 <HAL_UART_ErrorCallback+0x34>)
 8001b7a:	4806      	ldr	r0, [pc, #24]	@ (8001b94 <HAL_UART_ErrorCallback+0x38>)
 8001b7c:	f003 fd8c 	bl	8005698 <HAL_UART_Receive_IT>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	0800f1cc 	.word	0x0800f1cc
 8001b8c:	20000004 	.word	0x20000004
 8001b90:	200028f0 	.word	0x200028f0
 8001b94:	20000358 	.word	0x20000358

08001b98 <_write>:

int _write(int file, char *ptr, int len)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	230a      	movs	r3, #10
 8001baa:	68b9      	ldr	r1, [r7, #8]
 8001bac:	4803      	ldr	r0, [pc, #12]	@ (8001bbc <_write+0x24>)
 8001bae:	f003 fce5 	bl	800557c <HAL_UART_Transmit>
  return len;
 8001bb2:	687b      	ldr	r3, [r7, #4]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	200003ec 	.word	0x200003ec

08001bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8001bc6:	4b6c      	ldr	r3, [pc, #432]	@ (8001d78 <main+0x1b8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f00a fc70 	bl	800c4b4 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd4:	f000 fdfd 	bl	80027d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd8:	f000 f906 	bl	8001de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bdc:	f000 faba 	bl	8002154 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001be0:	f000 fa6c 	bl	80020bc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001be4:	f000 f940 	bl	8001e68 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001be8:	f000 f97c 	bl	8001ee4 <MX_TIM2_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8001bec:	f005 fe94 	bl	8007918 <MX_FATFS_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <main+0x3a>
    Error_Handler();
 8001bf6:	f000 fadd 	bl	80021b4 <Error_Handler>
  }
  MX_TIM16_Init();
 8001bfa:	f000 f9c7 	bl	8001f8c <MX_TIM16_Init>
  MX_TIM17_Init();
 8001bfe:	f000 f9eb 	bl	8001fd8 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8001c02:	f000 fa0f 	bl	8002024 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  fresult = f_mount(&fs, "/", 1);
 8001c06:	2201      	movs	r2, #1
 8001c08:	495c      	ldr	r1, [pc, #368]	@ (8001d7c <main+0x1bc>)
 8001c0a:	485d      	ldr	r0, [pc, #372]	@ (8001d80 <main+0x1c0>)
 8001c0c:	f008 f8d0 	bl	8009db0 <f_mount>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461a      	mov	r2, r3
 8001c14:	4b5b      	ldr	r3, [pc, #364]	@ (8001d84 <main+0x1c4>)
 8001c16:	701a      	strb	r2, [r3, #0]
  if(fresult == FR_OK){
 8001c18:	4b5a      	ldr	r3, [pc, #360]	@ (8001d84 <main+0x1c4>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d103      	bne.n	8001c28 <main+0x68>
  	 printf("SD CARD mounted successfully.\r\n");
 8001c20:	4859      	ldr	r0, [pc, #356]	@ (8001d88 <main+0x1c8>)
 8001c22:	f00a fc3f 	bl	800c4a4 <puts>
 8001c26:	e002      	b.n	8001c2e <main+0x6e>
  }else{
  	  printf("ERROR : SD CARD mounted\r\n");
 8001c28:	4858      	ldr	r0, [pc, #352]	@ (8001d8c <main+0x1cc>)
 8001c2a:	f00a fc3b 	bl	800c4a4 <puts>
  }

  HAL_TIM_Encoder_Start( &htim2, TIM_CHANNEL_ALL );
 8001c2e:	213c      	movs	r1, #60	@ 0x3c
 8001c30:	4857      	ldr	r0, [pc, #348]	@ (8001d90 <main+0x1d0>)
 8001c32:	f003 f8c3 	bl	8004dbc <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim16);
 8001c36:	4857      	ldr	r0, [pc, #348]	@ (8001d94 <main+0x1d4>)
 8001c38:	f002 ffb0 	bl	8004b9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);
 8001c3c:	4856      	ldr	r0, [pc, #344]	@ (8001d98 <main+0x1d8>)
 8001c3e:	f002 ffad 	bl	8004b9c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, buffer, 1);
 8001c42:	2201      	movs	r2, #1
 8001c44:	4955      	ldr	r1, [pc, #340]	@ (8001d9c <main+0x1dc>)
 8001c46:	4856      	ldr	r0, [pc, #344]	@ (8001da0 <main+0x1e0>)
 8001c48:	f003 fd26 	bl	8005698 <HAL_UART_Receive_IT>

    /* USER CODE BEGIN 3 */
	  //cnt = __HAL_TIM_GET_COUNTER(&htim2);
	  //printf("%d\r\n",cnt);
	  //printf("count:%d\r\n",count);
	  time = HAL_GetTick();
 8001c4c:	f000 fe26 	bl	800289c <HAL_GetTick>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4a54      	ldr	r2, [pc, #336]	@ (8001da4 <main+0x1e4>)
 8001c54:	6013      	str	r3, [r2, #0]
	  count = read_encoder_value();
 8001c56:	f7ff fec1 	bl	80019dc <read_encoder_value>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b52      	ldr	r3, [pc, #328]	@ (8001da8 <main+0x1e8>)
 8001c60:	601a      	str	r2, [r3, #0]
	  //printf("count:%d\r\n",count);
	  cnt += count;
 8001c62:	4b52      	ldr	r3, [pc, #328]	@ (8001dac <main+0x1ec>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	4b50      	ldr	r3, [pc, #320]	@ (8001da8 <main+0x1e8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a4f      	ldr	r2, [pc, #316]	@ (8001dac <main+0x1ec>)
 8001c6e:	6013      	str	r3, [r2, #0]
	  tangle = (float)cnt / 8192.0 * 360.0;
 8001c70:	4b4e      	ldr	r3, [pc, #312]	@ (8001dac <main+0x1ec>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7c:	ee17 0a90 	vmov	r0, s15
 8001c80:	f7fe fc8a 	bl	8000598 <__aeabi_f2d>
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	4b49      	ldr	r3, [pc, #292]	@ (8001db0 <main+0x1f0>)
 8001c8a:	f7fe fe07 	bl	800089c <__aeabi_ddiv>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	4b46      	ldr	r3, [pc, #280]	@ (8001db4 <main+0x1f4>)
 8001c9c:	f7fe fcd4 	bl	8000648 <__aeabi_dmul>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe ffc6 	bl	8000c38 <__aeabi_d2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a42      	ldr	r2, [pc, #264]	@ (8001db8 <main+0x1f8>)
 8001cb0:	6013      	str	r3, [r2, #0]
	  if(f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_WRITE) == FR_OK){
 8001cb2:	2212      	movs	r2, #18
 8001cb4:	4941      	ldr	r1, [pc, #260]	@ (8001dbc <main+0x1fc>)
 8001cb6:	4842      	ldr	r0, [pc, #264]	@ (8001dc0 <main+0x200>)
 8001cb8:	f008 f8c0 	bl	8009e3c <f_open>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d12f      	bne.n	8001d22 <main+0x162>
		  //strcpy(sd_buffer, "qwertyuiop\n");
		  sprintf(sd_buffer,"%ld,%.2f,%.2f\n",time,cangle,tangle);
 8001cc2:	4b38      	ldr	r3, [pc, #224]	@ (8001da4 <main+0x1e4>)
 8001cc4:	681e      	ldr	r6, [r3, #0]
 8001cc6:	4b3f      	ldr	r3, [pc, #252]	@ (8001dc4 <main+0x204>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fc64 	bl	8000598 <__aeabi_f2d>
 8001cd0:	4604      	mov	r4, r0
 8001cd2:	460d      	mov	r5, r1
 8001cd4:	4b38      	ldr	r3, [pc, #224]	@ (8001db8 <main+0x1f8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fc5d 	bl	8000598 <__aeabi_f2d>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ce6:	e9cd 4500 	strd	r4, r5, [sp]
 8001cea:	4632      	mov	r2, r6
 8001cec:	4936      	ldr	r1, [pc, #216]	@ (8001dc8 <main+0x208>)
 8001cee:	4837      	ldr	r0, [pc, #220]	@ (8001dcc <main+0x20c>)
 8001cf0:	f00a fc9c 	bl	800c62c <siprintf>
		  f_lseek(&fil, f_size(&fil));
 8001cf4:	4b32      	ldr	r3, [pc, #200]	@ (8001dc0 <main+0x200>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4831      	ldr	r0, [pc, #196]	@ (8001dc0 <main+0x200>)
 8001cfc:	f008 fca2 	bl	800a644 <f_lseek>
		  f_write(&fil, sd_buffer, strlen(sd_buffer), &bw);
 8001d00:	4832      	ldr	r0, [pc, #200]	@ (8001dcc <main+0x20c>)
 8001d02:	f7fe fadd 	bl	80002c0 <strlen>
 8001d06:	4602      	mov	r2, r0
 8001d08:	4b31      	ldr	r3, [pc, #196]	@ (8001dd0 <main+0x210>)
 8001d0a:	4930      	ldr	r1, [pc, #192]	@ (8001dcc <main+0x20c>)
 8001d0c:	482c      	ldr	r0, [pc, #176]	@ (8001dc0 <main+0x200>)
 8001d0e:	f008 fa5d 	bl	800a1cc <f_write>
		  f_close(&fil);
 8001d12:	482b      	ldr	r0, [pc, #172]	@ (8001dc0 <main+0x200>)
 8001d14:	f008 fc6c 	bl	800a5f0 <f_close>
			//printf("%s\r\n",sd_buffer);
		  //printf("t:%ld,a:%s,n:%f\r\n",time,sd_buffer,cangle);
		  printf("%s",sd_buffer);
 8001d18:	492c      	ldr	r1, [pc, #176]	@ (8001dcc <main+0x20c>)
 8001d1a:	482e      	ldr	r0, [pc, #184]	@ (8001dd4 <main+0x214>)
 8001d1c:	f00a fb5a 	bl	800c3d4 <iprintf>
 8001d20:	e002      	b.n	8001d28 <main+0x168>
	  }else{
		  printf("SDopen failed\r\n");
 8001d22:	482d      	ldr	r0, [pc, #180]	@ (8001dd8 <main+0x218>)
 8001d24:	f00a fbbe 	bl	800c4a4 <puts>
	  }
	  sprintf(angle_buffer, "a%.2f\r\n", tangle);
 8001d28:	4b23      	ldr	r3, [pc, #140]	@ (8001db8 <main+0x1f8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fc33 	bl	8000598 <__aeabi_f2d>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4929      	ldr	r1, [pc, #164]	@ (8001ddc <main+0x21c>)
 8001d38:	4829      	ldr	r0, [pc, #164]	@ (8001de0 <main+0x220>)
 8001d3a:	f00a fc77 	bl	800c62c <siprintf>
	  //printf("c:%d,t:%.2f\r\n",cnt,tangle);
	  if(m_count == 30){
 8001d3e:	4b29      	ldr	r3, [pc, #164]	@ (8001de4 <main+0x224>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b1e      	cmp	r3, #30
 8001d44:	d10e      	bne.n	8001d64 <main+0x1a4>
		  HAL_UART_Transmit(&huart1, (uint8_t*)angle_buffer, strlen(angle_buffer), 0xFFFF);
 8001d46:	4826      	ldr	r0, [pc, #152]	@ (8001de0 <main+0x220>)
 8001d48:	f7fe faba 	bl	80002c0 <strlen>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d54:	4922      	ldr	r1, [pc, #136]	@ (8001de0 <main+0x220>)
 8001d56:	4812      	ldr	r0, [pc, #72]	@ (8001da0 <main+0x1e0>)
 8001d58:	f003 fc10 	bl	800557c <HAL_UART_Transmit>
		  m_count = 0;
 8001d5c:	4b21      	ldr	r3, [pc, #132]	@ (8001de4 <main+0x224>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e004      	b.n	8001d6e <main+0x1ae>
	  }else{
		  m_count++;
 8001d64:	4b1f      	ldr	r3, [pc, #124]	@ (8001de4 <main+0x224>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001de4 <main+0x224>)
 8001d6c:	6013      	str	r3, [r2, #0]
	  }


	  HAL_Delay(100);
 8001d6e:	2064      	movs	r0, #100	@ 0x64
 8001d70:	f000 fda0 	bl	80028b4 <HAL_Delay>
	  time = HAL_GetTick();
 8001d74:	e76a      	b.n	8001c4c <main+0x8c>
 8001d76:	bf00      	nop
 8001d78:	200001a0 	.word	0x200001a0
 8001d7c:	0800f1d8 	.word	0x0800f1d8
 8001d80:	20000480 	.word	0x20000480
 8001d84:	200024e8 	.word	0x200024e8
 8001d88:	0800f1dc 	.word	0x0800f1dc
 8001d8c:	0800f1fc 	.word	0x0800f1fc
 8001d90:	20000274 	.word	0x20000274
 8001d94:	200002c0 	.word	0x200002c0
 8001d98:	2000030c 	.word	0x2000030c
 8001d9c:	200028f0 	.word	0x200028f0
 8001da0:	20000358 	.word	0x20000358
 8001da4:	2000295c 	.word	0x2000295c
 8001da8:	20002958 	.word	0x20002958
 8001dac:	20002954 	.word	0x20002954
 8001db0:	40c00000 	.word	0x40c00000
 8001db4:	40768000 	.word	0x40768000
 8001db8:	20002964 	.word	0x20002964
 8001dbc:	0800f218 	.word	0x0800f218
 8001dc0:	200014b8 	.word	0x200014b8
 8001dc4:	20002960 	.word	0x20002960
 8001dc8:	0800f224 	.word	0x0800f224
 8001dcc:	200024ec 	.word	0x200024ec
 8001dd0:	200028ec 	.word	0x200028ec
 8001dd4:	0800f234 	.word	0x0800f234
 8001dd8:	0800f238 	.word	0x0800f238
 8001ddc:	0800f248 	.word	0x0800f248
 8001de0:	20002968 	.word	0x20002968
 8001de4:	200029cc 	.word	0x200029cc

08001de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b094      	sub	sp, #80	@ 0x50
 8001dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dee:	f107 0318 	add.w	r3, r7, #24
 8001df2:	2238      	movs	r2, #56	@ 0x38
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f00a fd10 	bl	800c81c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
 8001e08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e0a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001e0e:	f001 f8e9 	bl	8002fe4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e12:	2302      	movs	r3, #2
 8001e14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e1c:	2340      	movs	r3, #64	@ 0x40
 8001e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e24:	f107 0318 	add.w	r3, r7, #24
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f001 f98f 	bl	800314c <HAL_RCC_OscConfig>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001e34:	f000 f9be 	bl	80021b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e38:	230f      	movs	r3, #15
 8001e3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e44:	2300      	movs	r3, #0
 8001e46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f001 fc8d 	bl	8003770 <HAL_RCC_ClockConfig>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001e5c:	f000 f9aa 	bl	80021b4 <Error_Handler>
  }
}
 8001e60:	bf00      	nop
 8001e62:	3750      	adds	r7, #80	@ 0x50
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <MX_SPI1_Init+0x74>)
 8001e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee0 <MX_SPI1_Init+0x78>)
 8001e70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e72:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <MX_SPI1_Init+0x74>)
 8001e74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e7a:	4b18      	ldr	r3, [pc, #96]	@ (8001edc <MX_SPI1_Init+0x74>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e80:	4b16      	ldr	r3, [pc, #88]	@ (8001edc <MX_SPI1_Init+0x74>)
 8001e82:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001e86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e88:	4b14      	ldr	r3, [pc, #80]	@ (8001edc <MX_SPI1_Init+0x74>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e8e:	4b13      	ldr	r3, [pc, #76]	@ (8001edc <MX_SPI1_Init+0x74>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e94:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <MX_SPI1_Init+0x74>)
 8001e96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <MX_SPI1_Init+0x74>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <MX_SPI1_Init+0x74>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <MX_SPI1_Init+0x74>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eae:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <MX_SPI1_Init+0x74>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001eb4:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <MX_SPI1_Init+0x74>)
 8001eb6:	2207      	movs	r2, #7
 8001eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001eba:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <MX_SPI1_Init+0x74>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <MX_SPI1_Init+0x74>)
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ec6:	4805      	ldr	r0, [pc, #20]	@ (8001edc <MX_SPI1_Init+0x74>)
 8001ec8:	f002 f85e 	bl	8003f88 <HAL_SPI_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ed2:	f000 f96f 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000210 	.word	0x20000210
 8001ee0:	40013000 	.word	0x40013000

08001ee4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08c      	sub	sp, #48	@ 0x30
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001eea:	f107 030c 	add.w	r3, r7, #12
 8001eee:	2224      	movs	r2, #36	@ 0x24
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f00a fc92 	bl	800c81c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef8:	463b      	mov	r3, r7
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f02:	4b21      	ldr	r3, [pc, #132]	@ (8001f88 <MX_TIM2_Init+0xa4>)
 8001f04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f88 <MX_TIM2_Init+0xa4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f10:	4b1d      	ldr	r3, [pc, #116]	@ (8001f88 <MX_TIM2_Init+0xa4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f16:	4b1c      	ldr	r3, [pc, #112]	@ (8001f88 <MX_TIM2_Init+0xa4>)
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f88 <MX_TIM2_Init+0xa4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f24:	4b18      	ldr	r3, [pc, #96]	@ (8001f88 <MX_TIM2_Init+0xa4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f32:	2301      	movs	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f42:	2301      	movs	r3, #1
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f46:	2300      	movs	r3, #0
 8001f48:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001f4e:	f107 030c 	add.w	r3, r7, #12
 8001f52:	4619      	mov	r1, r3
 8001f54:	480c      	ldr	r0, [pc, #48]	@ (8001f88 <MX_TIM2_Init+0xa4>)
 8001f56:	f002 fe8b 	bl	8004c70 <HAL_TIM_Encoder_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001f60:	f000 f928 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f6c:	463b      	mov	r3, r7
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4805      	ldr	r0, [pc, #20]	@ (8001f88 <MX_TIM2_Init+0xa4>)
 8001f72:	f003 f9eb 	bl	800534c <HAL_TIMEx_MasterConfigSynchronization>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001f7c:	f000 f91a 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	3730      	adds	r7, #48	@ 0x30
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000274 	.word	0x20000274

08001f8c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd0 <MX_TIM16_Init+0x44>)
 8001f92:	4a10      	ldr	r2, [pc, #64]	@ (8001fd4 <MX_TIM16_Init+0x48>)
 8001f94:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 8001f96:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd0 <MX_TIM16_Init+0x44>)
 8001f98:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001f9c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <MX_TIM16_Init+0x44>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <MX_TIM16_Init+0x44>)
 8001fa6:	2263      	movs	r2, #99	@ 0x63
 8001fa8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001faa:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <MX_TIM16_Init+0x44>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001fb0:	4b07      	ldr	r3, [pc, #28]	@ (8001fd0 <MX_TIM16_Init+0x44>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb6:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <MX_TIM16_Init+0x44>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001fbc:	4804      	ldr	r0, [pc, #16]	@ (8001fd0 <MX_TIM16_Init+0x44>)
 8001fbe:	f002 fd95 	bl	8004aec <HAL_TIM_Base_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001fc8:	f000 f8f4 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	200002c0 	.word	0x200002c0
 8001fd4:	40014400 	.word	0x40014400

08001fd8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <MX_TIM17_Init+0x44>)
 8001fde:	4a10      	ldr	r2, [pc, #64]	@ (8002020 <MX_TIM17_Init+0x48>)
 8001fe0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 7999;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800201c <MX_TIM17_Init+0x44>)
 8001fe4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001fe8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fea:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <MX_TIM17_Init+0x44>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 99;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <MX_TIM17_Init+0x44>)
 8001ff2:	2263      	movs	r2, #99	@ 0x63
 8001ff4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff6:	4b09      	ldr	r3, [pc, #36]	@ (800201c <MX_TIM17_Init+0x44>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001ffc:	4b07      	ldr	r3, [pc, #28]	@ (800201c <MX_TIM17_Init+0x44>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002002:	4b06      	ldr	r3, [pc, #24]	@ (800201c <MX_TIM17_Init+0x44>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002008:	4804      	ldr	r0, [pc, #16]	@ (800201c <MX_TIM17_Init+0x44>)
 800200a:	f002 fd6f 	bl	8004aec <HAL_TIM_Base_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002014:	f000 f8ce 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	2000030c 	.word	0x2000030c
 8002020:	40014800 	.word	0x40014800

08002024 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002028:	4b22      	ldr	r3, [pc, #136]	@ (80020b4 <MX_USART1_UART_Init+0x90>)
 800202a:	4a23      	ldr	r2, [pc, #140]	@ (80020b8 <MX_USART1_UART_Init+0x94>)
 800202c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800202e:	4b21      	ldr	r3, [pc, #132]	@ (80020b4 <MX_USART1_UART_Init+0x90>)
 8002030:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002034:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002036:	4b1f      	ldr	r3, [pc, #124]	@ (80020b4 <MX_USART1_UART_Init+0x90>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800203c:	4b1d      	ldr	r3, [pc, #116]	@ (80020b4 <MX_USART1_UART_Init+0x90>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002042:	4b1c      	ldr	r3, [pc, #112]	@ (80020b4 <MX_USART1_UART_Init+0x90>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002048:	4b1a      	ldr	r3, [pc, #104]	@ (80020b4 <MX_USART1_UART_Init+0x90>)
 800204a:	220c      	movs	r2, #12
 800204c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204e:	4b19      	ldr	r3, [pc, #100]	@ (80020b4 <MX_USART1_UART_Init+0x90>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002054:	4b17      	ldr	r3, [pc, #92]	@ (80020b4 <MX_USART1_UART_Init+0x90>)
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800205a:	4b16      	ldr	r3, [pc, #88]	@ (80020b4 <MX_USART1_UART_Init+0x90>)
 800205c:	2200      	movs	r2, #0
 800205e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002060:	4b14      	ldr	r3, [pc, #80]	@ (80020b4 <MX_USART1_UART_Init+0x90>)
 8002062:	2200      	movs	r2, #0
 8002064:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002066:	4b13      	ldr	r3, [pc, #76]	@ (80020b4 <MX_USART1_UART_Init+0x90>)
 8002068:	2200      	movs	r2, #0
 800206a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800206c:	4811      	ldr	r0, [pc, #68]	@ (80020b4 <MX_USART1_UART_Init+0x90>)
 800206e:	f003 fa35 	bl	80054dc <HAL_UART_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002078:	f000 f89c 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800207c:	2100      	movs	r1, #0
 800207e:	480d      	ldr	r0, [pc, #52]	@ (80020b4 <MX_USART1_UART_Init+0x90>)
 8002080:	f005 fb7f 	bl	8007782 <HAL_UARTEx_SetTxFifoThreshold>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800208a:	f000 f893 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800208e:	2100      	movs	r1, #0
 8002090:	4808      	ldr	r0, [pc, #32]	@ (80020b4 <MX_USART1_UART_Init+0x90>)
 8002092:	f005 fbb4 	bl	80077fe <HAL_UARTEx_SetRxFifoThreshold>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800209c:	f000 f88a 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80020a0:	4804      	ldr	r0, [pc, #16]	@ (80020b4 <MX_USART1_UART_Init+0x90>)
 80020a2:	f005 fb35 	bl	8007710 <HAL_UARTEx_DisableFifoMode>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80020ac:	f000 f882 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000358 	.word	0x20000358
 80020b8:	40013800 	.word	0x40013800

080020bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020c0:	4b22      	ldr	r3, [pc, #136]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020c2:	4a23      	ldr	r2, [pc, #140]	@ (8002150 <MX_USART2_UART_Init+0x94>)
 80020c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020c6:	4b21      	ldr	r3, [pc, #132]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020ce:	4b1f      	ldr	r3, [pc, #124]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020d4:	4b1d      	ldr	r3, [pc, #116]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020da:	4b1c      	ldr	r3, [pc, #112]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020e0:	4b1a      	ldr	r3, [pc, #104]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020e2:	220c      	movs	r2, #12
 80020e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e6:	4b19      	ldr	r3, [pc, #100]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ec:	4b17      	ldr	r3, [pc, #92]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020f2:	4b16      	ldr	r3, [pc, #88]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020f8:	4b14      	ldr	r3, [pc, #80]	@ (800214c <MX_USART2_UART_Init+0x90>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020fe:	4b13      	ldr	r3, [pc, #76]	@ (800214c <MX_USART2_UART_Init+0x90>)
 8002100:	2200      	movs	r2, #0
 8002102:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002104:	4811      	ldr	r0, [pc, #68]	@ (800214c <MX_USART2_UART_Init+0x90>)
 8002106:	f003 f9e9 	bl	80054dc <HAL_UART_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002110:	f000 f850 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002114:	2100      	movs	r1, #0
 8002116:	480d      	ldr	r0, [pc, #52]	@ (800214c <MX_USART2_UART_Init+0x90>)
 8002118:	f005 fb33 	bl	8007782 <HAL_UARTEx_SetTxFifoThreshold>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002122:	f000 f847 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002126:	2100      	movs	r1, #0
 8002128:	4808      	ldr	r0, [pc, #32]	@ (800214c <MX_USART2_UART_Init+0x90>)
 800212a:	f005 fb68 	bl	80077fe <HAL_UARTEx_SetRxFifoThreshold>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002134:	f000 f83e 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002138:	4804      	ldr	r0, [pc, #16]	@ (800214c <MX_USART2_UART_Init+0x90>)
 800213a:	f005 fae9 	bl	8007710 <HAL_UARTEx_DisableFifoMode>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002144:	f000 f836 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	200003ec 	.word	0x200003ec
 8002150:	40004400 	.word	0x40004400

08002154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002168:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <MX_GPIO_Init+0x5c>)
 800216a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216c:	4a10      	ldr	r2, [pc, #64]	@ (80021b0 <MX_GPIO_Init+0x5c>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002174:	4b0e      	ldr	r3, [pc, #56]	@ (80021b0 <MX_GPIO_Init+0x5c>)
 8002176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002180:	2200      	movs	r2, #0
 8002182:	2110      	movs	r1, #16
 8002184:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002188:	f000 ff14 	bl	8002fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800218c:	2310      	movs	r3, #16
 800218e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002190:	2301      	movs	r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	4619      	mov	r1, r3
 80021a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a4:	f000 fd84 	bl	8002cb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021a8:	bf00      	nop
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000

080021b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("error");
 80021bc:	4801      	ldr	r0, [pc, #4]	@ (80021c4 <Error_Handler+0x10>)
 80021be:	f00a f909 	bl	800c3d4 <iprintf>
 80021c2:	e7fb      	b.n	80021bc <Error_Handler+0x8>
 80021c4:	0800f250 	.word	0x0800f250

080021c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ce:	4b0f      	ldr	r3, [pc, #60]	@ (800220c <HAL_MspInit+0x44>)
 80021d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d2:	4a0e      	ldr	r2, [pc, #56]	@ (800220c <HAL_MspInit+0x44>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80021da:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <HAL_MspInit+0x44>)
 80021dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e6:	4b09      	ldr	r3, [pc, #36]	@ (800220c <HAL_MspInit+0x44>)
 80021e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ea:	4a08      	ldr	r2, [pc, #32]	@ (800220c <HAL_MspInit+0x44>)
 80021ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_MspInit+0x44>)
 80021f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80021fe:	f000 ff95 	bl	800312c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000

08002210 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	@ 0x28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a17      	ldr	r2, [pc, #92]	@ (800228c <HAL_SPI_MspInit+0x7c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d128      	bne.n	8002284 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002232:	4b17      	ldr	r3, [pc, #92]	@ (8002290 <HAL_SPI_MspInit+0x80>)
 8002234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002236:	4a16      	ldr	r2, [pc, #88]	@ (8002290 <HAL_SPI_MspInit+0x80>)
 8002238:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800223c:	6613      	str	r3, [r2, #96]	@ 0x60
 800223e:	4b14      	ldr	r3, [pc, #80]	@ (8002290 <HAL_SPI_MspInit+0x80>)
 8002240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002242:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224a:	4b11      	ldr	r3, [pc, #68]	@ (8002290 <HAL_SPI_MspInit+0x80>)
 800224c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224e:	4a10      	ldr	r2, [pc, #64]	@ (8002290 <HAL_SPI_MspInit+0x80>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002256:	4b0e      	ldr	r3, [pc, #56]	@ (8002290 <HAL_SPI_MspInit+0x80>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002262:	23e0      	movs	r3, #224	@ 0xe0
 8002264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002272:	2305      	movs	r3, #5
 8002274:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002276:	f107 0314 	add.w	r3, r7, #20
 800227a:	4619      	mov	r1, r3
 800227c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002280:	f000 fd16 	bl	8002cb0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002284:	bf00      	nop
 8002286:	3728      	adds	r7, #40	@ 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40013000 	.word	0x40013000
 8002290:	40021000 	.word	0x40021000

08002294 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	@ 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022b4:	d128      	bne.n	8002308 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022b6:	4b16      	ldr	r3, [pc, #88]	@ (8002310 <HAL_TIM_Encoder_MspInit+0x7c>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	4a15      	ldr	r2, [pc, #84]	@ (8002310 <HAL_TIM_Encoder_MspInit+0x7c>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c2:	4b13      	ldr	r3, [pc, #76]	@ (8002310 <HAL_TIM_Encoder_MspInit+0x7c>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ce:	4b10      	ldr	r3, [pc, #64]	@ (8002310 <HAL_TIM_Encoder_MspInit+0x7c>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002310 <HAL_TIM_Encoder_MspInit+0x7c>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022da:	4b0d      	ldr	r3, [pc, #52]	@ (8002310 <HAL_TIM_Encoder_MspInit+0x7c>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022e6:	2303      	movs	r3, #3
 80022e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022f6:	2301      	movs	r3, #1
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	4619      	mov	r1, r3
 8002300:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002304:	f000 fcd4 	bl	8002cb0 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002308:	bf00      	nop
 800230a:	3728      	adds	r7, #40	@ 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000

08002314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a1a      	ldr	r2, [pc, #104]	@ (800238c <HAL_TIM_Base_MspInit+0x78>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d114      	bne.n	8002350 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002326:	4b1a      	ldr	r3, [pc, #104]	@ (8002390 <HAL_TIM_Base_MspInit+0x7c>)
 8002328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800232a:	4a19      	ldr	r2, [pc, #100]	@ (8002390 <HAL_TIM_Base_MspInit+0x7c>)
 800232c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002330:	6613      	str	r3, [r2, #96]	@ 0x60
 8002332:	4b17      	ldr	r3, [pc, #92]	@ (8002390 <HAL_TIM_Base_MspInit+0x7c>)
 8002334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	2019      	movs	r0, #25
 8002344:	f000 fbb3 	bl	8002aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002348:	2019      	movs	r0, #25
 800234a:	f000 fbca 	bl	8002ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800234e:	e018      	b.n	8002382 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0f      	ldr	r2, [pc, #60]	@ (8002394 <HAL_TIM_Base_MspInit+0x80>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d113      	bne.n	8002382 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800235a:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <HAL_TIM_Base_MspInit+0x7c>)
 800235c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800235e:	4a0c      	ldr	r2, [pc, #48]	@ (8002390 <HAL_TIM_Base_MspInit+0x7c>)
 8002360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002364:	6613      	str	r3, [r2, #96]	@ 0x60
 8002366:	4b0a      	ldr	r3, [pc, #40]	@ (8002390 <HAL_TIM_Base_MspInit+0x7c>)
 8002368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800236a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2100      	movs	r1, #0
 8002376:	201a      	movs	r0, #26
 8002378:	f000 fb99 	bl	8002aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800237c:	201a      	movs	r0, #26
 800237e:	f000 fbb0 	bl	8002ae2 <HAL_NVIC_EnableIRQ>
}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40014400 	.word	0x40014400
 8002390:	40021000 	.word	0x40021000
 8002394:	40014800 	.word	0x40014800

08002398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b09c      	sub	sp, #112	@ 0x70
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023b0:	f107 0318 	add.w	r3, r7, #24
 80023b4:	2244      	movs	r2, #68	@ 0x44
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f00a fa2f 	bl	800c81c <memset>
  if(huart->Instance==USART1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a46      	ldr	r2, [pc, #280]	@ (80024dc <HAL_UART_MspInit+0x144>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d140      	bne.n	800244a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023c8:	2301      	movs	r3, #1
 80023ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023d0:	f107 0318 	add.w	r3, r7, #24
 80023d4:	4618      	mov	r0, r3
 80023d6:	f001 fbe7 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023e0:	f7ff fee8 	bl	80021b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023e4:	4b3e      	ldr	r3, [pc, #248]	@ (80024e0 <HAL_UART_MspInit+0x148>)
 80023e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e8:	4a3d      	ldr	r2, [pc, #244]	@ (80024e0 <HAL_UART_MspInit+0x148>)
 80023ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80023f0:	4b3b      	ldr	r3, [pc, #236]	@ (80024e0 <HAL_UART_MspInit+0x148>)
 80023f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fc:	4b38      	ldr	r3, [pc, #224]	@ (80024e0 <HAL_UART_MspInit+0x148>)
 80023fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002400:	4a37      	ldr	r2, [pc, #220]	@ (80024e0 <HAL_UART_MspInit+0x148>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002408:	4b35      	ldr	r3, [pc, #212]	@ (80024e0 <HAL_UART_MspInit+0x148>)
 800240a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002414:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002418:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002426:	2307      	movs	r3, #7
 8002428:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800242e:	4619      	mov	r1, r3
 8002430:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002434:	f000 fc3c 	bl	8002cb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002438:	2200      	movs	r2, #0
 800243a:	2100      	movs	r1, #0
 800243c:	2025      	movs	r0, #37	@ 0x25
 800243e:	f000 fb36 	bl	8002aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002442:	2025      	movs	r0, #37	@ 0x25
 8002444:	f000 fb4d 	bl	8002ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002448:	e043      	b.n	80024d2 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a25      	ldr	r2, [pc, #148]	@ (80024e4 <HAL_UART_MspInit+0x14c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d13e      	bne.n	80024d2 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002454:	2302      	movs	r3, #2
 8002456:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002458:	2300      	movs	r3, #0
 800245a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800245c:	f107 0318 	add.w	r3, r7, #24
 8002460:	4618      	mov	r0, r3
 8002462:	f001 fba1 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800246c:	f7ff fea2 	bl	80021b4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002470:	4b1b      	ldr	r3, [pc, #108]	@ (80024e0 <HAL_UART_MspInit+0x148>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002474:	4a1a      	ldr	r2, [pc, #104]	@ (80024e0 <HAL_UART_MspInit+0x148>)
 8002476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800247a:	6593      	str	r3, [r2, #88]	@ 0x58
 800247c:	4b18      	ldr	r3, [pc, #96]	@ (80024e0 <HAL_UART_MspInit+0x148>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002488:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <HAL_UART_MspInit+0x148>)
 800248a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248c:	4a14      	ldr	r2, [pc, #80]	@ (80024e0 <HAL_UART_MspInit+0x148>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002494:	4b12      	ldr	r3, [pc, #72]	@ (80024e0 <HAL_UART_MspInit+0x148>)
 8002496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024a0:	230c      	movs	r3, #12
 80024a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ac:	2300      	movs	r3, #0
 80024ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024b0:	2307      	movs	r3, #7
 80024b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80024b8:	4619      	mov	r1, r3
 80024ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024be:	f000 fbf7 	bl	8002cb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2100      	movs	r1, #0
 80024c6:	2026      	movs	r0, #38	@ 0x26
 80024c8:	f000 faf1 	bl	8002aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024cc:	2026      	movs	r0, #38	@ 0x26
 80024ce:	f000 fb08 	bl	8002ae2 <HAL_NVIC_EnableIRQ>
}
 80024d2:	bf00      	nop
 80024d4:	3770      	adds	r7, #112	@ 0x70
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40013800 	.word	0x40013800
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40004400 	.word	0x40004400

080024e8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
	volatile uint8_t FatFsCnt = 0;
	volatile uint8_t Timer1, Timer2;

	 void SDTimer_Handler(void)
	 {
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
	 	if(Timer1 > 0)
 80024ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <SDTimer_Handler+0x40>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d006      	beq.n	8002504 <SDTimer_Handler+0x1c>
	 		Timer1--;
 80024f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002528 <SDTimer_Handler+0x40>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	4b09      	ldr	r3, [pc, #36]	@ (8002528 <SDTimer_Handler+0x40>)
 8002502:	701a      	strb	r2, [r3, #0]
	 	if(Timer2 > 0)
 8002504:	4b09      	ldr	r3, [pc, #36]	@ (800252c <SDTimer_Handler+0x44>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d006      	beq.n	800251c <SDTimer_Handler+0x34>
	 		Timer2--;
 800250e:	4b07      	ldr	r3, [pc, #28]	@ (800252c <SDTimer_Handler+0x44>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b2da      	uxtb	r2, r3
 8002518:	4b04      	ldr	r3, [pc, #16]	@ (800252c <SDTimer_Handler+0x44>)
 800251a:	701a      	strb	r2, [r3, #0]
	 }
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	200029d1 	.word	0x200029d1
 800252c:	200029d2 	.word	0x200029d2

08002530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <NMI_Handler+0x4>

08002538 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <HardFault_Handler+0x4>

08002540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <MemManage_Handler+0x4>

08002548 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <BusFault_Handler+0x4>

08002550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002554:	bf00      	nop
 8002556:	e7fd      	b.n	8002554 <UsageFault_Handler+0x4>

08002558 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002588:	4b0a      	ldr	r3, [pc, #40]	@ (80025b4 <SysTick_Handler+0x30>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	3301      	adds	r3, #1
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b08      	ldr	r3, [pc, #32]	@ (80025b4 <SysTick_Handler+0x30>)
 8002594:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10){
 8002596:	4b07      	ldr	r3, [pc, #28]	@ (80025b4 <SysTick_Handler+0x30>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b09      	cmp	r3, #9
 800259e:	d904      	bls.n	80025aa <SysTick_Handler+0x26>
		FatFsCnt = 0;
 80025a0:	4b04      	ldr	r3, [pc, #16]	@ (80025b4 <SysTick_Handler+0x30>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
	 	SDTimer_Handler();
 80025a6:	f7ff ff9f 	bl	80024e8 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025aa:	f000 f965 	bl	8002878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200029d0 	.word	0x200029d0

080025b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80025bc:	4802      	ldr	r0, [pc, #8]	@ (80025c8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80025be:	f002 fc8b 	bl	8004ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	200002c0 	.word	0x200002c0

080025cc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80025d0:	4802      	ldr	r0, [pc, #8]	@ (80025dc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80025d2:	f002 fc81 	bl	8004ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	2000030c 	.word	0x2000030c

080025e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025e4:	4802      	ldr	r0, [pc, #8]	@ (80025f0 <USART1_IRQHandler+0x10>)
 80025e6:	f003 f9b1 	bl	800594c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000358 	.word	0x20000358

080025f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025f8:	4802      	ldr	r0, [pc, #8]	@ (8002604 <USART2_IRQHandler+0x10>)
 80025fa:	f003 f9a7 	bl	800594c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200003ec 	.word	0x200003ec

08002608 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return 1;
 800260c:	2301      	movs	r3, #1
}
 800260e:	4618      	mov	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <_kill>:

int _kill(int pid, int sig)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002622:	f00a f95f 	bl	800c8e4 <__errno>
 8002626:	4603      	mov	r3, r0
 8002628:	2216      	movs	r2, #22
 800262a:	601a      	str	r2, [r3, #0]
  return -1;
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <_exit>:

void _exit (int status)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002640:	f04f 31ff 	mov.w	r1, #4294967295
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ffe7 	bl	8002618 <_kill>
  while (1) {}    /* Make sure we hang here */
 800264a:	bf00      	nop
 800264c:	e7fd      	b.n	800264a <_exit+0x12>

0800264e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b086      	sub	sp, #24
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	e00a      	b.n	8002676 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002660:	f3af 8000 	nop.w
 8002664:	4601      	mov	r1, r0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	60ba      	str	r2, [r7, #8]
 800266c:	b2ca      	uxtb	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3301      	adds	r3, #1
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	429a      	cmp	r2, r3
 800267c:	dbf0      	blt.n	8002660 <_read+0x12>
  }

  return len;
 800267e:	687b      	ldr	r3, [r7, #4]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002690:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026b0:	605a      	str	r2, [r3, #4]
  return 0;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <_isatty>:

int _isatty(int file)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026c8:	2301      	movs	r3, #1
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b085      	sub	sp, #20
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026f8:	4a14      	ldr	r2, [pc, #80]	@ (800274c <_sbrk+0x5c>)
 80026fa:	4b15      	ldr	r3, [pc, #84]	@ (8002750 <_sbrk+0x60>)
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002704:	4b13      	ldr	r3, [pc, #76]	@ (8002754 <_sbrk+0x64>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d102      	bne.n	8002712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800270c:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <_sbrk+0x64>)
 800270e:	4a12      	ldr	r2, [pc, #72]	@ (8002758 <_sbrk+0x68>)
 8002710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002712:	4b10      	ldr	r3, [pc, #64]	@ (8002754 <_sbrk+0x64>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	429a      	cmp	r2, r3
 800271e:	d207      	bcs.n	8002730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002720:	f00a f8e0 	bl	800c8e4 <__errno>
 8002724:	4603      	mov	r3, r0
 8002726:	220c      	movs	r2, #12
 8002728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800272a:	f04f 33ff 	mov.w	r3, #4294967295
 800272e:	e009      	b.n	8002744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002730:	4b08      	ldr	r3, [pc, #32]	@ (8002754 <_sbrk+0x64>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002736:	4b07      	ldr	r3, [pc, #28]	@ (8002754 <_sbrk+0x64>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	4a05      	ldr	r2, [pc, #20]	@ (8002754 <_sbrk+0x64>)
 8002740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002742:	68fb      	ldr	r3, [r7, #12]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20008000 	.word	0x20008000
 8002750:	00000400 	.word	0x00000400
 8002754:	200029d4 	.word	0x200029d4
 8002758:	20002d68 	.word	0x20002d68

0800275c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002760:	4b06      	ldr	r3, [pc, #24]	@ (800277c <SystemInit+0x20>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002766:	4a05      	ldr	r2, [pc, #20]	@ (800277c <SystemInit+0x20>)
 8002768:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800276c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002780:	480d      	ldr	r0, [pc, #52]	@ (80027b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002782:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002784:	f7ff ffea 	bl	800275c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002788:	480c      	ldr	r0, [pc, #48]	@ (80027bc <LoopForever+0x6>)
  ldr r1, =_edata
 800278a:	490d      	ldr	r1, [pc, #52]	@ (80027c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800278c:	4a0d      	ldr	r2, [pc, #52]	@ (80027c4 <LoopForever+0xe>)
  movs r3, #0
 800278e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002790:	e002      	b.n	8002798 <LoopCopyDataInit>

08002792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002796:	3304      	adds	r3, #4

08002798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800279a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800279c:	d3f9      	bcc.n	8002792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800279e:	4a0a      	ldr	r2, [pc, #40]	@ (80027c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027a0:	4c0a      	ldr	r4, [pc, #40]	@ (80027cc <LoopForever+0x16>)
  movs r3, #0
 80027a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a4:	e001      	b.n	80027aa <LoopFillZerobss>

080027a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a8:	3204      	adds	r2, #4

080027aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027ac:	d3fb      	bcc.n	80027a6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80027ae:	f00a f89f 	bl	800c8f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027b2:	f7ff fa05 	bl	8001bc0 <main>

080027b6 <LoopForever>:

LoopForever:
    b LoopForever
 80027b6:	e7fe      	b.n	80027b6 <LoopForever>
  ldr   r0, =_estack
 80027b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80027bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027c0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80027c4:	0800fb58 	.word	0x0800fb58
  ldr r2, =_sbss
 80027c8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80027cc:	20002d64 	.word	0x20002d64

080027d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027d0:	e7fe      	b.n	80027d0 <ADC1_2_IRQHandler>

080027d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027dc:	2003      	movs	r0, #3
 80027de:	f000 f95b 	bl	8002a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027e2:	200f      	movs	r0, #15
 80027e4:	f000 f80e 	bl	8002804 <HAL_InitTick>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	71fb      	strb	r3, [r7, #7]
 80027f2:	e001      	b.n	80027f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027f4:	f7ff fce8 	bl	80021c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027f8:	79fb      	ldrb	r3, [r7, #7]

}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002810:	4b16      	ldr	r3, [pc, #88]	@ (800286c <HAL_InitTick+0x68>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d022      	beq.n	800285e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002818:	4b15      	ldr	r3, [pc, #84]	@ (8002870 <HAL_InitTick+0x6c>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b13      	ldr	r3, [pc, #76]	@ (800286c <HAL_InitTick+0x68>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002824:	fbb1 f3f3 	udiv	r3, r1, r3
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	4618      	mov	r0, r3
 800282e:	f000 f966 	bl	8002afe <HAL_SYSTICK_Config>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10f      	bne.n	8002858 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b0f      	cmp	r3, #15
 800283c:	d809      	bhi.n	8002852 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800283e:	2200      	movs	r2, #0
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	f04f 30ff 	mov.w	r0, #4294967295
 8002846:	f000 f932 	bl	8002aae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800284a:	4a0a      	ldr	r2, [pc, #40]	@ (8002874 <HAL_InitTick+0x70>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	e007      	b.n	8002862 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
 8002856:	e004      	b.n	8002862 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
 800285c:	e001      	b.n	8002862 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002862:	7bfb      	ldrb	r3, [r7, #15]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20000010 	.word	0x20000010
 8002870:	20000008 	.word	0x20000008
 8002874:	2000000c 	.word	0x2000000c

08002878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800287c:	4b05      	ldr	r3, [pc, #20]	@ (8002894 <HAL_IncTick+0x1c>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b05      	ldr	r3, [pc, #20]	@ (8002898 <HAL_IncTick+0x20>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4413      	add	r3, r2
 8002886:	4a03      	ldr	r2, [pc, #12]	@ (8002894 <HAL_IncTick+0x1c>)
 8002888:	6013      	str	r3, [r2, #0]
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	200029d8 	.word	0x200029d8
 8002898:	20000010 	.word	0x20000010

0800289c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return uwTick;
 80028a0:	4b03      	ldr	r3, [pc, #12]	@ (80028b0 <HAL_GetTick+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	200029d8 	.word	0x200029d8

080028b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028bc:	f7ff ffee 	bl	800289c <HAL_GetTick>
 80028c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028cc:	d004      	beq.n	80028d8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ce:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <HAL_Delay+0x40>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4413      	add	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028d8:	bf00      	nop
 80028da:	f7ff ffdf 	bl	800289c <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d8f7      	bhi.n	80028da <HAL_Delay+0x26>
  {
  }
}
 80028ea:	bf00      	nop
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000010 	.word	0x20000010

080028f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002908:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <__NVIC_SetPriorityGrouping+0x44>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002914:	4013      	ands	r3, r2
 8002916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002920:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800292a:	4a04      	ldr	r2, [pc, #16]	@ (800293c <__NVIC_SetPriorityGrouping+0x44>)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	60d3      	str	r3, [r2, #12]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002944:	4b04      	ldr	r3, [pc, #16]	@ (8002958 <__NVIC_GetPriorityGrouping+0x18>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	0a1b      	lsrs	r3, r3, #8
 800294a:	f003 0307 	and.w	r3, r3, #7
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	2b00      	cmp	r3, #0
 800296c:	db0b      	blt.n	8002986 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	f003 021f 	and.w	r2, r3, #31
 8002974:	4907      	ldr	r1, [pc, #28]	@ (8002994 <__NVIC_EnableIRQ+0x38>)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	2001      	movs	r0, #1
 800297e:	fa00 f202 	lsl.w	r2, r0, r2
 8002982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	e000e100 	.word	0xe000e100

08002998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	6039      	str	r1, [r7, #0]
 80029a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	db0a      	blt.n	80029c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	490c      	ldr	r1, [pc, #48]	@ (80029e4 <__NVIC_SetPriority+0x4c>)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	0112      	lsls	r2, r2, #4
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	440b      	add	r3, r1
 80029bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029c0:	e00a      	b.n	80029d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	4908      	ldr	r1, [pc, #32]	@ (80029e8 <__NVIC_SetPriority+0x50>)
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	3b04      	subs	r3, #4
 80029d0:	0112      	lsls	r2, r2, #4
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	440b      	add	r3, r1
 80029d6:	761a      	strb	r2, [r3, #24]
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000e100 	.word	0xe000e100
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b089      	sub	sp, #36	@ 0x24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f1c3 0307 	rsb	r3, r3, #7
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	bf28      	it	cs
 8002a0a:	2304      	movcs	r3, #4
 8002a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3304      	adds	r3, #4
 8002a12:	2b06      	cmp	r3, #6
 8002a14:	d902      	bls.n	8002a1c <NVIC_EncodePriority+0x30>
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3b03      	subs	r3, #3
 8002a1a:	e000      	b.n	8002a1e <NVIC_EncodePriority+0x32>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	f04f 32ff 	mov.w	r2, #4294967295
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	401a      	ands	r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a34:	f04f 31ff 	mov.w	r1, #4294967295
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3e:	43d9      	mvns	r1, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	4313      	orrs	r3, r2
         );
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3724      	adds	r7, #36	@ 0x24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a64:	d301      	bcc.n	8002a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a66:	2301      	movs	r3, #1
 8002a68:	e00f      	b.n	8002a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a94 <SysTick_Config+0x40>)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a72:	210f      	movs	r1, #15
 8002a74:	f04f 30ff 	mov.w	r0, #4294967295
 8002a78:	f7ff ff8e 	bl	8002998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a7c:	4b05      	ldr	r3, [pc, #20]	@ (8002a94 <SysTick_Config+0x40>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a82:	4b04      	ldr	r3, [pc, #16]	@ (8002a94 <SysTick_Config+0x40>)
 8002a84:	2207      	movs	r2, #7
 8002a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	e000e010 	.word	0xe000e010

08002a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff ff29 	bl	80028f8 <__NVIC_SetPriorityGrouping>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b086      	sub	sp, #24
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	60b9      	str	r1, [r7, #8]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002abc:	f7ff ff40 	bl	8002940 <__NVIC_GetPriorityGrouping>
 8002ac0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	6978      	ldr	r0, [r7, #20]
 8002ac8:	f7ff ff90 	bl	80029ec <NVIC_EncodePriority>
 8002acc:	4602      	mov	r2, r0
 8002ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff5f 	bl	8002998 <__NVIC_SetPriority>
}
 8002ada:	bf00      	nop
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	4603      	mov	r3, r0
 8002aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ff33 	bl	800295c <__NVIC_EnableIRQ>
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff ffa4 	bl	8002a54 <SysTick_Config>
 8002b0c:	4603      	mov	r3, r0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b085      	sub	sp, #20
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d005      	beq.n	8002b3a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2204      	movs	r2, #4
 8002b32:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
 8002b38:	e037      	b.n	8002baa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 020e 	bic.w	r2, r2, #14
 8002b48:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b58:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0201 	bic.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	f003 021f 	and.w	r2, r3, #31
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	2101      	movs	r1, #1
 8002b78:	fa01 f202 	lsl.w	r2, r1, r2
 8002b7c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b86:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00c      	beq.n	8002baa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b9e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ba8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d00d      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2204      	movs	r2, #4
 8002be4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
 8002bfa:	e047      	b.n	8002c8c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 020e 	bic.w	r2, r2, #14
 8002c0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c30:	f003 021f 	and.w	r2, r3, #31
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	2101      	movs	r1, #1
 8002c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c48:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00c      	beq.n	8002c6c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c60:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002c6a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	4798      	blx	r3
    }
  }
  return status;
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002cbe:	e15a      	b.n	8002f76 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 814c 	beq.w	8002f70 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d005      	beq.n	8002cf0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d130      	bne.n	8002d52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4013      	ands	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d26:	2201      	movs	r2, #1
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4013      	ands	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	091b      	lsrs	r3, r3, #4
 8002d3c:	f003 0201 	and.w	r2, r3, #1
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d017      	beq.n	8002d8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	2203      	movs	r2, #3
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d123      	bne.n	8002de2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	08da      	lsrs	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3208      	adds	r2, #8
 8002da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	220f      	movs	r2, #15
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	08da      	lsrs	r2, r3, #3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3208      	adds	r2, #8
 8002ddc:	6939      	ldr	r1, [r7, #16]
 8002dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	2203      	movs	r2, #3
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4013      	ands	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0203 	and.w	r2, r3, #3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80a6 	beq.w	8002f70 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e24:	4b5b      	ldr	r3, [pc, #364]	@ (8002f94 <HAL_GPIO_Init+0x2e4>)
 8002e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e28:	4a5a      	ldr	r2, [pc, #360]	@ (8002f94 <HAL_GPIO_Init+0x2e4>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e30:	4b58      	ldr	r3, [pc, #352]	@ (8002f94 <HAL_GPIO_Init+0x2e4>)
 8002e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e3c:	4a56      	ldr	r2, [pc, #344]	@ (8002f98 <HAL_GPIO_Init+0x2e8>)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	3302      	adds	r3, #2
 8002e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	220f      	movs	r2, #15
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e66:	d01f      	beq.n	8002ea8 <HAL_GPIO_Init+0x1f8>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a4c      	ldr	r2, [pc, #304]	@ (8002f9c <HAL_GPIO_Init+0x2ec>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d019      	beq.n	8002ea4 <HAL_GPIO_Init+0x1f4>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a4b      	ldr	r2, [pc, #300]	@ (8002fa0 <HAL_GPIO_Init+0x2f0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d013      	beq.n	8002ea0 <HAL_GPIO_Init+0x1f0>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a4a      	ldr	r2, [pc, #296]	@ (8002fa4 <HAL_GPIO_Init+0x2f4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00d      	beq.n	8002e9c <HAL_GPIO_Init+0x1ec>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a49      	ldr	r2, [pc, #292]	@ (8002fa8 <HAL_GPIO_Init+0x2f8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d007      	beq.n	8002e98 <HAL_GPIO_Init+0x1e8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a48      	ldr	r2, [pc, #288]	@ (8002fac <HAL_GPIO_Init+0x2fc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d101      	bne.n	8002e94 <HAL_GPIO_Init+0x1e4>
 8002e90:	2305      	movs	r3, #5
 8002e92:	e00a      	b.n	8002eaa <HAL_GPIO_Init+0x1fa>
 8002e94:	2306      	movs	r3, #6
 8002e96:	e008      	b.n	8002eaa <HAL_GPIO_Init+0x1fa>
 8002e98:	2304      	movs	r3, #4
 8002e9a:	e006      	b.n	8002eaa <HAL_GPIO_Init+0x1fa>
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e004      	b.n	8002eaa <HAL_GPIO_Init+0x1fa>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e002      	b.n	8002eaa <HAL_GPIO_Init+0x1fa>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <HAL_GPIO_Init+0x1fa>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	f002 0203 	and.w	r2, r2, #3
 8002eb0:	0092      	lsls	r2, r2, #2
 8002eb2:	4093      	lsls	r3, r2
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eba:	4937      	ldr	r1, [pc, #220]	@ (8002f98 <HAL_GPIO_Init+0x2e8>)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	089b      	lsrs	r3, r3, #2
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ec8:	4b39      	ldr	r3, [pc, #228]	@ (8002fb0 <HAL_GPIO_Init+0x300>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002eec:	4a30      	ldr	r2, [pc, #192]	@ (8002fb0 <HAL_GPIO_Init+0x300>)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8002fb0 <HAL_GPIO_Init+0x300>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4013      	ands	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f16:	4a26      	ldr	r2, [pc, #152]	@ (8002fb0 <HAL_GPIO_Init+0x300>)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002f1c:	4b24      	ldr	r3, [pc, #144]	@ (8002fb0 <HAL_GPIO_Init+0x300>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f40:	4a1b      	ldr	r2, [pc, #108]	@ (8002fb0 <HAL_GPIO_Init+0x300>)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f46:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb0 <HAL_GPIO_Init+0x300>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4013      	ands	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f6a:	4a11      	ldr	r2, [pc, #68]	@ (8002fb0 <HAL_GPIO_Init+0x300>)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	3301      	adds	r3, #1
 8002f74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f47f ae9d 	bne.w	8002cc0 <HAL_GPIO_Init+0x10>
  }
}
 8002f86:	bf00      	nop
 8002f88:	bf00      	nop
 8002f8a:	371c      	adds	r7, #28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40010000 	.word	0x40010000
 8002f9c:	48000400 	.word	0x48000400
 8002fa0:	48000800 	.word	0x48000800
 8002fa4:	48000c00 	.word	0x48000c00
 8002fa8:	48001000 	.word	0x48001000
 8002fac:	48001400 	.word	0x48001400
 8002fb0:	40010400 	.word	0x40010400

08002fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	807b      	strh	r3, [r7, #2]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fc4:	787b      	ldrb	r3, [r7, #1]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fca:	887a      	ldrh	r2, [r7, #2]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fd0:	e002      	b.n	8002fd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fd2:	887a      	ldrh	r2, [r7, #2]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d141      	bne.n	8003076 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ff2:	4b4b      	ldr	r3, [pc, #300]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ffe:	d131      	bne.n	8003064 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003000:	4b47      	ldr	r3, [pc, #284]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003006:	4a46      	ldr	r2, [pc, #280]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800300c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003010:	4b43      	ldr	r3, [pc, #268]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003018:	4a41      	ldr	r2, [pc, #260]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800301e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003020:	4b40      	ldr	r3, [pc, #256]	@ (8003124 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2232      	movs	r2, #50	@ 0x32
 8003026:	fb02 f303 	mul.w	r3, r2, r3
 800302a:	4a3f      	ldr	r2, [pc, #252]	@ (8003128 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800302c:	fba2 2303 	umull	r2, r3, r2, r3
 8003030:	0c9b      	lsrs	r3, r3, #18
 8003032:	3301      	adds	r3, #1
 8003034:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003036:	e002      	b.n	800303e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	3b01      	subs	r3, #1
 800303c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800303e:	4b38      	ldr	r3, [pc, #224]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800304a:	d102      	bne.n	8003052 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f2      	bne.n	8003038 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003052:	4b33      	ldr	r3, [pc, #204]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800305a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800305e:	d158      	bne.n	8003112 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e057      	b.n	8003114 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003064:	4b2e      	ldr	r3, [pc, #184]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800306a:	4a2d      	ldr	r2, [pc, #180]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003070:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003074:	e04d      	b.n	8003112 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800307c:	d141      	bne.n	8003102 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800307e:	4b28      	ldr	r3, [pc, #160]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800308a:	d131      	bne.n	80030f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800308c:	4b24      	ldr	r3, [pc, #144]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003092:	4a23      	ldr	r2, [pc, #140]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003098:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800309c:	4b20      	ldr	r3, [pc, #128]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003124 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2232      	movs	r2, #50	@ 0x32
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003128 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	0c9b      	lsrs	r3, r3, #18
 80030be:	3301      	adds	r3, #1
 80030c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030c2:	e002      	b.n	80030ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ca:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030d6:	d102      	bne.n	80030de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f2      	bne.n	80030c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030de:	4b10      	ldr	r3, [pc, #64]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ea:	d112      	bne.n	8003112 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e011      	b.n	8003114 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003100:	e007      	b.n	8003112 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003102:	4b07      	ldr	r3, [pc, #28]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800310a:	4a05      	ldr	r2, [pc, #20]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800310c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003110:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	40007000 	.word	0x40007000
 8003124:	20000008 	.word	0x20000008
 8003128:	431bde83 	.word	0x431bde83

0800312c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003130:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a04      	ldr	r2, [pc, #16]	@ (8003148 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003136:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800313a:	6093      	str	r3, [r2, #8]
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40007000 	.word	0x40007000

0800314c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e2fe      	b.n	800375c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d075      	beq.n	8003256 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800316a:	4b97      	ldr	r3, [pc, #604]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003174:	4b94      	ldr	r3, [pc, #592]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b0c      	cmp	r3, #12
 8003182:	d102      	bne.n	800318a <HAL_RCC_OscConfig+0x3e>
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2b03      	cmp	r3, #3
 8003188:	d002      	beq.n	8003190 <HAL_RCC_OscConfig+0x44>
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	2b08      	cmp	r3, #8
 800318e:	d10b      	bne.n	80031a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	4b8d      	ldr	r3, [pc, #564]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d05b      	beq.n	8003254 <HAL_RCC_OscConfig+0x108>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d157      	bne.n	8003254 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e2d9      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b0:	d106      	bne.n	80031c0 <HAL_RCC_OscConfig+0x74>
 80031b2:	4b85      	ldr	r3, [pc, #532]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a84      	ldr	r2, [pc, #528]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e01d      	b.n	80031fc <HAL_RCC_OscConfig+0xb0>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x98>
 80031ca:	4b7f      	ldr	r3, [pc, #508]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a7e      	ldr	r2, [pc, #504]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	4b7c      	ldr	r3, [pc, #496]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a7b      	ldr	r2, [pc, #492]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	e00b      	b.n	80031fc <HAL_RCC_OscConfig+0xb0>
 80031e4:	4b78      	ldr	r3, [pc, #480]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a77      	ldr	r2, [pc, #476]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	4b75      	ldr	r3, [pc, #468]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a74      	ldr	r2, [pc, #464]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80031f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d013      	beq.n	800322c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7ff fb4a 	bl	800289c <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800320c:	f7ff fb46 	bl	800289c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	@ 0x64
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e29e      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800321e:	4b6a      	ldr	r3, [pc, #424]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0xc0>
 800322a:	e014      	b.n	8003256 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322c:	f7ff fb36 	bl	800289c <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003234:	f7ff fb32 	bl	800289c <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b64      	cmp	r3, #100	@ 0x64
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e28a      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003246:	4b60      	ldr	r3, [pc, #384]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f0      	bne.n	8003234 <HAL_RCC_OscConfig+0xe8>
 8003252:	e000      	b.n	8003256 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d075      	beq.n	800334e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003262:	4b59      	ldr	r3, [pc, #356]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800326c:	4b56      	ldr	r3, [pc, #344]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	2b0c      	cmp	r3, #12
 800327a:	d102      	bne.n	8003282 <HAL_RCC_OscConfig+0x136>
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d002      	beq.n	8003288 <HAL_RCC_OscConfig+0x13c>
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	2b04      	cmp	r3, #4
 8003286:	d11f      	bne.n	80032c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003288:	4b4f      	ldr	r3, [pc, #316]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_OscConfig+0x154>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e25d      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a0:	4b49      	ldr	r3, [pc, #292]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	061b      	lsls	r3, r3, #24
 80032ae:	4946      	ldr	r1, [pc, #280]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032b4:	4b45      	ldr	r3, [pc, #276]	@ (80033cc <HAL_RCC_OscConfig+0x280>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff faa3 	bl	8002804 <HAL_InitTick>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d043      	beq.n	800334c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e249      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d023      	beq.n	8003318 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d0:	4b3d      	ldr	r3, [pc, #244]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a3c      	ldr	r2, [pc, #240]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80032d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7ff fade 	bl	800289c <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e4:	f7ff fada 	bl	800289c <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e232      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f6:	4b34      	ldr	r3, [pc, #208]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003302:	4b31      	ldr	r3, [pc, #196]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	061b      	lsls	r3, r3, #24
 8003310:	492d      	ldr	r1, [pc, #180]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 8003312:	4313      	orrs	r3, r2
 8003314:	604b      	str	r3, [r1, #4]
 8003316:	e01a      	b.n	800334e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003318:	4b2b      	ldr	r3, [pc, #172]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a2a      	ldr	r2, [pc, #168]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 800331e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7ff faba 	bl	800289c <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332c:	f7ff fab6 	bl	800289c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e20e      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800333e:	4b22      	ldr	r3, [pc, #136]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x1e0>
 800334a:	e000      	b.n	800334e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800334c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d041      	beq.n	80033de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d01c      	beq.n	800339c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003362:	4b19      	ldr	r3, [pc, #100]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 8003364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003368:	4a17      	ldr	r2, [pc, #92]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003372:	f7ff fa93 	bl	800289c <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337a:	f7ff fa8f 	bl	800289c <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e1e7      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800338c:	4b0e      	ldr	r3, [pc, #56]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 800338e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0ef      	beq.n	800337a <HAL_RCC_OscConfig+0x22e>
 800339a:	e020      	b.n	80033de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800339c:	4b0a      	ldr	r3, [pc, #40]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 800339e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033a2:	4a09      	ldr	r2, [pc, #36]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80033a4:	f023 0301 	bic.w	r3, r3, #1
 80033a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ac:	f7ff fa76 	bl	800289c <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033b2:	e00d      	b.n	80033d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b4:	f7ff fa72 	bl	800289c <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d906      	bls.n	80033d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e1ca      	b.n	800375c <HAL_RCC_OscConfig+0x610>
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000
 80033cc:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033d0:	4b8c      	ldr	r3, [pc, #560]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80033d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1ea      	bne.n	80033b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80a6 	beq.w	8003538 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ec:	2300      	movs	r3, #0
 80033ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033f0:	4b84      	ldr	r3, [pc, #528]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80033f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_RCC_OscConfig+0x2b4>
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0x2b6>
 8003400:	2300      	movs	r3, #0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00d      	beq.n	8003422 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003406:	4b7f      	ldr	r3, [pc, #508]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 8003408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340a:	4a7e      	ldr	r2, [pc, #504]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 800340c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003410:	6593      	str	r3, [r2, #88]	@ 0x58
 8003412:	4b7c      	ldr	r3, [pc, #496]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 8003414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800341e:	2301      	movs	r3, #1
 8003420:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003422:	4b79      	ldr	r3, [pc, #484]	@ (8003608 <HAL_RCC_OscConfig+0x4bc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d118      	bne.n	8003460 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800342e:	4b76      	ldr	r3, [pc, #472]	@ (8003608 <HAL_RCC_OscConfig+0x4bc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a75      	ldr	r2, [pc, #468]	@ (8003608 <HAL_RCC_OscConfig+0x4bc>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343a:	f7ff fa2f 	bl	800289c <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003442:	f7ff fa2b 	bl	800289c <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e183      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003454:	4b6c      	ldr	r3, [pc, #432]	@ (8003608 <HAL_RCC_OscConfig+0x4bc>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d108      	bne.n	800347a <HAL_RCC_OscConfig+0x32e>
 8003468:	4b66      	ldr	r3, [pc, #408]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346e:	4a65      	ldr	r2, [pc, #404]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003478:	e024      	b.n	80034c4 <HAL_RCC_OscConfig+0x378>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b05      	cmp	r3, #5
 8003480:	d110      	bne.n	80034a4 <HAL_RCC_OscConfig+0x358>
 8003482:	4b60      	ldr	r3, [pc, #384]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003488:	4a5e      	ldr	r2, [pc, #376]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 800348a:	f043 0304 	orr.w	r3, r3, #4
 800348e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003492:	4b5c      	ldr	r3, [pc, #368]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003498:	4a5a      	ldr	r2, [pc, #360]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034a2:	e00f      	b.n	80034c4 <HAL_RCC_OscConfig+0x378>
 80034a4:	4b57      	ldr	r3, [pc, #348]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034aa:	4a56      	ldr	r2, [pc, #344]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034b4:	4b53      	ldr	r3, [pc, #332]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ba:	4a52      	ldr	r2, [pc, #328]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80034bc:	f023 0304 	bic.w	r3, r3, #4
 80034c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d016      	beq.n	80034fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034cc:	f7ff f9e6 	bl	800289c <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d2:	e00a      	b.n	80034ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d4:	f7ff f9e2 	bl	800289c <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e138      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ea:	4b46      	ldr	r3, [pc, #280]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ed      	beq.n	80034d4 <HAL_RCC_OscConfig+0x388>
 80034f8:	e015      	b.n	8003526 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fa:	f7ff f9cf 	bl	800289c <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003500:	e00a      	b.n	8003518 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003502:	f7ff f9cb 	bl	800289c <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003510:	4293      	cmp	r3, r2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e121      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003518:	4b3a      	ldr	r3, [pc, #232]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1ed      	bne.n	8003502 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003526:	7ffb      	ldrb	r3, [r7, #31]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d105      	bne.n	8003538 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800352c:	4b35      	ldr	r3, [pc, #212]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 800352e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003530:	4a34      	ldr	r2, [pc, #208]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 8003532:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003536:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b00      	cmp	r3, #0
 8003542:	d03c      	beq.n	80035be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01c      	beq.n	8003586 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800354c:	4b2d      	ldr	r3, [pc, #180]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 800354e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003552:	4a2c      	ldr	r2, [pc, #176]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7ff f99e 	bl	800289c <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003564:	f7ff f99a 	bl	800289c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e0f2      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003576:	4b23      	ldr	r3, [pc, #140]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 8003578:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ef      	beq.n	8003564 <HAL_RCC_OscConfig+0x418>
 8003584:	e01b      	b.n	80035be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003586:	4b1f      	ldr	r3, [pc, #124]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 8003588:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800358c:	4a1d      	ldr	r2, [pc, #116]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 800358e:	f023 0301 	bic.w	r3, r3, #1
 8003592:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003596:	f7ff f981 	bl	800289c <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800359e:	f7ff f97d 	bl	800289c <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e0d5      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035b0:	4b14      	ldr	r3, [pc, #80]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80035b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1ef      	bne.n	800359e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80c9 	beq.w	800375a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 030c 	and.w	r3, r3, #12
 80035d0:	2b0c      	cmp	r3, #12
 80035d2:	f000 8083 	beq.w	80036dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d15e      	bne.n	800369c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035de:	4b09      	ldr	r3, [pc, #36]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a08      	ldr	r2, [pc, #32]	@ (8003604 <HAL_RCC_OscConfig+0x4b8>)
 80035e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ea:	f7ff f957 	bl	800289c <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f0:	e00c      	b.n	800360c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f2:	f7ff f953 	bl	800289c <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d905      	bls.n	800360c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e0ab      	b.n	800375c <HAL_RCC_OscConfig+0x610>
 8003604:	40021000 	.word	0x40021000
 8003608:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360c:	4b55      	ldr	r3, [pc, #340]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1ec      	bne.n	80035f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003618:	4b52      	ldr	r3, [pc, #328]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	4b52      	ldr	r3, [pc, #328]	@ (8003768 <HAL_RCC_OscConfig+0x61c>)
 800361e:	4013      	ands	r3, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6a11      	ldr	r1, [r2, #32]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003628:	3a01      	subs	r2, #1
 800362a:	0112      	lsls	r2, r2, #4
 800362c:	4311      	orrs	r1, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003632:	0212      	lsls	r2, r2, #8
 8003634:	4311      	orrs	r1, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800363a:	0852      	lsrs	r2, r2, #1
 800363c:	3a01      	subs	r2, #1
 800363e:	0552      	lsls	r2, r2, #21
 8003640:	4311      	orrs	r1, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003646:	0852      	lsrs	r2, r2, #1
 8003648:	3a01      	subs	r2, #1
 800364a:	0652      	lsls	r2, r2, #25
 800364c:	4311      	orrs	r1, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003652:	06d2      	lsls	r2, r2, #27
 8003654:	430a      	orrs	r2, r1
 8003656:	4943      	ldr	r1, [pc, #268]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 8003658:	4313      	orrs	r3, r2
 800365a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800365c:	4b41      	ldr	r3, [pc, #260]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a40      	ldr	r2, [pc, #256]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 8003662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003666:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003668:	4b3e      	ldr	r3, [pc, #248]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4a3d      	ldr	r2, [pc, #244]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 800366e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003672:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003674:	f7ff f912 	bl	800289c <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367c:	f7ff f90e 	bl	800289c <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e066      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800368e:	4b35      	ldr	r3, [pc, #212]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x530>
 800369a:	e05e      	b.n	800375a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369c:	4b31      	ldr	r3, [pc, #196]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a30      	ldr	r2, [pc, #192]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 80036a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7ff f8f8 	bl	800289c <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b0:	f7ff f8f4 	bl	800289c <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e04c      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c2:	4b28      	ldr	r3, [pc, #160]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80036ce:	4b25      	ldr	r3, [pc, #148]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	4924      	ldr	r1, [pc, #144]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 80036d4:	4b25      	ldr	r3, [pc, #148]	@ (800376c <HAL_RCC_OscConfig+0x620>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	60cb      	str	r3, [r1, #12]
 80036da:	e03e      	b.n	800375a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e039      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80036e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003764 <HAL_RCC_OscConfig+0x618>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f003 0203 	and.w	r2, r3, #3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d12c      	bne.n	8003756 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	3b01      	subs	r3, #1
 8003708:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d123      	bne.n	8003756 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003718:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800371a:	429a      	cmp	r2, r3
 800371c:	d11b      	bne.n	8003756 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003728:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800372a:	429a      	cmp	r2, r3
 800372c:	d113      	bne.n	8003756 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003738:	085b      	lsrs	r3, r3, #1
 800373a:	3b01      	subs	r3, #1
 800373c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d109      	bne.n	8003756 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	3b01      	subs	r3, #1
 8003750:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003752:	429a      	cmp	r2, r3
 8003754:	d001      	beq.n	800375a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3720      	adds	r7, #32
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021000 	.word	0x40021000
 8003768:	019f800c 	.word	0x019f800c
 800376c:	feeefffc 	.word	0xfeeefffc

08003770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e11e      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003788:	4b91      	ldr	r3, [pc, #580]	@ (80039d0 <HAL_RCC_ClockConfig+0x260>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d910      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	4b8e      	ldr	r3, [pc, #568]	@ (80039d0 <HAL_RCC_ClockConfig+0x260>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 020f 	bic.w	r2, r3, #15
 800379e:	498c      	ldr	r1, [pc, #560]	@ (80039d0 <HAL_RCC_ClockConfig+0x260>)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b8a      	ldr	r3, [pc, #552]	@ (80039d0 <HAL_RCC_ClockConfig+0x260>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e106      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d073      	beq.n	80038ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d129      	bne.n	8003820 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037cc:	4b81      	ldr	r3, [pc, #516]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0f4      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80037dc:	f000 f99e 	bl	8003b1c <RCC_GetSysClockFreqFromPLLSource>
 80037e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4a7c      	ldr	r2, [pc, #496]	@ (80039d8 <HAL_RCC_ClockConfig+0x268>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d93f      	bls.n	800386a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037ea:	4b7a      	ldr	r3, [pc, #488]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d033      	beq.n	800386a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003806:	2b00      	cmp	r3, #0
 8003808:	d12f      	bne.n	800386a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800380a:	4b72      	ldr	r3, [pc, #456]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003812:	4a70      	ldr	r2, [pc, #448]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003818:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800381a:	2380      	movs	r3, #128	@ 0x80
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	e024      	b.n	800386a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d107      	bne.n	8003838 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003828:	4b6a      	ldr	r3, [pc, #424]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d109      	bne.n	8003848 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0c6      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003838:	4b66      	ldr	r3, [pc, #408]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0be      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003848:	f000 f8ce 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 800384c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4a61      	ldr	r2, [pc, #388]	@ (80039d8 <HAL_RCC_ClockConfig+0x268>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d909      	bls.n	800386a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003856:	4b5f      	ldr	r3, [pc, #380]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800385e:	4a5d      	ldr	r2, [pc, #372]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003864:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003866:	2380      	movs	r3, #128	@ 0x80
 8003868:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800386a:	4b5a      	ldr	r3, [pc, #360]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f023 0203 	bic.w	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4957      	ldr	r1, [pc, #348]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003878:	4313      	orrs	r3, r2
 800387a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800387c:	f7ff f80e 	bl	800289c <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	e00a      	b.n	800389a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003884:	f7ff f80a 	bl	800289c <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e095      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389a:	4b4e      	ldr	r3, [pc, #312]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 020c 	and.w	r2, r3, #12
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d1eb      	bne.n	8003884 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d023      	beq.n	8003900 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c4:	4b43      	ldr	r3, [pc, #268]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4a42      	ldr	r2, [pc, #264]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80038ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80038dc:	4b3d      	ldr	r3, [pc, #244]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80038e4:	4a3b      	ldr	r2, [pc, #236]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80038e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ec:	4b39      	ldr	r3, [pc, #228]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	4936      	ldr	r1, [pc, #216]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	608b      	str	r3, [r1, #8]
 80038fe:	e008      	b.n	8003912 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2b80      	cmp	r3, #128	@ 0x80
 8003904:	d105      	bne.n	8003912 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003906:	4b33      	ldr	r3, [pc, #204]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	4a32      	ldr	r2, [pc, #200]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800390c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003910:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003912:	4b2f      	ldr	r3, [pc, #188]	@ (80039d0 <HAL_RCC_ClockConfig+0x260>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d21d      	bcs.n	800395c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003920:	4b2b      	ldr	r3, [pc, #172]	@ (80039d0 <HAL_RCC_ClockConfig+0x260>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f023 020f 	bic.w	r2, r3, #15
 8003928:	4929      	ldr	r1, [pc, #164]	@ (80039d0 <HAL_RCC_ClockConfig+0x260>)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	4313      	orrs	r3, r2
 800392e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003930:	f7fe ffb4 	bl	800289c <HAL_GetTick>
 8003934:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	e00a      	b.n	800394e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003938:	f7fe ffb0 	bl	800289c <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e03b      	b.n	80039c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394e:	4b20      	ldr	r3, [pc, #128]	@ (80039d0 <HAL_RCC_ClockConfig+0x260>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d1ed      	bne.n	8003938 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003968:	4b1a      	ldr	r3, [pc, #104]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4917      	ldr	r1, [pc, #92]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003986:	4b13      	ldr	r3, [pc, #76]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	490f      	ldr	r1, [pc, #60]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800399a:	f000 f825 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 800399e:	4602      	mov	r2, r0
 80039a0:	4b0c      	ldr	r3, [pc, #48]	@ (80039d4 <HAL_RCC_ClockConfig+0x264>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	490c      	ldr	r1, [pc, #48]	@ (80039dc <HAL_RCC_ClockConfig+0x26c>)
 80039ac:	5ccb      	ldrb	r3, [r1, r3]
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	fa22 f303 	lsr.w	r3, r2, r3
 80039b6:	4a0a      	ldr	r2, [pc, #40]	@ (80039e0 <HAL_RCC_ClockConfig+0x270>)
 80039b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039ba:	4b0a      	ldr	r3, [pc, #40]	@ (80039e4 <HAL_RCC_ClockConfig+0x274>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fe ff20 	bl	8002804 <HAL_InitTick>
 80039c4:	4603      	mov	r3, r0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40022000 	.word	0x40022000
 80039d4:	40021000 	.word	0x40021000
 80039d8:	04c4b400 	.word	0x04c4b400
 80039dc:	0800f2a0 	.word	0x0800f2a0
 80039e0:	20000008 	.word	0x20000008
 80039e4:	2000000c 	.word	0x2000000c

080039e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039ee:	4b2c      	ldr	r3, [pc, #176]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d102      	bne.n	8003a00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039fa:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	e047      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a00:	4b27      	ldr	r3, [pc, #156]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d102      	bne.n	8003a12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a0c:	4b26      	ldr	r3, [pc, #152]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	e03e      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a12:	4b23      	ldr	r3, [pc, #140]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d136      	bne.n	8003a8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a1e:	4b20      	ldr	r3, [pc, #128]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a28:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	091b      	lsrs	r3, r3, #4
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	3301      	adds	r3, #1
 8003a34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d10c      	bne.n	8003a56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a44:	4a16      	ldr	r2, [pc, #88]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a46:	68d2      	ldr	r2, [r2, #12]
 8003a48:	0a12      	lsrs	r2, r2, #8
 8003a4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	617b      	str	r3, [r7, #20]
      break;
 8003a54:	e00c      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a56:	4a13      	ldr	r2, [pc, #76]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5e:	4a10      	ldr	r2, [pc, #64]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a60:	68d2      	ldr	r2, [r2, #12]
 8003a62:	0a12      	lsrs	r2, r2, #8
 8003a64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a68:	fb02 f303 	mul.w	r3, r2, r3
 8003a6c:	617b      	str	r3, [r7, #20]
      break;
 8003a6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a70:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	0e5b      	lsrs	r3, r3, #25
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	e001      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a90:	693b      	ldr	r3, [r7, #16]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	00f42400 	.word	0x00f42400
 8003aa8:	007a1200 	.word	0x007a1200

08003aac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab0:	4b03      	ldr	r3, [pc, #12]	@ (8003ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20000008 	.word	0x20000008

08003ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ac8:	f7ff fff0 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8003acc:	4602      	mov	r2, r0
 8003ace:	4b06      	ldr	r3, [pc, #24]	@ (8003ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	4904      	ldr	r1, [pc, #16]	@ (8003aec <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ada:	5ccb      	ldrb	r3, [r1, r3]
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	0800f2b0 	.word	0x0800f2b0

08003af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003af4:	f7ff ffda 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8003af8:	4602      	mov	r2, r0
 8003afa:	4b06      	ldr	r3, [pc, #24]	@ (8003b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	0adb      	lsrs	r3, r3, #11
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	4904      	ldr	r1, [pc, #16]	@ (8003b18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b06:	5ccb      	ldrb	r3, [r1, r3]
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000
 8003b18:	0800f2b0 	.word	0x0800f2b0

08003b1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b22:	4b1e      	ldr	r3, [pc, #120]	@ (8003b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	091b      	lsrs	r3, r3, #4
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	3301      	adds	r3, #1
 8003b38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d10c      	bne.n	8003b5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b40:	4a17      	ldr	r2, [pc, #92]	@ (8003ba0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b48:	4a14      	ldr	r2, [pc, #80]	@ (8003b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b4a:	68d2      	ldr	r2, [r2, #12]
 8003b4c:	0a12      	lsrs	r2, r2, #8
 8003b4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b52:	fb02 f303 	mul.w	r3, r2, r3
 8003b56:	617b      	str	r3, [r7, #20]
    break;
 8003b58:	e00c      	b.n	8003b74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b5a:	4a12      	ldr	r2, [pc, #72]	@ (8003ba4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b62:	4a0e      	ldr	r2, [pc, #56]	@ (8003b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b64:	68d2      	ldr	r2, [r2, #12]
 8003b66:	0a12      	lsrs	r2, r2, #8
 8003b68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b6c:	fb02 f303 	mul.w	r3, r2, r3
 8003b70:	617b      	str	r3, [r7, #20]
    break;
 8003b72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b74:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	0e5b      	lsrs	r3, r3, #25
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	3301      	adds	r3, #1
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b8e:	687b      	ldr	r3, [r7, #4]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	007a1200 	.word	0x007a1200
 8003ba4:	00f42400 	.word	0x00f42400

08003ba8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8098 	beq.w	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bca:	4b43      	ldr	r3, [pc, #268]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10d      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd6:	4b40      	ldr	r3, [pc, #256]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bda:	4a3f      	ldr	r2, [pc, #252]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003be2:	4b3d      	ldr	r3, [pc, #244]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bf2:	4b3a      	ldr	r3, [pc, #232]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a39      	ldr	r2, [pc, #228]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bfe:	f7fe fe4d 	bl	800289c <HAL_GetTick>
 8003c02:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c04:	e009      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c06:	f7fe fe49 	bl	800289c <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d902      	bls.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	74fb      	strb	r3, [r7, #19]
        break;
 8003c18:	e005      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c1a:	4b30      	ldr	r3, [pc, #192]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0ef      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c26:	7cfb      	ldrb	r3, [r7, #19]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d159      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c36:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d01e      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d019      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c48:	4b23      	ldr	r3, [pc, #140]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c54:	4b20      	ldr	r3, [pc, #128]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c64:	4b1c      	ldr	r3, [pc, #112]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c74:	4a18      	ldr	r2, [pc, #96]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d016      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c86:	f7fe fe09 	bl	800289c <HAL_GetTick>
 8003c8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c8c:	e00b      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8e:	f7fe fe05 	bl	800289c <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d902      	bls.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ca4:	e006      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ec      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10b      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cba:	4b07      	ldr	r3, [pc, #28]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc8:	4903      	ldr	r1, [pc, #12]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cd2:	7cfb      	ldrb	r3, [r7, #19]
 8003cd4:	74bb      	strb	r3, [r7, #18]
 8003cd6:	e005      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	7cfb      	ldrb	r3, [r7, #19]
 8003ce2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ce4:	7c7b      	ldrb	r3, [r7, #17]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d105      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cea:	4ba6      	ldr	r3, [pc, #664]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cee:	4aa5      	ldr	r2, [pc, #660]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cf4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d02:	4ba0      	ldr	r3, [pc, #640]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d08:	f023 0203 	bic.w	r2, r3, #3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	499c      	ldr	r1, [pc, #624]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d24:	4b97      	ldr	r3, [pc, #604]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2a:	f023 020c 	bic.w	r2, r3, #12
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	4994      	ldr	r1, [pc, #592]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d46:	4b8f      	ldr	r3, [pc, #572]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	498b      	ldr	r1, [pc, #556]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d68:	4b86      	ldr	r3, [pc, #536]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	4983      	ldr	r1, [pc, #524]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d8a:	4b7e      	ldr	r3, [pc, #504]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d90:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	497a      	ldr	r1, [pc, #488]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dac:	4b75      	ldr	r3, [pc, #468]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	4972      	ldr	r1, [pc, #456]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dce:	4b6d      	ldr	r3, [pc, #436]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	4969      	ldr	r1, [pc, #420]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003df0:	4b64      	ldr	r3, [pc, #400]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	4961      	ldr	r1, [pc, #388]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e12:	4b5c      	ldr	r3, [pc, #368]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e20:	4958      	ldr	r1, [pc, #352]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d015      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e34:	4b53      	ldr	r3, [pc, #332]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e42:	4950      	ldr	r1, [pc, #320]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e52:	d105      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e54:	4b4b      	ldr	r3, [pc, #300]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	4a4a      	ldr	r2, [pc, #296]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e5e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d015      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e6c:	4b45      	ldr	r3, [pc, #276]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e72:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	4942      	ldr	r1, [pc, #264]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e8a:	d105      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e8c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4a3c      	ldr	r2, [pc, #240]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e96:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d015      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ea4:	4b37      	ldr	r3, [pc, #220]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eaa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	4934      	ldr	r1, [pc, #208]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ec2:	d105      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ec4:	4b2f      	ldr	r3, [pc, #188]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4a2e      	ldr	r2, [pc, #184]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ece:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d015      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003edc:	4b29      	ldr	r3, [pc, #164]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eea:	4926      	ldr	r1, [pc, #152]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003efa:	d105      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003efc:	4b21      	ldr	r3, [pc, #132]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4a20      	ldr	r2, [pc, #128]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f06:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d015      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f14:	4b1b      	ldr	r3, [pc, #108]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	4918      	ldr	r1, [pc, #96]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f32:	d105      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f34:	4b13      	ldr	r3, [pc, #76]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4a12      	ldr	r2, [pc, #72]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d015      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f52:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5a:	490a      	ldr	r1, [pc, #40]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f6a:	d105      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f6c:	4b05      	ldr	r3, [pc, #20]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4a04      	ldr	r2, [pc, #16]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f76:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f78:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000

08003f88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e09d      	b.n	80040d6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d108      	bne.n	8003fb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003faa:	d009      	beq.n	8003fc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	61da      	str	r2, [r3, #28]
 8003fb2:	e005      	b.n	8003fc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fe f918 	bl	8002210 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ff6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004000:	d902      	bls.n	8004008 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	e002      	b.n	800400e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004008:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800400c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004016:	d007      	beq.n	8004028 <HAL_SPI_Init+0xa0>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004020:	d002      	beq.n	8004028 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406a:	ea42 0103 	orr.w	r1, r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004072:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	0c1b      	lsrs	r3, r3, #16
 8004084:	f003 0204 	and.w	r2, r3, #4
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80040a4:	ea42 0103 	orr.w	r1, r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69da      	ldr	r2, [r3, #28]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b088      	sub	sp, #32
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	603b      	str	r3, [r7, #0]
 80040ea:	4613      	mov	r3, r2
 80040ec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040ee:	f7fe fbd5 	bl	800289c <HAL_GetTick>
 80040f2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80040f4:	88fb      	ldrh	r3, [r7, #6]
 80040f6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b01      	cmp	r3, #1
 8004102:	d001      	beq.n	8004108 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004104:	2302      	movs	r3, #2
 8004106:	e15c      	b.n	80043c2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_SPI_Transmit+0x36>
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e154      	b.n	80043c2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <HAL_SPI_Transmit+0x48>
 8004122:	2302      	movs	r3, #2
 8004124:	e14d      	b.n	80043c2 <HAL_SPI_Transmit+0x2e4>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2203      	movs	r2, #3
 8004132:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	88fa      	ldrh	r2, [r7, #6]
 8004146:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	88fa      	ldrh	r2, [r7, #6]
 800414c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004178:	d10f      	bne.n	800419a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004188:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004198:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a4:	2b40      	cmp	r3, #64	@ 0x40
 80041a6:	d007      	beq.n	80041b8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041c0:	d952      	bls.n	8004268 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <HAL_SPI_Transmit+0xf2>
 80041ca:	8b7b      	ldrh	r3, [r7, #26]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d145      	bne.n	800425c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d4:	881a      	ldrh	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e0:	1c9a      	adds	r2, r3, #2
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041f4:	e032      	b.n	800425c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b02      	cmp	r3, #2
 8004202:	d112      	bne.n	800422a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004208:	881a      	ldrh	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004214:	1c9a      	adds	r2, r3, #2
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004228:	e018      	b.n	800425c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800422a:	f7fe fb37 	bl	800289c <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d803      	bhi.n	8004242 <HAL_SPI_Transmit+0x164>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d102      	bne.n	8004248 <HAL_SPI_Transmit+0x16a>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d109      	bne.n	800425c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e0b2      	b.n	80043c2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1c7      	bne.n	80041f6 <HAL_SPI_Transmit+0x118>
 8004266:	e083      	b.n	8004370 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_SPI_Transmit+0x198>
 8004270:	8b7b      	ldrh	r3, [r7, #26]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d177      	bne.n	8004366 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	d912      	bls.n	80042a6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004284:	881a      	ldrh	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004290:	1c9a      	adds	r2, r3, #2
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b02      	subs	r3, #2
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042a4:	e05f      	b.n	8004366 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	330c      	adds	r3, #12
 80042b0:	7812      	ldrb	r2, [r2, #0]
 80042b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80042cc:	e04b      	b.n	8004366 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d12b      	bne.n	8004334 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d912      	bls.n	800430c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ea:	881a      	ldrh	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f6:	1c9a      	adds	r2, r3, #2
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b02      	subs	r3, #2
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800430a:	e02c      	b.n	8004366 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	7812      	ldrb	r2, [r2, #0]
 8004318:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004332:	e018      	b.n	8004366 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004334:	f7fe fab2 	bl	800289c <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d803      	bhi.n	800434c <HAL_SPI_Transmit+0x26e>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434a:	d102      	bne.n	8004352 <HAL_SPI_Transmit+0x274>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e02d      	b.n	80043c2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1ae      	bne.n	80042ce <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	6839      	ldr	r1, [r7, #0]
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 fb73 	bl	8004a60 <SPI_EndRxTxTransaction>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10a      	bne.n	80043a4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80043c0:	2300      	movs	r3, #0
  }
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3720      	adds	r7, #32
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b08a      	sub	sp, #40	@ 0x28
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043d8:	2301      	movs	r3, #1
 80043da:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043dc:	f7fe fa5e 	bl	800289c <HAL_GetTick>
 80043e0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043e8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80043f0:	887b      	ldrh	r3, [r7, #2]
 80043f2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80043f4:	887b      	ldrh	r3, [r7, #2]
 80043f6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043f8:	7ffb      	ldrb	r3, [r7, #31]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d00c      	beq.n	8004418 <HAL_SPI_TransmitReceive+0x4e>
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004404:	d106      	bne.n	8004414 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d102      	bne.n	8004414 <HAL_SPI_TransmitReceive+0x4a>
 800440e:	7ffb      	ldrb	r3, [r7, #31]
 8004410:	2b04      	cmp	r3, #4
 8004412:	d001      	beq.n	8004418 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004414:	2302      	movs	r3, #2
 8004416:	e1f3      	b.n	8004800 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_SPI_TransmitReceive+0x60>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_SPI_TransmitReceive+0x60>
 8004424:	887b      	ldrh	r3, [r7, #2]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e1e8      	b.n	8004800 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_SPI_TransmitReceive+0x72>
 8004438:	2302      	movs	r3, #2
 800443a:	e1e1      	b.n	8004800 <HAL_SPI_TransmitReceive+0x436>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b04      	cmp	r3, #4
 800444e:	d003      	beq.n	8004458 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2205      	movs	r2, #5
 8004454:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	887a      	ldrh	r2, [r7, #2]
 8004468:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	887a      	ldrh	r2, [r7, #2]
 8004470:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	887a      	ldrh	r2, [r7, #2]
 800447e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	887a      	ldrh	r2, [r7, #2]
 8004484:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800449a:	d802      	bhi.n	80044a2 <HAL_SPI_TransmitReceive+0xd8>
 800449c:	8abb      	ldrh	r3, [r7, #20]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d908      	bls.n	80044b4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	e007      	b.n	80044c4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80044c2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ce:	2b40      	cmp	r3, #64	@ 0x40
 80044d0:	d007      	beq.n	80044e2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044ea:	f240 8083 	bls.w	80045f4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <HAL_SPI_TransmitReceive+0x132>
 80044f6:	8afb      	ldrh	r3, [r7, #22]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d16f      	bne.n	80045dc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004500:	881a      	ldrh	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450c:	1c9a      	adds	r2, r3, #2
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004520:	e05c      	b.n	80045dc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b02      	cmp	r3, #2
 800452e:	d11b      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x19e>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d016      	beq.n	8004568 <HAL_SPI_TransmitReceive+0x19e>
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	2b01      	cmp	r3, #1
 800453e:	d113      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004544:	881a      	ldrh	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004550:	1c9a      	adds	r2, r3, #2
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b01      	cmp	r3, #1
 8004574:	d11c      	bne.n	80045b0 <HAL_SPI_TransmitReceive+0x1e6>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d016      	beq.n	80045b0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458c:	b292      	uxth	r2, r2
 800458e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004594:	1c9a      	adds	r2, r3, #2
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045ac:	2301      	movs	r3, #1
 80045ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045b0:	f7fe f974 	bl	800289c <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045bc:	429a      	cmp	r2, r3
 80045be:	d80d      	bhi.n	80045dc <HAL_SPI_TransmitReceive+0x212>
 80045c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c6:	d009      	beq.n	80045dc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e111      	b.n	8004800 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d19d      	bne.n	8004522 <HAL_SPI_TransmitReceive+0x158>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d197      	bne.n	8004522 <HAL_SPI_TransmitReceive+0x158>
 80045f2:	e0e5      	b.n	80047c0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_SPI_TransmitReceive+0x23a>
 80045fc:	8afb      	ldrh	r3, [r7, #22]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	f040 80d1 	bne.w	80047a6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b01      	cmp	r3, #1
 800460c:	d912      	bls.n	8004634 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004612:	881a      	ldrh	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461e:	1c9a      	adds	r2, r3, #2
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b02      	subs	r3, #2
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004632:	e0b8      	b.n	80047a6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	330c      	adds	r3, #12
 800463e:	7812      	ldrb	r2, [r2, #0]
 8004640:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800465a:	e0a4      	b.n	80047a6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b02      	cmp	r3, #2
 8004668:	d134      	bne.n	80046d4 <HAL_SPI_TransmitReceive+0x30a>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d02f      	beq.n	80046d4 <HAL_SPI_TransmitReceive+0x30a>
 8004674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004676:	2b01      	cmp	r3, #1
 8004678:	d12c      	bne.n	80046d4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	d912      	bls.n	80046aa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004688:	881a      	ldrh	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004694:	1c9a      	adds	r2, r3, #2
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b02      	subs	r3, #2
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046a8:	e012      	b.n	80046d0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	330c      	adds	r3, #12
 80046b4:	7812      	ldrb	r2, [r2, #0]
 80046b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d148      	bne.n	8004774 <HAL_SPI_TransmitReceive+0x3aa>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d042      	beq.n	8004774 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d923      	bls.n	8004742 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004704:	b292      	uxth	r2, r2
 8004706:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470c:	1c9a      	adds	r2, r3, #2
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b02      	subs	r3, #2
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	d81f      	bhi.n	8004770 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800473e:	605a      	str	r2, [r3, #4]
 8004740:	e016      	b.n	8004770 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f103 020c 	add.w	r2, r3, #12
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474e:	7812      	ldrb	r2, [r2, #0]
 8004750:	b2d2      	uxtb	r2, r2
 8004752:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004764:	b29b      	uxth	r3, r3
 8004766:	3b01      	subs	r3, #1
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004770:	2301      	movs	r3, #1
 8004772:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004774:	f7fe f892 	bl	800289c <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004780:	429a      	cmp	r2, r3
 8004782:	d803      	bhi.n	800478c <HAL_SPI_TransmitReceive+0x3c2>
 8004784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478a:	d102      	bne.n	8004792 <HAL_SPI_TransmitReceive+0x3c8>
 800478c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e02c      	b.n	8004800 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f47f af55 	bne.w	800465c <HAL_SPI_TransmitReceive+0x292>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f47f af4e 	bne.w	800465c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047c0:	6a3a      	ldr	r2, [r7, #32]
 80047c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 f94b 	bl	8004a60 <SPI_EndRxTxTransaction>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d008      	beq.n	80047e2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2220      	movs	r2, #32
 80047d4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e00e      	b.n	8004800 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80047fe:	2300      	movs	r3, #0
  }
}
 8004800:	4618      	mov	r0, r3
 8004802:	3728      	adds	r7, #40	@ 0x28
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004816:	b2db      	uxtb	r3, r3
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	603b      	str	r3, [r7, #0]
 8004830:	4613      	mov	r3, r2
 8004832:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004834:	f7fe f832 	bl	800289c <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	4413      	add	r3, r2
 8004842:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004844:	f7fe f82a 	bl	800289c <HAL_GetTick>
 8004848:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800484a:	4b39      	ldr	r3, [pc, #228]	@ (8004930 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	015b      	lsls	r3, r3, #5
 8004850:	0d1b      	lsrs	r3, r3, #20
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	fb02 f303 	mul.w	r3, r2, r3
 8004858:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800485a:	e054      	b.n	8004906 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004862:	d050      	beq.n	8004906 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004864:	f7fe f81a 	bl	800289c <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	429a      	cmp	r2, r3
 8004872:	d902      	bls.n	800487a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d13d      	bne.n	80048f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004888:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004892:	d111      	bne.n	80048b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800489c:	d004      	beq.n	80048a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048a6:	d107      	bne.n	80048b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048c0:	d10f      	bne.n	80048e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e017      	b.n	8004926 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	3b01      	subs	r3, #1
 8004904:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4013      	ands	r3, r2
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	429a      	cmp	r2, r3
 8004914:	bf0c      	ite	eq
 8004916:	2301      	moveq	r3, #1
 8004918:	2300      	movne	r3, #0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	461a      	mov	r2, r3
 800491e:	79fb      	ldrb	r3, [r7, #7]
 8004920:	429a      	cmp	r2, r3
 8004922:	d19b      	bne.n	800485c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3720      	adds	r7, #32
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000008 	.word	0x20000008

08004934 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08a      	sub	sp, #40	@ 0x28
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004942:	2300      	movs	r3, #0
 8004944:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004946:	f7fd ffa9 	bl	800289c <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494e:	1a9b      	subs	r3, r3, r2
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	4413      	add	r3, r2
 8004954:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004956:	f7fd ffa1 	bl	800289c <HAL_GetTick>
 800495a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	330c      	adds	r3, #12
 8004962:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004964:	4b3d      	ldr	r3, [pc, #244]	@ (8004a5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	00da      	lsls	r2, r3, #3
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	0d1b      	lsrs	r3, r3, #20
 8004974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004976:	fb02 f303 	mul.w	r3, r2, r3
 800497a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800497c:	e060      	b.n	8004a40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004984:	d107      	bne.n	8004996 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d104      	bne.n	8004996 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004994:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499c:	d050      	beq.n	8004a40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800499e:	f7fd ff7d 	bl	800289c <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d902      	bls.n	80049b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80049ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d13d      	bne.n	8004a30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80049c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049cc:	d111      	bne.n	80049f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049d6:	d004      	beq.n	80049e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049e0:	d107      	bne.n	80049f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049fa:	d10f      	bne.n	8004a1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e010      	b.n	8004a52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d196      	bne.n	800497e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3728      	adds	r7, #40	@ 0x28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000008 	.word	0x20000008

08004a60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff ff5b 	bl	8004934 <SPI_WaitFifoStateUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d007      	beq.n	8004a94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a88:	f043 0220 	orr.w	r2, r3, #32
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e027      	b.n	8004ae4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2180      	movs	r1, #128	@ 0x80
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f7ff fec0 	bl	8004824 <SPI_WaitFlagStateUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d007      	beq.n	8004aba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aae:	f043 0220 	orr.w	r2, r3, #32
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e014      	b.n	8004ae4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f7ff ff34 	bl	8004934 <SPI_WaitFifoStateUntilTimeout>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d007      	beq.n	8004ae2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ad6:	f043 0220 	orr.w	r2, r3, #32
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e000      	b.n	8004ae4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e049      	b.n	8004b92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fd fbfe 	bl	8002314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3304      	adds	r3, #4
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	f000 fb4c 	bl	80051c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
	...

08004b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d001      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e04a      	b.n	8004c4a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a21      	ldr	r2, [pc, #132]	@ (8004c58 <HAL_TIM_Base_Start_IT+0xbc>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d018      	beq.n	8004c08 <HAL_TIM_Base_Start_IT+0x6c>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bde:	d013      	beq.n	8004c08 <HAL_TIM_Base_Start_IT+0x6c>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c5c <HAL_TIM_Base_Start_IT+0xc0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00e      	beq.n	8004c08 <HAL_TIM_Base_Start_IT+0x6c>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a1c      	ldr	r2, [pc, #112]	@ (8004c60 <HAL_TIM_Base_Start_IT+0xc4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d009      	beq.n	8004c08 <HAL_TIM_Base_Start_IT+0x6c>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8004c64 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d004      	beq.n	8004c08 <HAL_TIM_Base_Start_IT+0x6c>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a19      	ldr	r2, [pc, #100]	@ (8004c68 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d115      	bne.n	8004c34 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	4b17      	ldr	r3, [pc, #92]	@ (8004c6c <HAL_TIM_Base_Start_IT+0xd0>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b06      	cmp	r3, #6
 8004c18:	d015      	beq.n	8004c46 <HAL_TIM_Base_Start_IT+0xaa>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c20:	d011      	beq.n	8004c46 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0201 	orr.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c32:	e008      	b.n	8004c46 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	e000      	b.n	8004c48 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40012c00 	.word	0x40012c00
 8004c5c:	40000400 	.word	0x40000400
 8004c60:	40000800 	.word	0x40000800
 8004c64:	40013400 	.word	0x40013400
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	00010007 	.word	0x00010007

08004c70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e097      	b.n	8004db4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d106      	bne.n	8004c9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7fd fafb 	bl	8002294 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004cb4:	f023 0307 	bic.w	r3, r3, #7
 8004cb8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	f000 fa7f 	bl	80051c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cf2:	f023 0303 	bic.w	r3, r3, #3
 8004cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	021b      	lsls	r3, r3, #8
 8004d02:	4313      	orrs	r3, r2
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004d10:	f023 030c 	bic.w	r3, r3, #12
 8004d14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	021b      	lsls	r3, r3, #8
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	011a      	lsls	r2, r3, #4
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	031b      	lsls	r3, r3, #12
 8004d40:	4313      	orrs	r3, r2
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004d4e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004d56:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	4313      	orrs	r3, r2
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dcc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004dd4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ddc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004de4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d110      	bne.n	8004e0e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d102      	bne.n	8004df8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004df2:	7b7b      	ldrb	r3, [r7, #13]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d001      	beq.n	8004dfc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e069      	b.n	8004ed0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e0c:	e031      	b.n	8004e72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d110      	bne.n	8004e36 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e14:	7bbb      	ldrb	r3, [r7, #14]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d102      	bne.n	8004e20 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e1a:	7b3b      	ldrb	r3, [r7, #12]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d001      	beq.n	8004e24 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e055      	b.n	8004ed0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e34:	e01d      	b.n	8004e72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d108      	bne.n	8004e4e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e3c:	7bbb      	ldrb	r3, [r7, #14]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d105      	bne.n	8004e4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e42:	7b7b      	ldrb	r3, [r7, #13]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d102      	bne.n	8004e4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e48:	7b3b      	ldrb	r3, [r7, #12]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d001      	beq.n	8004e52 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e03e      	b.n	8004ed0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2202      	movs	r2, #2
 8004e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2202      	movs	r2, #2
 8004e66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_TIM_Encoder_Start+0xc4>
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d008      	beq.n	8004e90 <HAL_TIM_Encoder_Start+0xd4>
 8004e7e:	e00f      	b.n	8004ea0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2201      	movs	r2, #1
 8004e86:	2100      	movs	r1, #0
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fa39 	bl	8005300 <TIM_CCxChannelCmd>
      break;
 8004e8e:	e016      	b.n	8004ebe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2201      	movs	r2, #1
 8004e96:	2104      	movs	r1, #4
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fa31 	bl	8005300 <TIM_CCxChannelCmd>
      break;
 8004e9e:	e00e      	b.n	8004ebe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fa29 	bl	8005300 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	2104      	movs	r1, #4
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fa22 	bl	8005300 <TIM_CCxChannelCmd>
      break;
 8004ebc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0201 	orr.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d020      	beq.n	8004f3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01b      	beq.n	8004f3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0202 	mvn.w	r2, #2
 8004f0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f931 	bl	800518a <HAL_TIM_IC_CaptureCallback>
 8004f28:	e005      	b.n	8004f36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f923 	bl	8005176 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f934 	bl	800519e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d020      	beq.n	8004f88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d01b      	beq.n	8004f88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0204 	mvn.w	r2, #4
 8004f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f90b 	bl	800518a <HAL_TIM_IC_CaptureCallback>
 8004f74:	e005      	b.n	8004f82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f8fd 	bl	8005176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f90e 	bl	800519e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d020      	beq.n	8004fd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01b      	beq.n	8004fd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0208 	mvn.w	r2, #8
 8004fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2204      	movs	r2, #4
 8004faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f8e5 	bl	800518a <HAL_TIM_IC_CaptureCallback>
 8004fc0:	e005      	b.n	8004fce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f8d7 	bl	8005176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f8e8 	bl	800519e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f003 0310 	and.w	r3, r3, #16
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d020      	beq.n	8005020 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01b      	beq.n	8005020 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0210 	mvn.w	r2, #16
 8004ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2208      	movs	r2, #8
 8004ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f8bf 	bl	800518a <HAL_TIM_IC_CaptureCallback>
 800500c:	e005      	b.n	800501a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f8b1 	bl	8005176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f8c2 	bl	800519e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00c      	beq.n	8005044 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0201 	mvn.w	r2, #1
 800503c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7fc fce3 	bl	8001a0a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800504a:	2b00      	cmp	r3, #0
 800504c:	d104      	bne.n	8005058 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00c      	beq.n	8005072 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800505e:	2b00      	cmp	r3, #0
 8005060:	d007      	beq.n	8005072 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800506a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f9f9 	bl	8005464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00c      	beq.n	8005096 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800508e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f9f1 	bl	8005478 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00c      	beq.n	80050ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d007      	beq.n	80050ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f87c 	bl	80051b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00c      	beq.n	80050de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 0320 	and.w	r3, r3, #32
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d007      	beq.n	80050de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f06f 0220 	mvn.w	r2, #32
 80050d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f9b9 	bl	8005450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00c      	beq.n	8005102 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d007      	beq.n	8005102 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80050fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f9c5 	bl	800548c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00c      	beq.n	8005126 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d007      	beq.n	8005126 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800511e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f9bd 	bl	80054a0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00c      	beq.n	800514a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d007      	beq.n	800514a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f9b5 	bl	80054b4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00c      	beq.n	800516e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f9ad 	bl	80054c8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800516e:	bf00      	nop
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
	...

080051c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a42      	ldr	r2, [pc, #264]	@ (80052e4 <TIM_Base_SetConfig+0x11c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00f      	beq.n	8005200 <TIM_Base_SetConfig+0x38>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e6:	d00b      	beq.n	8005200 <TIM_Base_SetConfig+0x38>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a3f      	ldr	r2, [pc, #252]	@ (80052e8 <TIM_Base_SetConfig+0x120>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d007      	beq.n	8005200 <TIM_Base_SetConfig+0x38>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a3e      	ldr	r2, [pc, #248]	@ (80052ec <TIM_Base_SetConfig+0x124>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d003      	beq.n	8005200 <TIM_Base_SetConfig+0x38>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a3d      	ldr	r2, [pc, #244]	@ (80052f0 <TIM_Base_SetConfig+0x128>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d108      	bne.n	8005212 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a33      	ldr	r2, [pc, #204]	@ (80052e4 <TIM_Base_SetConfig+0x11c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d01b      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005220:	d017      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a30      	ldr	r2, [pc, #192]	@ (80052e8 <TIM_Base_SetConfig+0x120>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2f      	ldr	r2, [pc, #188]	@ (80052ec <TIM_Base_SetConfig+0x124>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00f      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2e      	ldr	r2, [pc, #184]	@ (80052f0 <TIM_Base_SetConfig+0x128>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00b      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a2d      	ldr	r2, [pc, #180]	@ (80052f4 <TIM_Base_SetConfig+0x12c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d007      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2c      	ldr	r2, [pc, #176]	@ (80052f8 <TIM_Base_SetConfig+0x130>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d003      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2b      	ldr	r2, [pc, #172]	@ (80052fc <TIM_Base_SetConfig+0x134>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d108      	bne.n	8005264 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4313      	orrs	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a16      	ldr	r2, [pc, #88]	@ (80052e4 <TIM_Base_SetConfig+0x11c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00f      	beq.n	80052b0 <TIM_Base_SetConfig+0xe8>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a17      	ldr	r2, [pc, #92]	@ (80052f0 <TIM_Base_SetConfig+0x128>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00b      	beq.n	80052b0 <TIM_Base_SetConfig+0xe8>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a16      	ldr	r2, [pc, #88]	@ (80052f4 <TIM_Base_SetConfig+0x12c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d007      	beq.n	80052b0 <TIM_Base_SetConfig+0xe8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a15      	ldr	r2, [pc, #84]	@ (80052f8 <TIM_Base_SetConfig+0x130>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d003      	beq.n	80052b0 <TIM_Base_SetConfig+0xe8>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a14      	ldr	r2, [pc, #80]	@ (80052fc <TIM_Base_SetConfig+0x134>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d103      	bne.n	80052b8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d105      	bne.n	80052d6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f023 0201 	bic.w	r2, r3, #1
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	611a      	str	r2, [r3, #16]
  }
}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	40013400 	.word	0x40013400
 80052f4:	40014000 	.word	0x40014000
 80052f8:	40014400 	.word	0x40014400
 80052fc:	40014800 	.word	0x40014800

08005300 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	2201      	movs	r2, #1
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a1a      	ldr	r2, [r3, #32]
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	43db      	mvns	r3, r3
 8005322:	401a      	ands	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a1a      	ldr	r2, [r3, #32]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	6879      	ldr	r1, [r7, #4]
 8005334:	fa01 f303 	lsl.w	r3, r1, r3
 8005338:	431a      	orrs	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	621a      	str	r2, [r3, #32]
}
 800533e:	bf00      	nop
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
	...

0800534c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005360:	2302      	movs	r3, #2
 8005362:	e065      	b.n	8005430 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a2c      	ldr	r2, [pc, #176]	@ (800543c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d004      	beq.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a2b      	ldr	r2, [pc, #172]	@ (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d108      	bne.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800539e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80053b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1b      	ldr	r2, [pc, #108]	@ (800543c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d018      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053da:	d013      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a18      	ldr	r2, [pc, #96]	@ (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00e      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a17      	ldr	r2, [pc, #92]	@ (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d009      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a12      	ldr	r2, [pc, #72]	@ (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d004      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a13      	ldr	r2, [pc, #76]	@ (800544c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d10c      	bne.n	800541e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800540a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	4313      	orrs	r3, r2
 8005414:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40013400 	.word	0x40013400
 8005444:	40000400 	.word	0x40000400
 8005448:	40000800 	.word	0x40000800
 800544c:	40014000 	.word	0x40014000

08005450 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e042      	b.n	8005574 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d106      	bne.n	8005506 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7fc ff49 	bl	8002398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2224      	movs	r2, #36	@ 0x24
 800550a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0201 	bic.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f001 f834 	bl	8006594 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fd65 	bl	8005ffc <UART_SetConfig>
 8005532:	4603      	mov	r3, r0
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e01b      	b.n	8005574 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800554a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800555a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f001 f8b3 	bl	80066d8 <UART_CheckIdleState>
 8005572:	4603      	mov	r3, r0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	@ 0x28
 8005580:	af02      	add	r7, sp, #8
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	4613      	mov	r3, r2
 800558a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005592:	2b20      	cmp	r3, #32
 8005594:	d17b      	bne.n	800568e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <HAL_UART_Transmit+0x26>
 800559c:	88fb      	ldrh	r3, [r7, #6]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e074      	b.n	8005690 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2221      	movs	r2, #33	@ 0x21
 80055b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055b6:	f7fd f971 	bl	800289c <HAL_GetTick>
 80055ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	88fa      	ldrh	r2, [r7, #6]
 80055c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	88fa      	ldrh	r2, [r7, #6]
 80055c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055d4:	d108      	bne.n	80055e8 <HAL_UART_Transmit+0x6c>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d104      	bne.n	80055e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055de:	2300      	movs	r3, #0
 80055e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	e003      	b.n	80055f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055ec:	2300      	movs	r3, #0
 80055ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055f0:	e030      	b.n	8005654 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	2200      	movs	r2, #0
 80055fa:	2180      	movs	r1, #128	@ 0x80
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f001 f915 	bl	800682c <UART_WaitOnFlagUntilTimeout>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d005      	beq.n	8005614 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e03d      	b.n	8005690 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10b      	bne.n	8005632 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005628:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	3302      	adds	r3, #2
 800562e:	61bb      	str	r3, [r7, #24]
 8005630:	e007      	b.n	8005642 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	781a      	ldrb	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	3301      	adds	r3, #1
 8005640:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005648:	b29b      	uxth	r3, r3
 800564a:	3b01      	subs	r3, #1
 800564c:	b29a      	uxth	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800565a:	b29b      	uxth	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1c8      	bne.n	80055f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	2200      	movs	r2, #0
 8005668:	2140      	movs	r1, #64	@ 0x40
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f001 f8de 	bl	800682c <UART_WaitOnFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2220      	movs	r2, #32
 800567a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e006      	b.n	8005690 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2220      	movs	r2, #32
 8005686:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	e000      	b.n	8005690 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800568e:	2302      	movs	r3, #2
  }
}
 8005690:	4618      	mov	r0, r3
 8005692:	3720      	adds	r7, #32
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	@ 0x28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	4613      	mov	r3, r2
 80056a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	d137      	bne.n	8005720 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <HAL_UART_Receive_IT+0x24>
 80056b6:	88fb      	ldrh	r3, [r7, #6]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e030      	b.n	8005722 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a18      	ldr	r2, [pc, #96]	@ (800572c <HAL_UART_Receive_IT+0x94>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d01f      	beq.n	8005710 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d018      	beq.n	8005710 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	e853 3f00 	ldrex	r3, [r3]
 80056ea:	613b      	str	r3, [r7, #16]
   return(result);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fc:	623b      	str	r3, [r7, #32]
 80056fe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	69f9      	ldr	r1, [r7, #28]
 8005702:	6a3a      	ldr	r2, [r7, #32]
 8005704:	e841 2300 	strex	r3, r2, [r1]
 8005708:	61bb      	str	r3, [r7, #24]
   return(result);
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e6      	bne.n	80056de <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005710:	88fb      	ldrh	r3, [r7, #6]
 8005712:	461a      	mov	r2, r3
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f001 f8f6 	bl	8006908 <UART_Start_Receive_IT>
 800571c:	4603      	mov	r3, r0
 800571e:	e000      	b.n	8005722 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005720:	2302      	movs	r3, #2
  }
}
 8005722:	4618      	mov	r0, r3
 8005724:	3728      	adds	r7, #40	@ 0x28
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	40008000 	.word	0x40008000

08005730 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b0a0      	sub	sp, #128	@ 0x80
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8005746:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005748:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800574c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005756:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005758:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800575c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005764:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e6      	bne.n	8005738 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3308      	adds	r3, #8
 8005770:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005774:	e853 3f00 	ldrex	r3, [r3]
 8005778:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800577a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800577c:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 8005780:	f023 0301 	bic.w	r3, r3, #1
 8005784:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3308      	adds	r3, #8
 800578c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800578e:	657a      	str	r2, [r7, #84]	@ 0x54
 8005790:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005794:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005796:	e841 2300 	strex	r3, r2, [r1]
 800579a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800579c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1e3      	bne.n	800576a <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d118      	bne.n	80057dc <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ba:	f023 0310 	bic.w	r3, r3, #16
 80057be:	677b      	str	r3, [r7, #116]	@ 0x74
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	461a      	mov	r2, r3
 80057c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80057ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e6      	bne.n	80057aa <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e6:	2b80      	cmp	r3, #128	@ 0x80
 80057e8:	d137      	bne.n	800585a <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3308      	adds	r3, #8
 80057f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005800:	673b      	str	r3, [r7, #112]	@ 0x70
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3308      	adds	r3, #8
 8005808:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800580a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800580c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005810:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1e5      	bne.n	80057ea <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d019      	beq.n	800585a <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800582a:	2200      	movs	r2, #0
 800582c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005832:	4618      	mov	r0, r3
 8005834:	f7fd f96f 	bl	8002b16 <HAL_DMA_Abort>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00d      	beq.n	800585a <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005842:	4618      	mov	r0, r3
 8005844:	f7fd fa27 	bl	8002c96 <HAL_DMA_GetError>
 8005848:	4603      	mov	r3, r0
 800584a:	2b20      	cmp	r3, #32
 800584c:	d105      	bne.n	800585a <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2210      	movs	r2, #16
 8005852:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e073      	b.n	8005942 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005864:	2b40      	cmp	r3, #64	@ 0x40
 8005866:	d13b      	bne.n	80058e0 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3308      	adds	r3, #8
 800586e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	e853 3f00 	ldrex	r3, [r3]
 8005876:	60bb      	str	r3, [r7, #8]
   return(result);
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800587e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3308      	adds	r3, #8
 8005886:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005888:	61ba      	str	r2, [r7, #24]
 800588a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	6979      	ldr	r1, [r7, #20]
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	e841 2300 	strex	r3, r2, [r1]
 8005894:	613b      	str	r3, [r7, #16]
   return(result);
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e5      	bne.n	8005868 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d01c      	beq.n	80058e0 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058ac:	2200      	movs	r2, #0
 80058ae:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fd f92d 	bl	8002b16 <HAL_DMA_Abort>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00e      	beq.n	80058e0 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fd f9e4 	bl	8002c96 <HAL_DMA_GetError>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	d105      	bne.n	80058e0 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2210      	movs	r2, #16
 80058d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e030      	b.n	8005942 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	220f      	movs	r2, #15
 80058f6:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005900:	d107      	bne.n	8005912 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699a      	ldr	r2, [r3, #24]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f042 0210 	orr.w	r2, r2, #16
 8005910:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	699a      	ldr	r2, [r3, #24]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0208 	orr.w	r2, r2, #8
 8005920:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3780      	adds	r7, #128	@ 0x80
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b0ba      	sub	sp, #232	@ 0xe8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005972:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005976:	f640 030f 	movw	r3, #2063	@ 0x80f
 800597a:	4013      	ands	r3, r2
 800597c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005980:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005984:	2b00      	cmp	r3, #0
 8005986:	d11b      	bne.n	80059c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d015      	beq.n	80059c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	2b00      	cmp	r3, #0
 800599e:	d105      	bne.n	80059ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80059a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d009      	beq.n	80059c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 8300 	beq.w	8005fb6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
      }
      return;
 80059be:	e2fa      	b.n	8005fb6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80059c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8123 	beq.w	8005c10 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80059ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80059ce:	4b8d      	ldr	r3, [pc, #564]	@ (8005c04 <HAL_UART_IRQHandler+0x2b8>)
 80059d0:	4013      	ands	r3, r2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80059d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80059da:	4b8b      	ldr	r3, [pc, #556]	@ (8005c08 <HAL_UART_IRQHandler+0x2bc>)
 80059dc:	4013      	ands	r3, r2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 8116 	beq.w	8005c10 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d011      	beq.n	8005a14 <HAL_UART_IRQHandler+0xc8>
 80059f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00b      	beq.n	8005a14 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2201      	movs	r2, #1
 8005a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a0a:	f043 0201 	orr.w	r2, r3, #1
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d011      	beq.n	8005a44 <HAL_UART_IRQHandler+0xf8>
 8005a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00b      	beq.n	8005a44 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2202      	movs	r2, #2
 8005a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3a:	f043 0204 	orr.w	r2, r3, #4
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d011      	beq.n	8005a74 <HAL_UART_IRQHandler+0x128>
 8005a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00b      	beq.n	8005a74 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2204      	movs	r2, #4
 8005a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a6a:	f043 0202 	orr.w	r2, r3, #2
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d017      	beq.n	8005ab0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a84:	f003 0320 	and.w	r3, r3, #32
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d105      	bne.n	8005a98 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005a8c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005a90:	4b5c      	ldr	r3, [pc, #368]	@ (8005c04 <HAL_UART_IRQHandler+0x2b8>)
 8005a92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00b      	beq.n	8005ab0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa6:	f043 0208 	orr.w	r2, r3, #8
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d012      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x196>
 8005abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ac0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00c      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ad0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad8:	f043 0220 	orr.w	r2, r3, #32
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 8266 	beq.w	8005fba <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005af2:	f003 0320 	and.w	r3, r3, #32
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d013      	beq.n	8005b22 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005afe:	f003 0320 	and.w	r3, r3, #32
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d105      	bne.n	8005b12 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b36:	2b40      	cmp	r3, #64	@ 0x40
 8005b38:	d005      	beq.n	8005b46 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d054      	beq.n	8005bf0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f001 f800 	bl	8006b4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b56:	2b40      	cmp	r3, #64	@ 0x40
 8005b58:	d146      	bne.n	8005be8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3308      	adds	r3, #8
 8005b60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3308      	adds	r3, #8
 8005b82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1d9      	bne.n	8005b5a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d017      	beq.n	8005be0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bb6:	4a15      	ldr	r2, [pc, #84]	@ (8005c0c <HAL_UART_IRQHandler+0x2c0>)
 8005bb8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fd f801 	bl	8002bc8 <HAL_DMA_Abort_IT>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d019      	beq.n	8005c00 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005bda:	4610      	mov	r0, r2
 8005bdc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bde:	e00f      	b.n	8005c00 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7fb ffbb 	bl	8001b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be6:	e00b      	b.n	8005c00 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7fb ffb7 	bl	8001b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bee:	e007      	b.n	8005c00 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7fb ffb3 	bl	8001b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005bfe:	e1dc      	b.n	8005fba <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c00:	bf00      	nop
    return;
 8005c02:	e1da      	b.n	8005fba <HAL_UART_IRQHandler+0x66e>
 8005c04:	10000001 	.word	0x10000001
 8005c08:	04000120 	.word	0x04000120
 8005c0c:	08006c19 	.word	0x08006c19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	f040 8170 	bne.w	8005efa <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c1e:	f003 0310 	and.w	r3, r3, #16
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 8169 	beq.w	8005efa <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c2c:	f003 0310 	and.w	r3, r3, #16
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 8162 	beq.w	8005efa <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2210      	movs	r2, #16
 8005c3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c48:	2b40      	cmp	r3, #64	@ 0x40
 8005c4a:	f040 80d8 	bne.w	8005dfe <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 80af 	beq.w	8005dc4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c70:	429a      	cmp	r2, r3
 8005c72:	f080 80a7 	bcs.w	8005dc4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f040 8087 	bne.w	8005da2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005cbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005cc2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005cca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005cce:	e841 2300 	strex	r3, r2, [r1]
 8005cd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1da      	bne.n	8005c94 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ce8:	e853 3f00 	ldrex	r3, [r3]
 8005cec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005cee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005cf0:	f023 0301 	bic.w	r3, r3, #1
 8005cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3308      	adds	r3, #8
 8005cfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e1      	bne.n	8005cde <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3308      	adds	r3, #8
 8005d20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3308      	adds	r3, #8
 8005d3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005d4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e3      	bne.n	8005d1a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d68:	e853 3f00 	ldrex	r3, [r3]
 8005d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d70:	f023 0310 	bic.w	r3, r3, #16
 8005d74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e4      	bne.n	8005d60 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fc feba 	bl	8002b16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2202      	movs	r2, #2
 8005da6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	4619      	mov	r1, r3
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f911 	bl	8005fe4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005dc2:	e0fc      	b.n	8005fbe <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005dca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	f040 80f5 	bne.w	8005fbe <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0320 	and.w	r3, r3, #32
 8005de2:	2b20      	cmp	r3, #32
 8005de4:	f040 80eb 	bne.w	8005fbe <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005df4:	4619      	mov	r1, r3
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f8f4 	bl	8005fe4 <HAL_UARTEx_RxEventCallback>
      return;
 8005dfc:	e0df      	b.n	8005fbe <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 80d1 	beq.w	8005fc2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005e20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 80cc 	beq.w	8005fc2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e54:	e841 2300 	strex	r3, r2, [r1]
 8005e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e4      	bne.n	8005e2a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3308      	adds	r3, #8
 8005e66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	623b      	str	r3, [r7, #32]
   return(result);
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e76:	f023 0301 	bic.w	r3, r3, #1
 8005e7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3308      	adds	r3, #8
 8005e84:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e88:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e90:	e841 2300 	strex	r3, r2, [r1]
 8005e94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e1      	bne.n	8005e60 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f023 0310 	bic.w	r3, r3, #16
 8005ec4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005ed2:	61fb      	str	r3, [r7, #28]
 8005ed4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed6:	69b9      	ldr	r1, [r7, #24]
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	e841 2300 	strex	r3, r2, [r1]
 8005ede:	617b      	str	r3, [r7, #20]
   return(result);
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1e4      	bne.n	8005eb0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f876 	bl	8005fe4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ef8:	e063      	b.n	8005fc2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005efe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00e      	beq.n	8005f24 <HAL_UART_IRQHandler+0x5d8>
 8005f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d008      	beq.n	8005f24 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005f1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f001 fbd9 	bl	80076d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f22:	e051      	b.n	8005fc8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d014      	beq.n	8005f5a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d105      	bne.n	8005f48 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d008      	beq.n	8005f5a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d03a      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	4798      	blx	r3
    }
    return;
 8005f58:	e035      	b.n	8005fc6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d009      	beq.n	8005f7a <HAL_UART_IRQHandler+0x62e>
 8005f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fe62 	bl	8006c3c <UART_EndTransmit_IT>
    return;
 8005f78:	e026      	b.n	8005fc8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d009      	beq.n	8005f9a <HAL_UART_IRQHandler+0x64e>
 8005f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f8a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f001 fbb2 	bl	80076fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f98:	e016      	b.n	8005fc8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d010      	beq.n	8005fc8 <HAL_UART_IRQHandler+0x67c>
 8005fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	da0c      	bge.n	8005fc8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f001 fb9a 	bl	80076e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fb4:	e008      	b.n	8005fc8 <HAL_UART_IRQHandler+0x67c>
      return;
 8005fb6:	bf00      	nop
 8005fb8:	e006      	b.n	8005fc8 <HAL_UART_IRQHandler+0x67c>
    return;
 8005fba:	bf00      	nop
 8005fbc:	e004      	b.n	8005fc8 <HAL_UART_IRQHandler+0x67c>
      return;
 8005fbe:	bf00      	nop
 8005fc0:	e002      	b.n	8005fc8 <HAL_UART_IRQHandler+0x67c>
      return;
 8005fc2:	bf00      	nop
 8005fc4:	e000      	b.n	8005fc8 <HAL_UART_IRQHandler+0x67c>
    return;
 8005fc6:	bf00      	nop
  }
}
 8005fc8:	37e8      	adds	r7, #232	@ 0xe8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop

08005fd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006000:	b08c      	sub	sp, #48	@ 0x30
 8006002:	af00      	add	r7, sp, #0
 8006004:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	431a      	orrs	r2, r3
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	431a      	orrs	r2, r3
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	4313      	orrs	r3, r2
 8006022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	4bab      	ldr	r3, [pc, #684]	@ (80062d8 <UART_SetConfig+0x2dc>)
 800602c:	4013      	ands	r3, r2
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	6812      	ldr	r2, [r2, #0]
 8006032:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006034:	430b      	orrs	r3, r1
 8006036:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4aa0      	ldr	r2, [pc, #640]	@ (80062dc <UART_SetConfig+0x2e0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d004      	beq.n	8006068 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006064:	4313      	orrs	r3, r2
 8006066:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006072:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	6812      	ldr	r2, [r2, #0]
 800607a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800607c:	430b      	orrs	r3, r1
 800607e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006086:	f023 010f 	bic.w	r1, r3, #15
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a91      	ldr	r2, [pc, #580]	@ (80062e0 <UART_SetConfig+0x2e4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d125      	bne.n	80060ec <UART_SetConfig+0xf0>
 80060a0:	4b90      	ldr	r3, [pc, #576]	@ (80062e4 <UART_SetConfig+0x2e8>)
 80060a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a6:	f003 0303 	and.w	r3, r3, #3
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d81a      	bhi.n	80060e4 <UART_SetConfig+0xe8>
 80060ae:	a201      	add	r2, pc, #4	@ (adr r2, 80060b4 <UART_SetConfig+0xb8>)
 80060b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b4:	080060c5 	.word	0x080060c5
 80060b8:	080060d5 	.word	0x080060d5
 80060bc:	080060cd 	.word	0x080060cd
 80060c0:	080060dd 	.word	0x080060dd
 80060c4:	2301      	movs	r3, #1
 80060c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ca:	e0d6      	b.n	800627a <UART_SetConfig+0x27e>
 80060cc:	2302      	movs	r3, #2
 80060ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060d2:	e0d2      	b.n	800627a <UART_SetConfig+0x27e>
 80060d4:	2304      	movs	r3, #4
 80060d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060da:	e0ce      	b.n	800627a <UART_SetConfig+0x27e>
 80060dc:	2308      	movs	r3, #8
 80060de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060e2:	e0ca      	b.n	800627a <UART_SetConfig+0x27e>
 80060e4:	2310      	movs	r3, #16
 80060e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ea:	e0c6      	b.n	800627a <UART_SetConfig+0x27e>
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a7d      	ldr	r2, [pc, #500]	@ (80062e8 <UART_SetConfig+0x2ec>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d138      	bne.n	8006168 <UART_SetConfig+0x16c>
 80060f6:	4b7b      	ldr	r3, [pc, #492]	@ (80062e4 <UART_SetConfig+0x2e8>)
 80060f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fc:	f003 030c 	and.w	r3, r3, #12
 8006100:	2b0c      	cmp	r3, #12
 8006102:	d82d      	bhi.n	8006160 <UART_SetConfig+0x164>
 8006104:	a201      	add	r2, pc, #4	@ (adr r2, 800610c <UART_SetConfig+0x110>)
 8006106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610a:	bf00      	nop
 800610c:	08006141 	.word	0x08006141
 8006110:	08006161 	.word	0x08006161
 8006114:	08006161 	.word	0x08006161
 8006118:	08006161 	.word	0x08006161
 800611c:	08006151 	.word	0x08006151
 8006120:	08006161 	.word	0x08006161
 8006124:	08006161 	.word	0x08006161
 8006128:	08006161 	.word	0x08006161
 800612c:	08006149 	.word	0x08006149
 8006130:	08006161 	.word	0x08006161
 8006134:	08006161 	.word	0x08006161
 8006138:	08006161 	.word	0x08006161
 800613c:	08006159 	.word	0x08006159
 8006140:	2300      	movs	r3, #0
 8006142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006146:	e098      	b.n	800627a <UART_SetConfig+0x27e>
 8006148:	2302      	movs	r3, #2
 800614a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800614e:	e094      	b.n	800627a <UART_SetConfig+0x27e>
 8006150:	2304      	movs	r3, #4
 8006152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006156:	e090      	b.n	800627a <UART_SetConfig+0x27e>
 8006158:	2308      	movs	r3, #8
 800615a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800615e:	e08c      	b.n	800627a <UART_SetConfig+0x27e>
 8006160:	2310      	movs	r3, #16
 8006162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006166:	e088      	b.n	800627a <UART_SetConfig+0x27e>
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a5f      	ldr	r2, [pc, #380]	@ (80062ec <UART_SetConfig+0x2f0>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d125      	bne.n	80061be <UART_SetConfig+0x1c2>
 8006172:	4b5c      	ldr	r3, [pc, #368]	@ (80062e4 <UART_SetConfig+0x2e8>)
 8006174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006178:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800617c:	2b30      	cmp	r3, #48	@ 0x30
 800617e:	d016      	beq.n	80061ae <UART_SetConfig+0x1b2>
 8006180:	2b30      	cmp	r3, #48	@ 0x30
 8006182:	d818      	bhi.n	80061b6 <UART_SetConfig+0x1ba>
 8006184:	2b20      	cmp	r3, #32
 8006186:	d00a      	beq.n	800619e <UART_SetConfig+0x1a2>
 8006188:	2b20      	cmp	r3, #32
 800618a:	d814      	bhi.n	80061b6 <UART_SetConfig+0x1ba>
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <UART_SetConfig+0x19a>
 8006190:	2b10      	cmp	r3, #16
 8006192:	d008      	beq.n	80061a6 <UART_SetConfig+0x1aa>
 8006194:	e00f      	b.n	80061b6 <UART_SetConfig+0x1ba>
 8006196:	2300      	movs	r3, #0
 8006198:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800619c:	e06d      	b.n	800627a <UART_SetConfig+0x27e>
 800619e:	2302      	movs	r3, #2
 80061a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061a4:	e069      	b.n	800627a <UART_SetConfig+0x27e>
 80061a6:	2304      	movs	r3, #4
 80061a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ac:	e065      	b.n	800627a <UART_SetConfig+0x27e>
 80061ae:	2308      	movs	r3, #8
 80061b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061b4:	e061      	b.n	800627a <UART_SetConfig+0x27e>
 80061b6:	2310      	movs	r3, #16
 80061b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061bc:	e05d      	b.n	800627a <UART_SetConfig+0x27e>
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a4b      	ldr	r2, [pc, #300]	@ (80062f0 <UART_SetConfig+0x2f4>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d125      	bne.n	8006214 <UART_SetConfig+0x218>
 80061c8:	4b46      	ldr	r3, [pc, #280]	@ (80062e4 <UART_SetConfig+0x2e8>)
 80061ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80061d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80061d4:	d016      	beq.n	8006204 <UART_SetConfig+0x208>
 80061d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80061d8:	d818      	bhi.n	800620c <UART_SetConfig+0x210>
 80061da:	2b80      	cmp	r3, #128	@ 0x80
 80061dc:	d00a      	beq.n	80061f4 <UART_SetConfig+0x1f8>
 80061de:	2b80      	cmp	r3, #128	@ 0x80
 80061e0:	d814      	bhi.n	800620c <UART_SetConfig+0x210>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <UART_SetConfig+0x1f0>
 80061e6:	2b40      	cmp	r3, #64	@ 0x40
 80061e8:	d008      	beq.n	80061fc <UART_SetConfig+0x200>
 80061ea:	e00f      	b.n	800620c <UART_SetConfig+0x210>
 80061ec:	2300      	movs	r3, #0
 80061ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061f2:	e042      	b.n	800627a <UART_SetConfig+0x27e>
 80061f4:	2302      	movs	r3, #2
 80061f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061fa:	e03e      	b.n	800627a <UART_SetConfig+0x27e>
 80061fc:	2304      	movs	r3, #4
 80061fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006202:	e03a      	b.n	800627a <UART_SetConfig+0x27e>
 8006204:	2308      	movs	r3, #8
 8006206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800620a:	e036      	b.n	800627a <UART_SetConfig+0x27e>
 800620c:	2310      	movs	r3, #16
 800620e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006212:	e032      	b.n	800627a <UART_SetConfig+0x27e>
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a30      	ldr	r2, [pc, #192]	@ (80062dc <UART_SetConfig+0x2e0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d12a      	bne.n	8006274 <UART_SetConfig+0x278>
 800621e:	4b31      	ldr	r3, [pc, #196]	@ (80062e4 <UART_SetConfig+0x2e8>)
 8006220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006224:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006228:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800622c:	d01a      	beq.n	8006264 <UART_SetConfig+0x268>
 800622e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006232:	d81b      	bhi.n	800626c <UART_SetConfig+0x270>
 8006234:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006238:	d00c      	beq.n	8006254 <UART_SetConfig+0x258>
 800623a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800623e:	d815      	bhi.n	800626c <UART_SetConfig+0x270>
 8006240:	2b00      	cmp	r3, #0
 8006242:	d003      	beq.n	800624c <UART_SetConfig+0x250>
 8006244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006248:	d008      	beq.n	800625c <UART_SetConfig+0x260>
 800624a:	e00f      	b.n	800626c <UART_SetConfig+0x270>
 800624c:	2300      	movs	r3, #0
 800624e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006252:	e012      	b.n	800627a <UART_SetConfig+0x27e>
 8006254:	2302      	movs	r3, #2
 8006256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800625a:	e00e      	b.n	800627a <UART_SetConfig+0x27e>
 800625c:	2304      	movs	r3, #4
 800625e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006262:	e00a      	b.n	800627a <UART_SetConfig+0x27e>
 8006264:	2308      	movs	r3, #8
 8006266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800626a:	e006      	b.n	800627a <UART_SetConfig+0x27e>
 800626c:	2310      	movs	r3, #16
 800626e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006272:	e002      	b.n	800627a <UART_SetConfig+0x27e>
 8006274:	2310      	movs	r3, #16
 8006276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a17      	ldr	r2, [pc, #92]	@ (80062dc <UART_SetConfig+0x2e0>)
 8006280:	4293      	cmp	r3, r2
 8006282:	f040 80a8 	bne.w	80063d6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006286:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800628a:	2b08      	cmp	r3, #8
 800628c:	d834      	bhi.n	80062f8 <UART_SetConfig+0x2fc>
 800628e:	a201      	add	r2, pc, #4	@ (adr r2, 8006294 <UART_SetConfig+0x298>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062f9 	.word	0x080062f9
 800629c:	080062c1 	.word	0x080062c1
 80062a0:	080062f9 	.word	0x080062f9
 80062a4:	080062c7 	.word	0x080062c7
 80062a8:	080062f9 	.word	0x080062f9
 80062ac:	080062f9 	.word	0x080062f9
 80062b0:	080062f9 	.word	0x080062f9
 80062b4:	080062cf 	.word	0x080062cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062b8:	f7fd fc04 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 80062bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062be:	e021      	b.n	8006304 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062c0:	4b0c      	ldr	r3, [pc, #48]	@ (80062f4 <UART_SetConfig+0x2f8>)
 80062c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062c4:	e01e      	b.n	8006304 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062c6:	f7fd fb8f 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 80062ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062cc:	e01a      	b.n	8006304 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062d4:	e016      	b.n	8006304 <UART_SetConfig+0x308>
 80062d6:	bf00      	nop
 80062d8:	cfff69f3 	.word	0xcfff69f3
 80062dc:	40008000 	.word	0x40008000
 80062e0:	40013800 	.word	0x40013800
 80062e4:	40021000 	.word	0x40021000
 80062e8:	40004400 	.word	0x40004400
 80062ec:	40004800 	.word	0x40004800
 80062f0:	40004c00 	.word	0x40004c00
 80062f4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006302:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 812a 	beq.w	8006560 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006310:	4a9e      	ldr	r2, [pc, #632]	@ (800658c <UART_SetConfig+0x590>)
 8006312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006316:	461a      	mov	r2, r3
 8006318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631a:	fbb3 f3f2 	udiv	r3, r3, r2
 800631e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	4613      	mov	r3, r2
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	4413      	add	r3, r2
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	429a      	cmp	r2, r3
 800632e:	d305      	bcc.n	800633c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	429a      	cmp	r2, r3
 800633a:	d903      	bls.n	8006344 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006342:	e10d      	b.n	8006560 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006346:	2200      	movs	r2, #0
 8006348:	60bb      	str	r3, [r7, #8]
 800634a:	60fa      	str	r2, [r7, #12]
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006350:	4a8e      	ldr	r2, [pc, #568]	@ (800658c <UART_SetConfig+0x590>)
 8006352:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006356:	b29b      	uxth	r3, r3
 8006358:	2200      	movs	r2, #0
 800635a:	603b      	str	r3, [r7, #0]
 800635c:	607a      	str	r2, [r7, #4]
 800635e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006362:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006366:	f7fa fcb7 	bl	8000cd8 <__aeabi_uldivmod>
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	4610      	mov	r0, r2
 8006370:	4619      	mov	r1, r3
 8006372:	f04f 0200 	mov.w	r2, #0
 8006376:	f04f 0300 	mov.w	r3, #0
 800637a:	020b      	lsls	r3, r1, #8
 800637c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006380:	0202      	lsls	r2, r0, #8
 8006382:	6979      	ldr	r1, [r7, #20]
 8006384:	6849      	ldr	r1, [r1, #4]
 8006386:	0849      	lsrs	r1, r1, #1
 8006388:	2000      	movs	r0, #0
 800638a:	460c      	mov	r4, r1
 800638c:	4605      	mov	r5, r0
 800638e:	eb12 0804 	adds.w	r8, r2, r4
 8006392:	eb43 0905 	adc.w	r9, r3, r5
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	469a      	mov	sl, r3
 800639e:	4693      	mov	fp, r2
 80063a0:	4652      	mov	r2, sl
 80063a2:	465b      	mov	r3, fp
 80063a4:	4640      	mov	r0, r8
 80063a6:	4649      	mov	r1, r9
 80063a8:	f7fa fc96 	bl	8000cd8 <__aeabi_uldivmod>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4613      	mov	r3, r2
 80063b2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063ba:	d308      	bcc.n	80063ce <UART_SetConfig+0x3d2>
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063c2:	d204      	bcs.n	80063ce <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6a3a      	ldr	r2, [r7, #32]
 80063ca:	60da      	str	r2, [r3, #12]
 80063cc:	e0c8      	b.n	8006560 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80063d4:	e0c4      	b.n	8006560 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063de:	d167      	bne.n	80064b0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80063e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d828      	bhi.n	800643a <UART_SetConfig+0x43e>
 80063e8:	a201      	add	r2, pc, #4	@ (adr r2, 80063f0 <UART_SetConfig+0x3f4>)
 80063ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ee:	bf00      	nop
 80063f0:	08006415 	.word	0x08006415
 80063f4:	0800641d 	.word	0x0800641d
 80063f8:	08006425 	.word	0x08006425
 80063fc:	0800643b 	.word	0x0800643b
 8006400:	0800642b 	.word	0x0800642b
 8006404:	0800643b 	.word	0x0800643b
 8006408:	0800643b 	.word	0x0800643b
 800640c:	0800643b 	.word	0x0800643b
 8006410:	08006433 	.word	0x08006433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006414:	f7fd fb56 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 8006418:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800641a:	e014      	b.n	8006446 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800641c:	f7fd fb68 	bl	8003af0 <HAL_RCC_GetPCLK2Freq>
 8006420:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006422:	e010      	b.n	8006446 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006424:	4b5a      	ldr	r3, [pc, #360]	@ (8006590 <UART_SetConfig+0x594>)
 8006426:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006428:	e00d      	b.n	8006446 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800642a:	f7fd fadd 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 800642e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006430:	e009      	b.n	8006446 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006436:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006438:	e005      	b.n	8006446 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006444:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 8089 	beq.w	8006560 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006452:	4a4e      	ldr	r2, [pc, #312]	@ (800658c <UART_SetConfig+0x590>)
 8006454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006458:	461a      	mov	r2, r3
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006460:	005a      	lsls	r2, r3, #1
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	085b      	lsrs	r3, r3, #1
 8006468:	441a      	add	r2, r3
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006472:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	2b0f      	cmp	r3, #15
 8006478:	d916      	bls.n	80064a8 <UART_SetConfig+0x4ac>
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006480:	d212      	bcs.n	80064a8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	b29b      	uxth	r3, r3
 8006486:	f023 030f 	bic.w	r3, r3, #15
 800648a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	b29b      	uxth	r3, r3
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	b29a      	uxth	r2, r3
 8006498:	8bfb      	ldrh	r3, [r7, #30]
 800649a:	4313      	orrs	r3, r2
 800649c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	8bfa      	ldrh	r2, [r7, #30]
 80064a4:	60da      	str	r2, [r3, #12]
 80064a6:	e05b      	b.n	8006560 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064ae:	e057      	b.n	8006560 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d828      	bhi.n	800650a <UART_SetConfig+0x50e>
 80064b8:	a201      	add	r2, pc, #4	@ (adr r2, 80064c0 <UART_SetConfig+0x4c4>)
 80064ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064be:	bf00      	nop
 80064c0:	080064e5 	.word	0x080064e5
 80064c4:	080064ed 	.word	0x080064ed
 80064c8:	080064f5 	.word	0x080064f5
 80064cc:	0800650b 	.word	0x0800650b
 80064d0:	080064fb 	.word	0x080064fb
 80064d4:	0800650b 	.word	0x0800650b
 80064d8:	0800650b 	.word	0x0800650b
 80064dc:	0800650b 	.word	0x0800650b
 80064e0:	08006503 	.word	0x08006503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e4:	f7fd faee 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 80064e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064ea:	e014      	b.n	8006516 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064ec:	f7fd fb00 	bl	8003af0 <HAL_RCC_GetPCLK2Freq>
 80064f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064f2:	e010      	b.n	8006516 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064f4:	4b26      	ldr	r3, [pc, #152]	@ (8006590 <UART_SetConfig+0x594>)
 80064f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064f8:	e00d      	b.n	8006516 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064fa:	f7fd fa75 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 80064fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006500:	e009      	b.n	8006516 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006506:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006508:	e005      	b.n	8006516 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006514:	bf00      	nop
    }

    if (pclk != 0U)
 8006516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006518:	2b00      	cmp	r3, #0
 800651a:	d021      	beq.n	8006560 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006520:	4a1a      	ldr	r2, [pc, #104]	@ (800658c <UART_SetConfig+0x590>)
 8006522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006526:	461a      	mov	r2, r3
 8006528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652a:	fbb3 f2f2 	udiv	r2, r3, r2
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	085b      	lsrs	r3, r3, #1
 8006534:	441a      	add	r2, r3
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	fbb2 f3f3 	udiv	r3, r2, r3
 800653e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	2b0f      	cmp	r3, #15
 8006544:	d909      	bls.n	800655a <UART_SetConfig+0x55e>
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800654c:	d205      	bcs.n	800655a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	b29a      	uxth	r2, r3
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60da      	str	r2, [r3, #12]
 8006558:	e002      	b.n	8006560 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2201      	movs	r2, #1
 8006564:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2201      	movs	r2, #1
 800656c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	2200      	movs	r2, #0
 8006574:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2200      	movs	r2, #0
 800657a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800657c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006580:	4618      	mov	r0, r3
 8006582:	3730      	adds	r7, #48	@ 0x30
 8006584:	46bd      	mov	sp, r7
 8006586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800658a:	bf00      	nop
 800658c:	0800f2b8 	.word	0x0800f2b8
 8006590:	00f42400 	.word	0x00f42400

08006594 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a0:	f003 0308 	and.w	r3, r3, #8
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00a      	beq.n	80065be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00a      	beq.n	8006602 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006606:	f003 0304 	and.w	r3, r3, #4
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006628:	f003 0310 	and.w	r3, r3, #16
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00a      	beq.n	8006646 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006670:	2b00      	cmp	r3, #0
 8006672:	d01a      	beq.n	80066aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006692:	d10a      	bne.n	80066aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	605a      	str	r2, [r3, #4]
  }
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b098      	sub	sp, #96	@ 0x60
 80066dc:	af02      	add	r7, sp, #8
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066e8:	f7fc f8d8 	bl	800289c <HAL_GetTick>
 80066ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0308 	and.w	r3, r3, #8
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d12f      	bne.n	800675c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006704:	2200      	movs	r2, #0
 8006706:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f88e 	bl	800682c <UART_WaitOnFlagUntilTimeout>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d022      	beq.n	800675c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006726:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800672a:	653b      	str	r3, [r7, #80]	@ 0x50
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	461a      	mov	r2, r3
 8006732:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006734:	647b      	str	r3, [r7, #68]	@ 0x44
 8006736:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800673a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e6      	bne.n	8006716 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e063      	b.n	8006824 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b04      	cmp	r3, #4
 8006768:	d149      	bne.n	80067fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800676a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006772:	2200      	movs	r2, #0
 8006774:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f857 	bl	800682c <UART_WaitOnFlagUntilTimeout>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d03c      	beq.n	80067fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	e853 3f00 	ldrex	r3, [r3]
 8006790:	623b      	str	r3, [r7, #32]
   return(result);
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006798:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80067a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067aa:	e841 2300 	strex	r3, r2, [r1]
 80067ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1e6      	bne.n	8006784 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3308      	adds	r3, #8
 80067bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f023 0301 	bic.w	r3, r3, #1
 80067cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3308      	adds	r3, #8
 80067d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067d6:	61fa      	str	r2, [r7, #28]
 80067d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	69b9      	ldr	r1, [r7, #24]
 80067dc:	69fa      	ldr	r2, [r7, #28]
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	617b      	str	r3, [r7, #20]
   return(result);
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e5      	bne.n	80067b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e012      	b.n	8006824 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2220      	movs	r2, #32
 800680a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3758      	adds	r7, #88	@ 0x58
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	4613      	mov	r3, r2
 800683a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800683c:	e04f      	b.n	80068de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006844:	d04b      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006846:	f7fc f829 	bl	800289c <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	429a      	cmp	r2, r3
 8006854:	d302      	bcc.n	800685c <UART_WaitOnFlagUntilTimeout+0x30>
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e04e      	b.n	80068fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b00      	cmp	r3, #0
 800686c:	d037      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0xb2>
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b80      	cmp	r3, #128	@ 0x80
 8006872:	d034      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0xb2>
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b40      	cmp	r3, #64	@ 0x40
 8006878:	d031      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	f003 0308 	and.w	r3, r3, #8
 8006884:	2b08      	cmp	r3, #8
 8006886:	d110      	bne.n	80068aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2208      	movs	r2, #8
 800688e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 f95b 	bl	8006b4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2208      	movs	r2, #8
 800689a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e029      	b.n	80068fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068b8:	d111      	bne.n	80068de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f941 	bl	8006b4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e00f      	b.n	80068fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69da      	ldr	r2, [r3, #28]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	4013      	ands	r3, r2
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	bf0c      	ite	eq
 80068ee:	2301      	moveq	r3, #1
 80068f0:	2300      	movne	r3, #0
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	461a      	mov	r2, r3
 80068f6:	79fb      	ldrb	r3, [r7, #7]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d0a0      	beq.n	800683e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006908:	b480      	push	{r7}
 800690a:	b0a3      	sub	sp, #140	@ 0x8c
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	4613      	mov	r3, r2
 8006914:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	88fa      	ldrh	r2, [r7, #6]
 8006920:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	88fa      	ldrh	r2, [r7, #6]
 8006928:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800693a:	d10e      	bne.n	800695a <UART_Start_Receive_IT+0x52>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d105      	bne.n	8006950 <UART_Start_Receive_IT+0x48>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800694a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800694e:	e02d      	b.n	80069ac <UART_Start_Receive_IT+0xa4>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	22ff      	movs	r2, #255	@ 0xff
 8006954:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006958:	e028      	b.n	80069ac <UART_Start_Receive_IT+0xa4>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10d      	bne.n	800697e <UART_Start_Receive_IT+0x76>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d104      	bne.n	8006974 <UART_Start_Receive_IT+0x6c>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	22ff      	movs	r2, #255	@ 0xff
 800696e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006972:	e01b      	b.n	80069ac <UART_Start_Receive_IT+0xa4>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	227f      	movs	r2, #127	@ 0x7f
 8006978:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800697c:	e016      	b.n	80069ac <UART_Start_Receive_IT+0xa4>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006986:	d10d      	bne.n	80069a4 <UART_Start_Receive_IT+0x9c>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d104      	bne.n	800699a <UART_Start_Receive_IT+0x92>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	227f      	movs	r2, #127	@ 0x7f
 8006994:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006998:	e008      	b.n	80069ac <UART_Start_Receive_IT+0xa4>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	223f      	movs	r2, #63	@ 0x3f
 800699e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069a2:	e003      	b.n	80069ac <UART_Start_Receive_IT+0xa4>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2222      	movs	r2, #34	@ 0x22
 80069b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3308      	adds	r3, #8
 80069c2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069c6:	e853 3f00 	ldrex	r3, [r3]
 80069ca:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80069cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069ce:	f043 0301 	orr.w	r3, r3, #1
 80069d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3308      	adds	r3, #8
 80069dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80069e0:	673a      	str	r2, [r7, #112]	@ 0x70
 80069e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80069e6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80069e8:	e841 2300 	strex	r3, r2, [r1]
 80069ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80069ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1e3      	bne.n	80069bc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069fc:	d14f      	bne.n	8006a9e <UART_Start_Receive_IT+0x196>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006a04:	88fa      	ldrh	r2, [r7, #6]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d349      	bcc.n	8006a9e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a12:	d107      	bne.n	8006a24 <UART_Start_Receive_IT+0x11c>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d103      	bne.n	8006a24 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4a47      	ldr	r2, [pc, #284]	@ (8006b3c <UART_Start_Receive_IT+0x234>)
 8006a20:	675a      	str	r2, [r3, #116]	@ 0x74
 8006a22:	e002      	b.n	8006a2a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4a46      	ldr	r2, [pc, #280]	@ (8006b40 <UART_Start_Receive_IT+0x238>)
 8006a28:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d01a      	beq.n	8006a68 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a3a:	e853 3f00 	ldrex	r3, [r3]
 8006a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006a40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a56:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006a5a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e4      	bne.n	8006a32 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a72:	e853 3f00 	ldrex	r3, [r3]
 8006a76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3308      	adds	r3, #8
 8006a86:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006a88:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006a8a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a90:	e841 2300 	strex	r3, r2, [r1]
 8006a94:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e5      	bne.n	8006a68 <UART_Start_Receive_IT+0x160>
 8006a9c:	e046      	b.n	8006b2c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aa6:	d107      	bne.n	8006ab8 <UART_Start_Receive_IT+0x1b0>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d103      	bne.n	8006ab8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a24      	ldr	r2, [pc, #144]	@ (8006b44 <UART_Start_Receive_IT+0x23c>)
 8006ab4:	675a      	str	r2, [r3, #116]	@ 0x74
 8006ab6:	e002      	b.n	8006abe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4a23      	ldr	r2, [pc, #140]	@ (8006b48 <UART_Start_Receive_IT+0x240>)
 8006abc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d019      	beq.n	8006afa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006ada:	677b      	str	r3, [r7, #116]	@ 0x74
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ae6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006aea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e6      	bne.n	8006ac6 <UART_Start_Receive_IT+0x1be>
 8006af8:	e018      	b.n	8006b2c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	613b      	str	r3, [r7, #16]
   return(result);
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f043 0320 	orr.w	r3, r3, #32
 8006b0e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b18:	623b      	str	r3, [r7, #32]
 8006b1a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	69f9      	ldr	r1, [r7, #28]
 8006b1e:	6a3a      	ldr	r2, [r7, #32]
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e6      	bne.n	8006afa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	378c      	adds	r7, #140	@ 0x8c
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	08007369 	.word	0x08007369
 8006b40:	08007005 	.word	0x08007005
 8006b44:	08006e4d 	.word	0x08006e4d
 8006b48:	08006c95 	.word	0x08006c95

08006b4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b095      	sub	sp, #84	@ 0x54
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b72:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b74:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e6      	bne.n	8006b54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b9c:	f023 0301 	bic.w	r3, r3, #1
 8006ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006baa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e3      	bne.n	8006b86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d118      	bne.n	8006bf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	e853 3f00 	ldrex	r3, [r3]
 8006bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f023 0310 	bic.w	r3, r3, #16
 8006bda:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	461a      	mov	r2, r3
 8006be2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	6979      	ldr	r1, [r7, #20]
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e6      	bne.n	8006bc6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c0c:	bf00      	nop
 8006c0e:	3754      	adds	r7, #84	@ 0x54
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f7fa ff94 	bl	8001b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c58:	61fb      	str	r3, [r7, #28]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	61bb      	str	r3, [r7, #24]
 8006c64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	6979      	ldr	r1, [r7, #20]
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e6      	bne.n	8006c44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7ff f9a3 	bl	8005fd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c8a:	bf00      	nop
 8006c8c:	3720      	adds	r7, #32
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b09c      	sub	sp, #112	@ 0x70
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006ca2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cac:	2b22      	cmp	r3, #34	@ 0x22
 8006cae:	f040 80be 	bne.w	8006e2e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006cbc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006cc0:	b2d9      	uxtb	r1, r3
 8006cc2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ccc:	400a      	ands	r2, r1
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cd6:	1c5a      	adds	r2, r3, #1
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f040 80a1 	bne.w	8006e3e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	461a      	mov	r2, r3
 8006d18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d1c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e6      	bne.n	8006cfc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3308      	adds	r3, #8
 8006d34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d40:	f023 0301 	bic.w	r3, r3, #1
 8006d44:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3308      	adds	r3, #8
 8006d4c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006d4e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1e5      	bne.n	8006d2e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2220      	movs	r2, #32
 8006d66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a33      	ldr	r2, [pc, #204]	@ (8006e48 <UART_RxISR_8BIT+0x1b4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d01f      	beq.n	8006dc0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d018      	beq.n	8006dc0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	623b      	str	r3, [r7, #32]
   return(result);
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006da2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	461a      	mov	r2, r3
 8006daa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006dac:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e6      	bne.n	8006d8e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d12e      	bne.n	8006e26 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	e853 3f00 	ldrex	r3, [r3]
 8006dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0310 	bic.w	r3, r3, #16
 8006de2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	461a      	mov	r2, r3
 8006dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dec:	61fb      	str	r3, [r7, #28]
 8006dee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	69b9      	ldr	r1, [r7, #24]
 8006df2:	69fa      	ldr	r2, [r7, #28]
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	617b      	str	r3, [r7, #20]
   return(result);
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e6      	bne.n	8006dce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	f003 0310 	and.w	r3, r3, #16
 8006e0a:	2b10      	cmp	r3, #16
 8006e0c:	d103      	bne.n	8006e16 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2210      	movs	r2, #16
 8006e14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7ff f8e0 	bl	8005fe4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e24:	e00b      	b.n	8006e3e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7fa fdfa 	bl	8001a20 <HAL_UART_RxCpltCallback>
}
 8006e2c:	e007      	b.n	8006e3e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	699a      	ldr	r2, [r3, #24]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f042 0208 	orr.w	r2, r2, #8
 8006e3c:	619a      	str	r2, [r3, #24]
}
 8006e3e:	bf00      	nop
 8006e40:	3770      	adds	r7, #112	@ 0x70
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	40008000 	.word	0x40008000

08006e4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b09c      	sub	sp, #112	@ 0x70
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006e5a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e64:	2b22      	cmp	r3, #34	@ 0x22
 8006e66:	f040 80be 	bne.w	8006fe6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e70:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e78:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e7a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006e7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006e82:	4013      	ands	r3, r2
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e8e:	1c9a      	adds	r2, r3, #2
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f040 80a1 	bne.w	8006ff6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ebc:	e853 3f00 	ldrex	r3, [r3]
 8006ec0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006ec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ec4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ec8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ed2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ed4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ed8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006ee0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e6      	bne.n	8006eb4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3308      	adds	r3, #8
 8006eec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef0:	e853 3f00 	ldrex	r3, [r3]
 8006ef4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef8:	f023 0301 	bic.w	r3, r3, #1
 8006efc:	663b      	str	r3, [r7, #96]	@ 0x60
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3308      	adds	r3, #8
 8006f04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f06:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f0e:	e841 2300 	strex	r3, r2, [r1]
 8006f12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1e5      	bne.n	8006ee6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a33      	ldr	r2, [pc, #204]	@ (8007000 <UART_RxISR_16BIT+0x1b4>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d01f      	beq.n	8006f78 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d018      	beq.n	8006f78 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	461a      	mov	r2, r3
 8006f62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f66:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e6      	bne.n	8006f46 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d12e      	bne.n	8006fde <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f023 0310 	bic.w	r3, r3, #16
 8006f9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006fa4:	61bb      	str	r3, [r7, #24]
 8006fa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	6979      	ldr	r1, [r7, #20]
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	e841 2300 	strex	r3, r2, [r1]
 8006fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e6      	bne.n	8006f86 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	f003 0310 	and.w	r3, r3, #16
 8006fc2:	2b10      	cmp	r3, #16
 8006fc4:	d103      	bne.n	8006fce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2210      	movs	r2, #16
 8006fcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7ff f804 	bl	8005fe4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fdc:	e00b      	b.n	8006ff6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fa fd1e 	bl	8001a20 <HAL_UART_RxCpltCallback>
}
 8006fe4:	e007      	b.n	8006ff6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	699a      	ldr	r2, [r3, #24]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f042 0208 	orr.w	r2, r2, #8
 8006ff4:	619a      	str	r2, [r3, #24]
}
 8006ff6:	bf00      	nop
 8006ff8:	3770      	adds	r7, #112	@ 0x70
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	40008000 	.word	0x40008000

08007004 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b0ac      	sub	sp, #176	@ 0xb0
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007012:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800703a:	2b22      	cmp	r3, #34	@ 0x22
 800703c:	f040 8183 	bne.w	8007346 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007046:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800704a:	e126      	b.n	800729a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007052:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007056:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800705a:	b2d9      	uxtb	r1, r3
 800705c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007060:	b2da      	uxtb	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007066:	400a      	ands	r2, r1
 8007068:	b2d2      	uxtb	r2, r2
 800706a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007070:	1c5a      	adds	r2, r3, #1
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800707c:	b29b      	uxth	r3, r3
 800707e:	3b01      	subs	r3, #1
 8007080:	b29a      	uxth	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007096:	f003 0307 	and.w	r3, r3, #7
 800709a:	2b00      	cmp	r3, #0
 800709c:	d053      	beq.n	8007146 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800709e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d011      	beq.n	80070ce <UART_RxISR_8BIT_FIFOEN+0xca>
 80070aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80070ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00b      	beq.n	80070ce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2201      	movs	r2, #1
 80070bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070c4:	f043 0201 	orr.w	r2, r3, #1
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d011      	beq.n	80070fe <UART_RxISR_8BIT_FIFOEN+0xfa>
 80070da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00b      	beq.n	80070fe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2202      	movs	r2, #2
 80070ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070f4:	f043 0204 	orr.w	r2, r3, #4
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007102:	f003 0304 	and.w	r3, r3, #4
 8007106:	2b00      	cmp	r3, #0
 8007108:	d011      	beq.n	800712e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800710a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00b      	beq.n	800712e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2204      	movs	r2, #4
 800711c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007124:	f043 0202 	orr.w	r2, r3, #2
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007134:	2b00      	cmp	r3, #0
 8007136:	d006      	beq.n	8007146 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7fa fd0f 	bl	8001b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800714c:	b29b      	uxth	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	f040 80a3 	bne.w	800729a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007162:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007168:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	461a      	mov	r2, r3
 8007172:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007176:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007178:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800717c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800717e:	e841 2300 	strex	r3, r2, [r1]
 8007182:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007184:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1e4      	bne.n	8007154 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3308      	adds	r3, #8
 8007190:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007194:	e853 3f00 	ldrex	r3, [r3]
 8007198:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800719a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800719c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071a0:	f023 0301 	bic.w	r3, r3, #1
 80071a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3308      	adds	r3, #8
 80071ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80071b2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80071b4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80071b8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80071ba:	e841 2300 	strex	r3, r2, [r1]
 80071be:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80071c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1e1      	bne.n	800718a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2220      	movs	r2, #32
 80071ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a60      	ldr	r2, [pc, #384]	@ (8007360 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d021      	beq.n	8007228 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d01a      	beq.n	8007228 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071fa:	e853 3f00 	ldrex	r3, [r3]
 80071fe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007202:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007206:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007214:	657b      	str	r3, [r7, #84]	@ 0x54
 8007216:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007218:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800721a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800721c:	e841 2300 	strex	r3, r2, [r1]
 8007220:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007222:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1e4      	bne.n	80071f2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800722c:	2b01      	cmp	r3, #1
 800722e:	d130      	bne.n	8007292 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007246:	f023 0310 	bic.w	r3, r3, #16
 800724a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007258:	643b      	str	r3, [r7, #64]	@ 0x40
 800725a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800725e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007260:	e841 2300 	strex	r3, r2, [r1]
 8007264:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e4      	bne.n	8007236 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	f003 0310 	and.w	r3, r3, #16
 8007276:	2b10      	cmp	r3, #16
 8007278:	d103      	bne.n	8007282 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2210      	movs	r2, #16
 8007280:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7fe feaa 	bl	8005fe4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007290:	e00e      	b.n	80072b0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7fa fbc4 	bl	8001a20 <HAL_UART_RxCpltCallback>
        break;
 8007298:	e00a      	b.n	80072b0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800729a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d006      	beq.n	80072b0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80072a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072a6:	f003 0320 	and.w	r3, r3, #32
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f47f aece 	bne.w	800704c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072b6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80072ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d049      	beq.n	8007356 <UART_RxISR_8BIT_FIFOEN+0x352>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80072c8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d242      	bcs.n	8007356 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3308      	adds	r3, #8
 80072d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	e853 3f00 	ldrex	r3, [r3]
 80072de:	61fb      	str	r3, [r7, #28]
   return(result);
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	3308      	adds	r3, #8
 80072f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80072f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072fc:	e841 2300 	strex	r3, r2, [r1]
 8007300:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1e3      	bne.n	80072d0 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a16      	ldr	r2, [pc, #88]	@ (8007364 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800730c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	60bb      	str	r3, [r7, #8]
   return(result);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f043 0320 	orr.w	r3, r3, #32
 8007322:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007330:	61bb      	str	r3, [r7, #24]
 8007332:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007334:	6979      	ldr	r1, [r7, #20]
 8007336:	69ba      	ldr	r2, [r7, #24]
 8007338:	e841 2300 	strex	r3, r2, [r1]
 800733c:	613b      	str	r3, [r7, #16]
   return(result);
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1e4      	bne.n	800730e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007344:	e007      	b.n	8007356 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	699a      	ldr	r2, [r3, #24]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f042 0208 	orr.w	r2, r2, #8
 8007354:	619a      	str	r2, [r3, #24]
}
 8007356:	bf00      	nop
 8007358:	37b0      	adds	r7, #176	@ 0xb0
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	40008000 	.word	0x40008000
 8007364:	08006c95 	.word	0x08006c95

08007368 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b0ae      	sub	sp, #184	@ 0xb8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007376:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800739e:	2b22      	cmp	r3, #34	@ 0x22
 80073a0:	f040 8187 	bne.w	80076b2 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80073aa:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073ae:	e12a      	b.n	8007606 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80073c2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80073c6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80073ca:	4013      	ands	r3, r2
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073d8:	1c9a      	adds	r2, r3, #2
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	3b01      	subs	r3, #1
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80073fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073fe:	f003 0307 	and.w	r3, r3, #7
 8007402:	2b00      	cmp	r3, #0
 8007404:	d053      	beq.n	80074ae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007406:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d011      	beq.n	8007436 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00b      	beq.n	8007436 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2201      	movs	r2, #1
 8007424:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800742c:	f043 0201 	orr.w	r2, r3, #1
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007436:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d011      	beq.n	8007466 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007442:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00b      	beq.n	8007466 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2202      	movs	r2, #2
 8007454:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800745c:	f043 0204 	orr.w	r2, r3, #4
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007466:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800746a:	f003 0304 	and.w	r3, r3, #4
 800746e:	2b00      	cmp	r3, #0
 8007470:	d011      	beq.n	8007496 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00b      	beq.n	8007496 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2204      	movs	r2, #4
 8007484:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800748c:	f043 0202 	orr.w	r2, r3, #2
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800749c:	2b00      	cmp	r3, #0
 800749e:	d006      	beq.n	80074ae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f7fa fb5b 	bl	8001b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f040 80a5 	bne.w	8007606 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80074ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	461a      	mov	r2, r3
 80074da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80074e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80074f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e2      	bne.n	80074bc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3308      	adds	r3, #8
 80074fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007500:	e853 3f00 	ldrex	r3, [r3]
 8007504:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007508:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800750c:	f023 0301 	bic.w	r3, r3, #1
 8007510:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	3308      	adds	r3, #8
 800751a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800751e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007520:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007522:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007524:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007526:	e841 2300 	strex	r3, r2, [r1]
 800752a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800752c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1e1      	bne.n	80074f6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2220      	movs	r2, #32
 8007536:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a60      	ldr	r2, [pc, #384]	@ (80076cc <UART_RxISR_16BIT_FIFOEN+0x364>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d021      	beq.n	8007594 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d01a      	beq.n	8007594 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800756c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800756e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007572:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007580:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007582:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007586:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800758e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e4      	bne.n	800755e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007598:	2b01      	cmp	r3, #1
 800759a:	d130      	bne.n	80075fe <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075aa:	e853 3f00 	ldrex	r3, [r3]
 80075ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b2:	f023 0310 	bic.w	r3, r3, #16
 80075b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80075c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075cc:	e841 2300 	strex	r3, r2, [r1]
 80075d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e4      	bne.n	80075a2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	f003 0310 	and.w	r3, r3, #16
 80075e2:	2b10      	cmp	r3, #16
 80075e4:	d103      	bne.n	80075ee <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2210      	movs	r2, #16
 80075ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80075f4:	4619      	mov	r1, r3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7fe fcf4 	bl	8005fe4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80075fc:	e00e      	b.n	800761c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7fa fa0e 	bl	8001a20 <HAL_UART_RxCpltCallback>
        break;
 8007604:	e00a      	b.n	800761c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007606:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800760a:	2b00      	cmp	r3, #0
 800760c:	d006      	beq.n	800761c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800760e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007612:	f003 0320 	and.w	r3, r3, #32
 8007616:	2b00      	cmp	r3, #0
 8007618:	f47f aeca 	bne.w	80073b0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007622:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007626:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800762a:	2b00      	cmp	r3, #0
 800762c:	d049      	beq.n	80076c2 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007634:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007638:	429a      	cmp	r2, r3
 800763a:	d242      	bcs.n	80076c2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3308      	adds	r3, #8
 8007642:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	e853 3f00 	ldrex	r3, [r3]
 800764a:	623b      	str	r3, [r7, #32]
   return(result);
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007652:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3308      	adds	r3, #8
 800765c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007660:	633a      	str	r2, [r7, #48]	@ 0x30
 8007662:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800766e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e3      	bne.n	800763c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a16      	ldr	r2, [pc, #88]	@ (80076d0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007678:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	60fb      	str	r3, [r7, #12]
   return(result);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f043 0320 	orr.w	r3, r3, #32
 800768e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800769c:	61fb      	str	r3, [r7, #28]
 800769e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	69b9      	ldr	r1, [r7, #24]
 80076a2:	69fa      	ldr	r2, [r7, #28]
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	617b      	str	r3, [r7, #20]
   return(result);
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e4      	bne.n	800767a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076b0:	e007      	b.n	80076c2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	699a      	ldr	r2, [r3, #24]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f042 0208 	orr.w	r2, r2, #8
 80076c0:	619a      	str	r2, [r3, #24]
}
 80076c2:	bf00      	nop
 80076c4:	37b8      	adds	r7, #184	@ 0xb8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	40008000 	.word	0x40008000
 80076d0:	08006e4d 	.word	0x08006e4d

080076d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800771e:	2b01      	cmp	r3, #1
 8007720:	d101      	bne.n	8007726 <HAL_UARTEx_DisableFifoMode+0x16>
 8007722:	2302      	movs	r3, #2
 8007724:	e027      	b.n	8007776 <HAL_UARTEx_DisableFifoMode+0x66>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2224      	movs	r2, #36	@ 0x24
 8007732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0201 	bic.w	r2, r2, #1
 800774c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007754:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2220      	movs	r2, #32
 8007768:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007792:	2b01      	cmp	r3, #1
 8007794:	d101      	bne.n	800779a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007796:	2302      	movs	r3, #2
 8007798:	e02d      	b.n	80077f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2224      	movs	r2, #36	@ 0x24
 80077a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f022 0201 	bic.w	r2, r2, #1
 80077c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f850 	bl	800787c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b084      	sub	sp, #16
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800780e:	2b01      	cmp	r3, #1
 8007810:	d101      	bne.n	8007816 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007812:	2302      	movs	r3, #2
 8007814:	e02d      	b.n	8007872 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2224      	movs	r2, #36	@ 0x24
 8007822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 0201 	bic.w	r2, r2, #1
 800783c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f812 	bl	800787c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007888:	2b00      	cmp	r3, #0
 800788a:	d108      	bne.n	800789e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800789c:	e031      	b.n	8007902 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800789e:	2308      	movs	r3, #8
 80078a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078a2:	2308      	movs	r3, #8
 80078a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	0e5b      	lsrs	r3, r3, #25
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	0f5b      	lsrs	r3, r3, #29
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	f003 0307 	and.w	r3, r3, #7
 80078c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	7b3a      	ldrb	r2, [r7, #12]
 80078ca:	4911      	ldr	r1, [pc, #68]	@ (8007910 <UARTEx_SetNbDataToProcess+0x94>)
 80078cc:	5c8a      	ldrb	r2, [r1, r2]
 80078ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078d2:	7b3a      	ldrb	r2, [r7, #12]
 80078d4:	490f      	ldr	r1, [pc, #60]	@ (8007914 <UARTEx_SetNbDataToProcess+0x98>)
 80078d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80078dc:	b29a      	uxth	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
 80078e6:	7b7a      	ldrb	r2, [r7, #13]
 80078e8:	4909      	ldr	r1, [pc, #36]	@ (8007910 <UARTEx_SetNbDataToProcess+0x94>)
 80078ea:	5c8a      	ldrb	r2, [r1, r2]
 80078ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078f0:	7b7a      	ldrb	r2, [r7, #13]
 80078f2:	4908      	ldr	r1, [pc, #32]	@ (8007914 <UARTEx_SetNbDataToProcess+0x98>)
 80078f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007902:	bf00      	nop
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	0800f2d0 	.word	0x0800f2d0
 8007914:	0800f2d8 	.word	0x0800f2d8

08007918 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800791c:	4907      	ldr	r1, [pc, #28]	@ (800793c <MX_FATFS_Init+0x24>)
 800791e:	4808      	ldr	r0, [pc, #32]	@ (8007940 <MX_FATFS_Init+0x28>)
 8007920:	f003 f900 	bl	800ab24 <FATFS_LinkDriver>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d002      	beq.n	8007930 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800792a:	f04f 33ff 	mov.w	r3, #4294967295
 800792e:	e003      	b.n	8007938 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8007930:	4b04      	ldr	r3, [pc, #16]	@ (8007944 <MX_FATFS_Init+0x2c>)
 8007932:	2201      	movs	r2, #1
 8007934:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8007936:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8007938:	4618      	mov	r0, r3
 800793a:	bd80      	pop	{r7, pc}
 800793c:	200029dc 	.word	0x200029dc
 8007940:	20000014 	.word	0x20000014
 8007944:	200029e0 	.word	0x200029e0

08007948 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007948:	b480      	push	{r7}
 800794a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800794c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800794e:	4618      	mov	r0, r3
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	4603      	mov	r3, r0
 8007960:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
   return SD_disk_initialize(pdrv);
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	4618      	mov	r0, r3
 8007966:	f7f9 fd1b 	bl	80013a0 <SD_disk_initialize>
 800796a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800796c:	4618      	mov	r0, r3
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	4603      	mov	r3, r0
 800797c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800797e:	79fb      	ldrb	r3, [r7, #7]
 8007980:	4618      	mov	r0, r3
 8007982:	f7f9 fdf7 	bl	8001574 <SD_disk_status>
 8007986:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007988:	4618      	mov	r0, r3
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	60b9      	str	r1, [r7, #8]
 8007998:	607a      	str	r2, [r7, #4]
 800799a:	603b      	str	r3, [r7, #0]
 800799c:	4603      	mov	r3, r0
 800799e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80079a0:	7bf8      	ldrb	r0, [r7, #15]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	68b9      	ldr	r1, [r7, #8]
 80079a8:	f7f9 fdfa 	bl	80015a0 <SD_disk_read>
 80079ac:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b084      	sub	sp, #16
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	603b      	str	r3, [r7, #0]
 80079c2:	4603      	mov	r3, r0
 80079c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	 return SD_disk_write(pdrv, buff, sector, count);
 80079c6:	7bf8      	ldrb	r0, [r7, #15]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	68b9      	ldr	r1, [r7, #8]
 80079ce:	f7f9 fe51 	bl	8001674 <SD_disk_write>
 80079d2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	4603      	mov	r3, r0
 80079e4:	603a      	str	r2, [r7, #0]
 80079e6:	71fb      	strb	r3, [r7, #7]
 80079e8:	460b      	mov	r3, r1
 80079ea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80079ec:	79b9      	ldrb	r1, [r7, #6]
 80079ee:	79fb      	ldrb	r3, [r7, #7]
 80079f0:	683a      	ldr	r2, [r7, #0]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7f9 fec2 	bl	800177c <SD_disk_ioctl>
 80079f8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
	...

08007a04 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007a0e:	79fb      	ldrb	r3, [r7, #7]
 8007a10:	4a08      	ldr	r2, [pc, #32]	@ (8007a34 <disk_status+0x30>)
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4413      	add	r3, r2
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	79fa      	ldrb	r2, [r7, #7]
 8007a1c:	4905      	ldr	r1, [pc, #20]	@ (8007a34 <disk_status+0x30>)
 8007a1e:	440a      	add	r2, r1
 8007a20:	7a12      	ldrb	r2, [r2, #8]
 8007a22:	4610      	mov	r0, r2
 8007a24:	4798      	blx	r3
 8007a26:	4603      	mov	r3, r0
 8007a28:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	20002c0c 	.word	0x20002c0c

08007a38 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	4603      	mov	r3, r0
 8007a40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007a46:	79fb      	ldrb	r3, [r7, #7]
 8007a48:	4a0d      	ldr	r2, [pc, #52]	@ (8007a80 <disk_initialize+0x48>)
 8007a4a:	5cd3      	ldrb	r3, [r2, r3]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d111      	bne.n	8007a74 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007a50:	79fb      	ldrb	r3, [r7, #7]
 8007a52:	4a0b      	ldr	r2, [pc, #44]	@ (8007a80 <disk_initialize+0x48>)
 8007a54:	2101      	movs	r1, #1
 8007a56:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007a58:	79fb      	ldrb	r3, [r7, #7]
 8007a5a:	4a09      	ldr	r2, [pc, #36]	@ (8007a80 <disk_initialize+0x48>)
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	79fa      	ldrb	r2, [r7, #7]
 8007a66:	4906      	ldr	r1, [pc, #24]	@ (8007a80 <disk_initialize+0x48>)
 8007a68:	440a      	add	r2, r1
 8007a6a:	7a12      	ldrb	r2, [r2, #8]
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	4798      	blx	r3
 8007a70:	4603      	mov	r3, r0
 8007a72:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	20002c0c 	.word	0x20002c0c

08007a84 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007a84:	b590      	push	{r4, r7, lr}
 8007a86:	b087      	sub	sp, #28
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60b9      	str	r1, [r7, #8]
 8007a8c:	607a      	str	r2, [r7, #4]
 8007a8e:	603b      	str	r3, [r7, #0]
 8007a90:	4603      	mov	r3, r0
 8007a92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	4a0a      	ldr	r2, [pc, #40]	@ (8007ac0 <disk_read+0x3c>)
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	689c      	ldr	r4, [r3, #8]
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
 8007aa2:	4a07      	ldr	r2, [pc, #28]	@ (8007ac0 <disk_read+0x3c>)
 8007aa4:	4413      	add	r3, r2
 8007aa6:	7a18      	ldrb	r0, [r3, #8]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	68b9      	ldr	r1, [r7, #8]
 8007aae:	47a0      	blx	r4
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	371c      	adds	r7, #28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd90      	pop	{r4, r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20002c0c 	.word	0x20002c0c

08007ac4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007ac4:	b590      	push	{r4, r7, lr}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60b9      	str	r1, [r7, #8]
 8007acc:	607a      	str	r2, [r7, #4]
 8007ace:	603b      	str	r3, [r7, #0]
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8007b00 <disk_write+0x3c>)
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	68dc      	ldr	r4, [r3, #12]
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	4a07      	ldr	r2, [pc, #28]	@ (8007b00 <disk_write+0x3c>)
 8007ae4:	4413      	add	r3, r2
 8007ae6:	7a18      	ldrb	r0, [r3, #8]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	68b9      	ldr	r1, [r7, #8]
 8007aee:	47a0      	blx	r4
 8007af0:	4603      	mov	r3, r0
 8007af2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	371c      	adds	r7, #28
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd90      	pop	{r4, r7, pc}
 8007afe:	bf00      	nop
 8007b00:	20002c0c 	.word	0x20002c0c

08007b04 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	603a      	str	r2, [r7, #0]
 8007b0e:	71fb      	strb	r3, [r7, #7]
 8007b10:	460b      	mov	r3, r1
 8007b12:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007b14:	79fb      	ldrb	r3, [r7, #7]
 8007b16:	4a09      	ldr	r2, [pc, #36]	@ (8007b3c <disk_ioctl+0x38>)
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4413      	add	r3, r2
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	79fa      	ldrb	r2, [r7, #7]
 8007b22:	4906      	ldr	r1, [pc, #24]	@ (8007b3c <disk_ioctl+0x38>)
 8007b24:	440a      	add	r2, r1
 8007b26:	7a10      	ldrb	r0, [r2, #8]
 8007b28:	79b9      	ldrb	r1, [r7, #6]
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	4798      	blx	r3
 8007b2e:	4603      	mov	r3, r0
 8007b30:	73fb      	strb	r3, [r7, #15]
  return res;
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	20002c0c 	.word	0x20002c0c

08007b40 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007b50:	89fb      	ldrh	r3, [r7, #14]
 8007b52:	021b      	lsls	r3, r3, #8
 8007b54:	b21a      	sxth	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	b21b      	sxth	r3, r3
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	b21b      	sxth	r3, r3
 8007b60:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007b62:	89fb      	ldrh	r3, [r7, #14]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	3303      	adds	r3, #3
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	021b      	lsls	r3, r3, #8
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	3202      	adds	r2, #2
 8007b88:	7812      	ldrb	r2, [r2, #0]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	021b      	lsls	r3, r3, #8
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	3201      	adds	r2, #1
 8007b96:	7812      	ldrb	r2, [r2, #0]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	021b      	lsls	r3, r3, #8
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	7812      	ldrb	r2, [r2, #0]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
	return rv;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	1c5a      	adds	r2, r3, #1
 8007bc6:	607a      	str	r2, [r7, #4]
 8007bc8:	887a      	ldrh	r2, [r7, #2]
 8007bca:	b2d2      	uxtb	r2, r2
 8007bcc:	701a      	strb	r2, [r3, #0]
 8007bce:	887b      	ldrh	r3, [r7, #2]
 8007bd0:	0a1b      	lsrs	r3, r3, #8
 8007bd2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	607a      	str	r2, [r7, #4]
 8007bda:	887a      	ldrh	r2, [r7, #2]
 8007bdc:	b2d2      	uxtb	r2, r2
 8007bde:	701a      	strb	r2, [r3, #0]
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	1c5a      	adds	r2, r3, #1
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	b2d2      	uxtb	r2, r2
 8007c00:	701a      	strb	r2, [r3, #0]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	0a1b      	lsrs	r3, r3, #8
 8007c06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	607a      	str	r2, [r7, #4]
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	b2d2      	uxtb	r2, r2
 8007c12:	701a      	strb	r2, [r3, #0]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	0a1b      	lsrs	r3, r3, #8
 8007c18:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	607a      	str	r2, [r7, #4]
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	b2d2      	uxtb	r2, r2
 8007c24:	701a      	strb	r2, [r3, #0]
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	0a1b      	lsrs	r3, r3, #8
 8007c2a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	1c5a      	adds	r2, r3, #1
 8007c30:	607a      	str	r2, [r7, #4]
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	b2d2      	uxtb	r2, r2
 8007c36:	701a      	strb	r2, [r3, #0]
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007c44:	b480      	push	{r7}
 8007c46:	b087      	sub	sp, #28
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00d      	beq.n	8007c7a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	1c53      	adds	r3, r2, #1
 8007c62:	613b      	str	r3, [r7, #16]
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	1c59      	adds	r1, r3, #1
 8007c68:	6179      	str	r1, [r7, #20]
 8007c6a:	7812      	ldrb	r2, [r2, #0]
 8007c6c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	3b01      	subs	r3, #1
 8007c72:	607b      	str	r3, [r7, #4]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1f1      	bne.n	8007c5e <mem_cpy+0x1a>
	}
}
 8007c7a:	bf00      	nop
 8007c7c:	371c      	adds	r7, #28
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007c86:	b480      	push	{r7}
 8007c88:	b087      	sub	sp, #28
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	60b9      	str	r1, [r7, #8]
 8007c90:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	617a      	str	r2, [r7, #20]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	b2d2      	uxtb	r2, r2
 8007ca0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	607b      	str	r3, [r7, #4]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1f3      	bne.n	8007c96 <mem_set+0x10>
}
 8007cae:	bf00      	nop
 8007cb0:	bf00      	nop
 8007cb2:	371c      	adds	r7, #28
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007cbc:	b480      	push	{r7}
 8007cbe:	b089      	sub	sp, #36	@ 0x24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	61fb      	str	r3, [r7, #28]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	1c5a      	adds	r2, r3, #1
 8007cd8:	61fa      	str	r2, [r7, #28]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	1c5a      	adds	r2, r3, #1
 8007ce2:	61ba      	str	r2, [r7, #24]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	1acb      	subs	r3, r1, r3
 8007ce8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	3b01      	subs	r3, #1
 8007cee:	607b      	str	r3, [r7, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d002      	beq.n	8007cfc <mem_cmp+0x40>
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d0eb      	beq.n	8007cd4 <mem_cmp+0x18>

	return r;
 8007cfc:	697b      	ldr	r3, [r7, #20]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3724      	adds	r7, #36	@ 0x24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007d14:	e002      	b.n	8007d1c <chk_chr+0x12>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	607b      	str	r3, [r7, #4]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d005      	beq.n	8007d30 <chk_chr+0x26>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	461a      	mov	r2, r3
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d1f2      	bne.n	8007d16 <chk_chr+0xc>
	return *str;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	781b      	ldrb	r3, [r3, #0]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60bb      	str	r3, [r7, #8]
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	e029      	b.n	8007da8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007d54:	4a27      	ldr	r2, [pc, #156]	@ (8007df4 <chk_lock+0xb4>)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	011b      	lsls	r3, r3, #4
 8007d5a:	4413      	add	r3, r2
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d01d      	beq.n	8007d9e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007d62:	4a24      	ldr	r2, [pc, #144]	@ (8007df4 <chk_lock+0xb4>)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	011b      	lsls	r3, r3, #4
 8007d68:	4413      	add	r3, r2
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d116      	bne.n	8007da2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007d74:	4a1f      	ldr	r2, [pc, #124]	@ (8007df4 <chk_lock+0xb4>)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	011b      	lsls	r3, r3, #4
 8007d7a:	4413      	add	r3, r2
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d10c      	bne.n	8007da2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007d88:	4a1a      	ldr	r2, [pc, #104]	@ (8007df4 <chk_lock+0xb4>)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	011b      	lsls	r3, r3, #4
 8007d8e:	4413      	add	r3, r2
 8007d90:	3308      	adds	r3, #8
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d102      	bne.n	8007da2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007d9c:	e007      	b.n	8007dae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	3301      	adds	r3, #1
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d9d2      	bls.n	8007d54 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d109      	bne.n	8007dc8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d102      	bne.n	8007dc0 <chk_lock+0x80>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d101      	bne.n	8007dc4 <chk_lock+0x84>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	e010      	b.n	8007de6 <chk_lock+0xa6>
 8007dc4:	2312      	movs	r3, #18
 8007dc6:	e00e      	b.n	8007de6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d108      	bne.n	8007de0 <chk_lock+0xa0>
 8007dce:	4a09      	ldr	r2, [pc, #36]	@ (8007df4 <chk_lock+0xb4>)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	011b      	lsls	r3, r3, #4
 8007dd4:	4413      	add	r3, r2
 8007dd6:	330c      	adds	r3, #12
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dde:	d101      	bne.n	8007de4 <chk_lock+0xa4>
 8007de0:	2310      	movs	r3, #16
 8007de2:	e000      	b.n	8007de6 <chk_lock+0xa6>
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	200029ec 	.word	0x200029ec

08007df8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	607b      	str	r3, [r7, #4]
 8007e02:	e002      	b.n	8007e0a <enq_lock+0x12>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3301      	adds	r3, #1
 8007e08:	607b      	str	r3, [r7, #4]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d806      	bhi.n	8007e1e <enq_lock+0x26>
 8007e10:	4a09      	ldr	r2, [pc, #36]	@ (8007e38 <enq_lock+0x40>)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	011b      	lsls	r3, r3, #4
 8007e16:	4413      	add	r3, r2
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1f2      	bne.n	8007e04 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	bf14      	ite	ne
 8007e24:	2301      	movne	r3, #1
 8007e26:	2300      	moveq	r3, #0
 8007e28:	b2db      	uxtb	r3, r3
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	200029ec 	.word	0x200029ec

08007e3c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	e01f      	b.n	8007e8c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007e4c:	4a41      	ldr	r2, [pc, #260]	@ (8007f54 <inc_lock+0x118>)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	011b      	lsls	r3, r3, #4
 8007e52:	4413      	add	r3, r2
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d113      	bne.n	8007e86 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007e5e:	4a3d      	ldr	r2, [pc, #244]	@ (8007f54 <inc_lock+0x118>)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	011b      	lsls	r3, r3, #4
 8007e64:	4413      	add	r3, r2
 8007e66:	3304      	adds	r3, #4
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d109      	bne.n	8007e86 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007e72:	4a38      	ldr	r2, [pc, #224]	@ (8007f54 <inc_lock+0x118>)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	011b      	lsls	r3, r3, #4
 8007e78:	4413      	add	r3, r2
 8007e7a:	3308      	adds	r3, #8
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d006      	beq.n	8007e94 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d9dc      	bls.n	8007e4c <inc_lock+0x10>
 8007e92:	e000      	b.n	8007e96 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007e94:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d132      	bne.n	8007f02 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	e002      	b.n	8007ea8 <inc_lock+0x6c>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d806      	bhi.n	8007ebc <inc_lock+0x80>
 8007eae:	4a29      	ldr	r2, [pc, #164]	@ (8007f54 <inc_lock+0x118>)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	011b      	lsls	r3, r3, #4
 8007eb4:	4413      	add	r3, r2
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1f2      	bne.n	8007ea2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d101      	bne.n	8007ec6 <inc_lock+0x8a>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e040      	b.n	8007f48 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	4922      	ldr	r1, [pc, #136]	@ (8007f54 <inc_lock+0x118>)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	011b      	lsls	r3, r3, #4
 8007ed0:	440b      	add	r3, r1
 8007ed2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	491e      	ldr	r1, [pc, #120]	@ (8007f54 <inc_lock+0x118>)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	011b      	lsls	r3, r3, #4
 8007ede:	440b      	add	r3, r1
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	695a      	ldr	r2, [r3, #20]
 8007ee8:	491a      	ldr	r1, [pc, #104]	@ (8007f54 <inc_lock+0x118>)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	011b      	lsls	r3, r3, #4
 8007eee:	440b      	add	r3, r1
 8007ef0:	3308      	adds	r3, #8
 8007ef2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007ef4:	4a17      	ldr	r2, [pc, #92]	@ (8007f54 <inc_lock+0x118>)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	011b      	lsls	r3, r3, #4
 8007efa:	4413      	add	r3, r2
 8007efc:	330c      	adds	r3, #12
 8007efe:	2200      	movs	r2, #0
 8007f00:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d009      	beq.n	8007f1c <inc_lock+0xe0>
 8007f08:	4a12      	ldr	r2, [pc, #72]	@ (8007f54 <inc_lock+0x118>)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	011b      	lsls	r3, r3, #4
 8007f0e:	4413      	add	r3, r2
 8007f10:	330c      	adds	r3, #12
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <inc_lock+0xe0>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	e015      	b.n	8007f48 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d108      	bne.n	8007f34 <inc_lock+0xf8>
 8007f22:	4a0c      	ldr	r2, [pc, #48]	@ (8007f54 <inc_lock+0x118>)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	011b      	lsls	r3, r3, #4
 8007f28:	4413      	add	r3, r2
 8007f2a:	330c      	adds	r3, #12
 8007f2c:	881b      	ldrh	r3, [r3, #0]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	e001      	b.n	8007f38 <inc_lock+0xfc>
 8007f34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f38:	4906      	ldr	r1, [pc, #24]	@ (8007f54 <inc_lock+0x118>)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	011b      	lsls	r3, r3, #4
 8007f3e:	440b      	add	r3, r1
 8007f40:	330c      	adds	r3, #12
 8007f42:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	3301      	adds	r3, #1
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	200029ec 	.word	0x200029ec

08007f58 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	3b01      	subs	r3, #1
 8007f64:	607b      	str	r3, [r7, #4]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d825      	bhi.n	8007fb8 <dec_lock+0x60>
		n = Files[i].ctr;
 8007f6c:	4a17      	ldr	r2, [pc, #92]	@ (8007fcc <dec_lock+0x74>)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	011b      	lsls	r3, r3, #4
 8007f72:	4413      	add	r3, r2
 8007f74:	330c      	adds	r3, #12
 8007f76:	881b      	ldrh	r3, [r3, #0]
 8007f78:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007f7a:	89fb      	ldrh	r3, [r7, #14]
 8007f7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f80:	d101      	bne.n	8007f86 <dec_lock+0x2e>
 8007f82:	2300      	movs	r3, #0
 8007f84:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007f86:	89fb      	ldrh	r3, [r7, #14]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <dec_lock+0x3a>
 8007f8c:	89fb      	ldrh	r3, [r7, #14]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007f92:	4a0e      	ldr	r2, [pc, #56]	@ (8007fcc <dec_lock+0x74>)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	011b      	lsls	r3, r3, #4
 8007f98:	4413      	add	r3, r2
 8007f9a:	330c      	adds	r3, #12
 8007f9c:	89fa      	ldrh	r2, [r7, #14]
 8007f9e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007fa0:	89fb      	ldrh	r3, [r7, #14]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d105      	bne.n	8007fb2 <dec_lock+0x5a>
 8007fa6:	4a09      	ldr	r2, [pc, #36]	@ (8007fcc <dec_lock+0x74>)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	011b      	lsls	r3, r3, #4
 8007fac:	4413      	add	r3, r2
 8007fae:	2200      	movs	r2, #0
 8007fb0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	737b      	strb	r3, [r7, #13]
 8007fb6:	e001      	b.n	8007fbc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007fb8:	2302      	movs	r3, #2
 8007fba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007fbc:	7b7b      	ldrb	r3, [r7, #13]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	200029ec 	.word	0x200029ec

08007fd0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	e010      	b.n	8008000 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007fde:	4a0d      	ldr	r2, [pc, #52]	@ (8008014 <clear_lock+0x44>)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	011b      	lsls	r3, r3, #4
 8007fe4:	4413      	add	r3, r2
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d105      	bne.n	8007ffa <clear_lock+0x2a>
 8007fee:	4a09      	ldr	r2, [pc, #36]	@ (8008014 <clear_lock+0x44>)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	4413      	add	r3, r2
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d9eb      	bls.n	8007fde <clear_lock+0xe>
	}
}
 8008006:	bf00      	nop
 8008008:	bf00      	nop
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	200029ec 	.word	0x200029ec

08008018 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	78db      	ldrb	r3, [r3, #3]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d034      	beq.n	8008096 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008030:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	7858      	ldrb	r0, [r3, #1]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800803c:	2301      	movs	r3, #1
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	f7ff fd40 	bl	8007ac4 <disk_write>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d002      	beq.n	8008050 <sync_window+0x38>
			res = FR_DISK_ERR;
 800804a:	2301      	movs	r3, #1
 800804c:	73fb      	strb	r3, [r7, #15]
 800804e:	e022      	b.n	8008096 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	1ad2      	subs	r2, r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	429a      	cmp	r2, r3
 8008064:	d217      	bcs.n	8008096 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	789b      	ldrb	r3, [r3, #2]
 800806a:	613b      	str	r3, [r7, #16]
 800806c:	e010      	b.n	8008090 <sync_window+0x78>
					wsect += fs->fsize;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a1b      	ldr	r3, [r3, #32]
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	4413      	add	r3, r2
 8008076:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	7858      	ldrb	r0, [r3, #1]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008082:	2301      	movs	r3, #1
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	f7ff fd1d 	bl	8007ac4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	3b01      	subs	r3, #1
 800808e:	613b      	str	r3, [r7, #16]
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d8eb      	bhi.n	800806e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008096:	7bfb      	ldrb	r3, [r7, #15]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3718      	adds	r7, #24
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d01b      	beq.n	80080f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7ff ffad 	bl	8008018 <sync_window>
 80080be:	4603      	mov	r3, r0
 80080c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d113      	bne.n	80080f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	7858      	ldrb	r0, [r3, #1]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80080d2:	2301      	movs	r3, #1
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	f7ff fcd5 	bl	8007a84 <disk_read>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d004      	beq.n	80080ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80080e0:	f04f 33ff 	mov.w	r3, #4294967295
 80080e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	683a      	ldr	r2, [r7, #0]
 80080ee:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80080f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
	...

080080fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7ff ff87 	bl	8008018 <sync_window>
 800810a:	4603      	mov	r3, r0
 800810c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800810e:	7bfb      	ldrb	r3, [r7, #15]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d159      	bne.n	80081c8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	2b03      	cmp	r3, #3
 800811a:	d149      	bne.n	80081b0 <sync_fs+0xb4>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	791b      	ldrb	r3, [r3, #4]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d145      	bne.n	80081b0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	899b      	ldrh	r3, [r3, #12]
 800812e:	461a      	mov	r2, r3
 8008130:	2100      	movs	r1, #0
 8008132:	f7ff fda8 	bl	8007c86 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	3338      	adds	r3, #56	@ 0x38
 800813a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800813e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008142:	4618      	mov	r0, r3
 8008144:	f7ff fd37 	bl	8007bb6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3338      	adds	r3, #56	@ 0x38
 800814c:	4921      	ldr	r1, [pc, #132]	@ (80081d4 <sync_fs+0xd8>)
 800814e:	4618      	mov	r0, r3
 8008150:	f7ff fd4c 	bl	8007bec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	3338      	adds	r3, #56	@ 0x38
 8008158:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800815c:	491e      	ldr	r1, [pc, #120]	@ (80081d8 <sync_fs+0xdc>)
 800815e:	4618      	mov	r0, r3
 8008160:	f7ff fd44 	bl	8007bec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	3338      	adds	r3, #56	@ 0x38
 8008168:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	4619      	mov	r1, r3
 8008172:	4610      	mov	r0, r2
 8008174:	f7ff fd3a 	bl	8007bec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	3338      	adds	r3, #56	@ 0x38
 800817c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	4619      	mov	r1, r3
 8008186:	4610      	mov	r0, r2
 8008188:	f7ff fd30 	bl	8007bec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008190:	1c5a      	adds	r2, r3, #1
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	7858      	ldrb	r0, [r3, #1]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081a4:	2301      	movs	r3, #1
 80081a6:	f7ff fc8d 	bl	8007ac4 <disk_write>
			fs->fsi_flag = 0;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	785b      	ldrb	r3, [r3, #1]
 80081b4:	2200      	movs	r2, #0
 80081b6:	2100      	movs	r1, #0
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7ff fca3 	bl	8007b04 <disk_ioctl>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <sync_fs+0xcc>
 80081c4:	2301      	movs	r3, #1
 80081c6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	41615252 	.word	0x41615252
 80081d8:	61417272 	.word	0x61417272

080081dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	3b02      	subs	r3, #2
 80081ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	3b02      	subs	r3, #2
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d301      	bcc.n	80081fc <clust2sect+0x20>
 80081f8:	2300      	movs	r3, #0
 80081fa:	e008      	b.n	800820e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	895b      	ldrh	r3, [r3, #10]
 8008200:	461a      	mov	r2, r3
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	fb03 f202 	mul.w	r2, r3, r2
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800820c:	4413      	add	r3, r2
}
 800820e:	4618      	mov	r0, r3
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b086      	sub	sp, #24
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d904      	bls.n	800823a <get_fat+0x20>
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	429a      	cmp	r2, r3
 8008238:	d302      	bcc.n	8008240 <get_fat+0x26>
		val = 1;	/* Internal error */
 800823a:	2301      	movs	r3, #1
 800823c:	617b      	str	r3, [r7, #20]
 800823e:	e0ba      	b.n	80083b6 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008240:	f04f 33ff 	mov.w	r3, #4294967295
 8008244:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	2b03      	cmp	r3, #3
 800824c:	f000 8082 	beq.w	8008354 <get_fat+0x13a>
 8008250:	2b03      	cmp	r3, #3
 8008252:	f300 80a6 	bgt.w	80083a2 <get_fat+0x188>
 8008256:	2b01      	cmp	r3, #1
 8008258:	d002      	beq.n	8008260 <get_fat+0x46>
 800825a:	2b02      	cmp	r3, #2
 800825c:	d055      	beq.n	800830a <get_fat+0xf0>
 800825e:	e0a0      	b.n	80083a2 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	085b      	lsrs	r3, r3, #1
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	4413      	add	r3, r2
 800826c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	899b      	ldrh	r3, [r3, #12]
 8008276:	4619      	mov	r1, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	fbb3 f3f1 	udiv	r3, r3, r1
 800827e:	4413      	add	r3, r2
 8008280:	4619      	mov	r1, r3
 8008282:	6938      	ldr	r0, [r7, #16]
 8008284:	f7ff ff0c 	bl	80080a0 <move_window>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	f040 808c 	bne.w	80083a8 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	60fa      	str	r2, [r7, #12]
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	8992      	ldrh	r2, [r2, #12]
 800829a:	fbb3 f1f2 	udiv	r1, r3, r2
 800829e:	fb01 f202 	mul.w	r2, r1, r2
 80082a2:	1a9b      	subs	r3, r3, r2
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	4413      	add	r3, r2
 80082a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80082ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	899b      	ldrh	r3, [r3, #12]
 80082b6:	4619      	mov	r1, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80082be:	4413      	add	r3, r2
 80082c0:	4619      	mov	r1, r3
 80082c2:	6938      	ldr	r0, [r7, #16]
 80082c4:	f7ff feec 	bl	80080a0 <move_window>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d16e      	bne.n	80083ac <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	899b      	ldrh	r3, [r3, #12]
 80082d2:	461a      	mov	r2, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80082da:	fb01 f202 	mul.w	r2, r1, r2
 80082de:	1a9b      	subs	r3, r3, r2
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	4413      	add	r3, r2
 80082e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80082e8:	021b      	lsls	r3, r3, #8
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d002      	beq.n	8008300 <get_fat+0xe6>
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	091b      	lsrs	r3, r3, #4
 80082fe:	e002      	b.n	8008306 <get_fat+0xec>
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008306:	617b      	str	r3, [r7, #20]
			break;
 8008308:	e055      	b.n	80083b6 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	899b      	ldrh	r3, [r3, #12]
 8008312:	085b      	lsrs	r3, r3, #1
 8008314:	b29b      	uxth	r3, r3
 8008316:	4619      	mov	r1, r3
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	fbb3 f3f1 	udiv	r3, r3, r1
 800831e:	4413      	add	r3, r2
 8008320:	4619      	mov	r1, r3
 8008322:	6938      	ldr	r0, [r7, #16]
 8008324:	f7ff febc 	bl	80080a0 <move_window>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d140      	bne.n	80083b0 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	005b      	lsls	r3, r3, #1
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	8992      	ldrh	r2, [r2, #12]
 800833c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008340:	fb00 f202 	mul.w	r2, r0, r2
 8008344:	1a9b      	subs	r3, r3, r2
 8008346:	440b      	add	r3, r1
 8008348:	4618      	mov	r0, r3
 800834a:	f7ff fbf9 	bl	8007b40 <ld_word>
 800834e:	4603      	mov	r3, r0
 8008350:	617b      	str	r3, [r7, #20]
			break;
 8008352:	e030      	b.n	80083b6 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	899b      	ldrh	r3, [r3, #12]
 800835c:	089b      	lsrs	r3, r3, #2
 800835e:	b29b      	uxth	r3, r3
 8008360:	4619      	mov	r1, r3
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	fbb3 f3f1 	udiv	r3, r3, r1
 8008368:	4413      	add	r3, r2
 800836a:	4619      	mov	r1, r3
 800836c:	6938      	ldr	r0, [r7, #16]
 800836e:	f7ff fe97 	bl	80080a0 <move_window>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d11d      	bne.n	80083b4 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	8992      	ldrh	r2, [r2, #12]
 8008386:	fbb3 f0f2 	udiv	r0, r3, r2
 800838a:	fb00 f202 	mul.w	r2, r0, r2
 800838e:	1a9b      	subs	r3, r3, r2
 8008390:	440b      	add	r3, r1
 8008392:	4618      	mov	r0, r3
 8008394:	f7ff fbec 	bl	8007b70 <ld_dword>
 8008398:	4603      	mov	r3, r0
 800839a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800839e:	617b      	str	r3, [r7, #20]
			break;
 80083a0:	e009      	b.n	80083b6 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80083a2:	2301      	movs	r3, #1
 80083a4:	617b      	str	r3, [r7, #20]
 80083a6:	e006      	b.n	80083b6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80083a8:	bf00      	nop
 80083aa:	e004      	b.n	80083b6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80083ac:	bf00      	nop
 80083ae:	e002      	b.n	80083b6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80083b0:	bf00      	nop
 80083b2:	e000      	b.n	80083b6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80083b4:	bf00      	nop
		}
	}

	return val;
 80083b6:	697b      	ldr	r3, [r7, #20]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3718      	adds	r7, #24
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80083c0:	b590      	push	{r4, r7, lr}
 80083c2:	b089      	sub	sp, #36	@ 0x24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80083cc:	2302      	movs	r3, #2
 80083ce:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	f240 8109 	bls.w	80085ea <put_fat+0x22a>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	429a      	cmp	r2, r3
 80083e0:	f080 8103 	bcs.w	80085ea <put_fat+0x22a>
		switch (fs->fs_type) {
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	2b03      	cmp	r3, #3
 80083ea:	f000 80b6 	beq.w	800855a <put_fat+0x19a>
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	f300 80fb 	bgt.w	80085ea <put_fat+0x22a>
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d003      	beq.n	8008400 <put_fat+0x40>
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	f000 8083 	beq.w	8008504 <put_fat+0x144>
 80083fe:	e0f4      	b.n	80085ea <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	61bb      	str	r3, [r7, #24]
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	085b      	lsrs	r3, r3, #1
 8008408:	69ba      	ldr	r2, [r7, #24]
 800840a:	4413      	add	r3, r2
 800840c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	899b      	ldrh	r3, [r3, #12]
 8008416:	4619      	mov	r1, r3
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	fbb3 f3f1 	udiv	r3, r3, r1
 800841e:	4413      	add	r3, r2
 8008420:	4619      	mov	r1, r3
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f7ff fe3c 	bl	80080a0 <move_window>
 8008428:	4603      	mov	r3, r0
 800842a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800842c:	7ffb      	ldrb	r3, [r7, #31]
 800842e:	2b00      	cmp	r3, #0
 8008430:	f040 80d4 	bne.w	80085dc <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	1c5a      	adds	r2, r3, #1
 800843e:	61ba      	str	r2, [r7, #24]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	8992      	ldrh	r2, [r2, #12]
 8008444:	fbb3 f0f2 	udiv	r0, r3, r2
 8008448:	fb00 f202 	mul.w	r2, r0, r2
 800844c:	1a9b      	subs	r3, r3, r2
 800844e:	440b      	add	r3, r1
 8008450:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00d      	beq.n	8008478 <put_fat+0xb8>
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	b25b      	sxtb	r3, r3
 8008462:	f003 030f 	and.w	r3, r3, #15
 8008466:	b25a      	sxtb	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	b2db      	uxtb	r3, r3
 800846c:	011b      	lsls	r3, r3, #4
 800846e:	b25b      	sxtb	r3, r3
 8008470:	4313      	orrs	r3, r2
 8008472:	b25b      	sxtb	r3, r3
 8008474:	b2db      	uxtb	r3, r3
 8008476:	e001      	b.n	800847c <put_fat+0xbc>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	b2db      	uxtb	r3, r3
 800847c:	697a      	ldr	r2, [r7, #20]
 800847e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2201      	movs	r2, #1
 8008484:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	899b      	ldrh	r3, [r3, #12]
 800848e:	4619      	mov	r1, r3
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	fbb3 f3f1 	udiv	r3, r3, r1
 8008496:	4413      	add	r3, r2
 8008498:	4619      	mov	r1, r3
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f7ff fe00 	bl	80080a0 <move_window>
 80084a0:	4603      	mov	r3, r0
 80084a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80084a4:	7ffb      	ldrb	r3, [r7, #31]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f040 809a 	bne.w	80085e0 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	899b      	ldrh	r3, [r3, #12]
 80084b6:	461a      	mov	r2, r3
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80084be:	fb00 f202 	mul.w	r2, r0, r2
 80084c2:	1a9b      	subs	r3, r3, r2
 80084c4:	440b      	add	r3, r1
 80084c6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <put_fat+0x11a>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	091b      	lsrs	r3, r3, #4
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	e00e      	b.n	80084f8 <put_fat+0x138>
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	b25b      	sxtb	r3, r3
 80084e0:	f023 030f 	bic.w	r3, r3, #15
 80084e4:	b25a      	sxtb	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	0a1b      	lsrs	r3, r3, #8
 80084ea:	b25b      	sxtb	r3, r3
 80084ec:	f003 030f 	and.w	r3, r3, #15
 80084f0:	b25b      	sxtb	r3, r3
 80084f2:	4313      	orrs	r3, r2
 80084f4:	b25b      	sxtb	r3, r3
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2201      	movs	r2, #1
 8008500:	70da      	strb	r2, [r3, #3]
			break;
 8008502:	e072      	b.n	80085ea <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	899b      	ldrh	r3, [r3, #12]
 800850c:	085b      	lsrs	r3, r3, #1
 800850e:	b29b      	uxth	r3, r3
 8008510:	4619      	mov	r1, r3
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	fbb3 f3f1 	udiv	r3, r3, r1
 8008518:	4413      	add	r3, r2
 800851a:	4619      	mov	r1, r3
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f7ff fdbf 	bl	80080a0 <move_window>
 8008522:	4603      	mov	r3, r0
 8008524:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008526:	7ffb      	ldrb	r3, [r7, #31]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d15b      	bne.n	80085e4 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	8992      	ldrh	r2, [r2, #12]
 800853a:	fbb3 f0f2 	udiv	r0, r3, r2
 800853e:	fb00 f202 	mul.w	r2, r0, r2
 8008542:	1a9b      	subs	r3, r3, r2
 8008544:	440b      	add	r3, r1
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	b292      	uxth	r2, r2
 800854a:	4611      	mov	r1, r2
 800854c:	4618      	mov	r0, r3
 800854e:	f7ff fb32 	bl	8007bb6 <st_word>
			fs->wflag = 1;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2201      	movs	r2, #1
 8008556:	70da      	strb	r2, [r3, #3]
			break;
 8008558:	e047      	b.n	80085ea <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	899b      	ldrh	r3, [r3, #12]
 8008562:	089b      	lsrs	r3, r3, #2
 8008564:	b29b      	uxth	r3, r3
 8008566:	4619      	mov	r1, r3
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	fbb3 f3f1 	udiv	r3, r3, r1
 800856e:	4413      	add	r3, r2
 8008570:	4619      	mov	r1, r3
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f7ff fd94 	bl	80080a0 <move_window>
 8008578:	4603      	mov	r3, r0
 800857a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800857c:	7ffb      	ldrb	r3, [r7, #31]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d132      	bne.n	80085e8 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	8992      	ldrh	r2, [r2, #12]
 8008596:	fbb3 f0f2 	udiv	r0, r3, r2
 800859a:	fb00 f202 	mul.w	r2, r0, r2
 800859e:	1a9b      	subs	r3, r3, r2
 80085a0:	440b      	add	r3, r1
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7ff fae4 	bl	8007b70 <ld_dword>
 80085a8:	4603      	mov	r3, r0
 80085aa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80085ae:	4323      	orrs	r3, r4
 80085b0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	8992      	ldrh	r2, [r2, #12]
 80085c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80085c4:	fb00 f202 	mul.w	r2, r0, r2
 80085c8:	1a9b      	subs	r3, r3, r2
 80085ca:	440b      	add	r3, r1
 80085cc:	6879      	ldr	r1, [r7, #4]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7ff fb0c 	bl	8007bec <st_dword>
			fs->wflag = 1;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2201      	movs	r2, #1
 80085d8:	70da      	strb	r2, [r3, #3]
			break;
 80085da:	e006      	b.n	80085ea <put_fat+0x22a>
			if (res != FR_OK) break;
 80085dc:	bf00      	nop
 80085de:	e004      	b.n	80085ea <put_fat+0x22a>
			if (res != FR_OK) break;
 80085e0:	bf00      	nop
 80085e2:	e002      	b.n	80085ea <put_fat+0x22a>
			if (res != FR_OK) break;
 80085e4:	bf00      	nop
 80085e6:	e000      	b.n	80085ea <put_fat+0x22a>
			if (res != FR_OK) break;
 80085e8:	bf00      	nop
		}
	}
	return res;
 80085ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3724      	adds	r7, #36	@ 0x24
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd90      	pop	{r4, r7, pc}

080085f4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b088      	sub	sp, #32
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d904      	bls.n	800861a <remove_chain+0x26>
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	429a      	cmp	r2, r3
 8008618:	d301      	bcc.n	800861e <remove_chain+0x2a>
 800861a:	2302      	movs	r3, #2
 800861c:	e04b      	b.n	80086b6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00c      	beq.n	800863e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008624:	f04f 32ff 	mov.w	r2, #4294967295
 8008628:	6879      	ldr	r1, [r7, #4]
 800862a:	69b8      	ldr	r0, [r7, #24]
 800862c:	f7ff fec8 	bl	80083c0 <put_fat>
 8008630:	4603      	mov	r3, r0
 8008632:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008634:	7ffb      	ldrb	r3, [r7, #31]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <remove_chain+0x4a>
 800863a:	7ffb      	ldrb	r3, [r7, #31]
 800863c:	e03b      	b.n	80086b6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800863e:	68b9      	ldr	r1, [r7, #8]
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f7ff fdea 	bl	800821a <get_fat>
 8008646:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d031      	beq.n	80086b2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d101      	bne.n	8008658 <remove_chain+0x64>
 8008654:	2302      	movs	r3, #2
 8008656:	e02e      	b.n	80086b6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865e:	d101      	bne.n	8008664 <remove_chain+0x70>
 8008660:	2301      	movs	r3, #1
 8008662:	e028      	b.n	80086b6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008664:	2200      	movs	r2, #0
 8008666:	68b9      	ldr	r1, [r7, #8]
 8008668:	69b8      	ldr	r0, [r7, #24]
 800866a:	f7ff fea9 	bl	80083c0 <put_fat>
 800866e:	4603      	mov	r3, r0
 8008670:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008672:	7ffb      	ldrb	r3, [r7, #31]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <remove_chain+0x88>
 8008678:	7ffb      	ldrb	r3, [r7, #31]
 800867a:	e01c      	b.n	80086b6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	699a      	ldr	r2, [r3, #24]
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	3b02      	subs	r3, #2
 8008686:	429a      	cmp	r2, r3
 8008688:	d20b      	bcs.n	80086a2 <remove_chain+0xae>
			fs->free_clst++;
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	791b      	ldrb	r3, [r3, #4]
 8008698:	f043 0301 	orr.w	r3, r3, #1
 800869c:	b2da      	uxtb	r2, r3
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d3c6      	bcc.n	800863e <remove_chain+0x4a>
 80086b0:	e000      	b.n	80086b4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80086b2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3720      	adds	r7, #32
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b088      	sub	sp, #32
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10d      	bne.n	80086f0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d004      	beq.n	80086ea <create_chain+0x2c>
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d31b      	bcc.n	8008722 <create_chain+0x64>
 80086ea:	2301      	movs	r3, #1
 80086ec:	61bb      	str	r3, [r7, #24]
 80086ee:	e018      	b.n	8008722 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7ff fd91 	bl	800821a <get_fat>
 80086f8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d801      	bhi.n	8008704 <create_chain+0x46>
 8008700:	2301      	movs	r3, #1
 8008702:	e070      	b.n	80087e6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800870a:	d101      	bne.n	8008710 <create_chain+0x52>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	e06a      	b.n	80087e6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	429a      	cmp	r2, r3
 8008718:	d201      	bcs.n	800871e <create_chain+0x60>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	e063      	b.n	80087e6 <create_chain+0x128>
		scl = clst;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	3301      	adds	r3, #1
 800872a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	69db      	ldr	r3, [r3, #28]
 8008730:	69fa      	ldr	r2, [r7, #28]
 8008732:	429a      	cmp	r2, r3
 8008734:	d307      	bcc.n	8008746 <create_chain+0x88>
				ncl = 2;
 8008736:	2302      	movs	r3, #2
 8008738:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800873a:	69fa      	ldr	r2, [r7, #28]
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	429a      	cmp	r2, r3
 8008740:	d901      	bls.n	8008746 <create_chain+0x88>
 8008742:	2300      	movs	r3, #0
 8008744:	e04f      	b.n	80087e6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008746:	69f9      	ldr	r1, [r7, #28]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7ff fd66 	bl	800821a <get_fat>
 800874e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00e      	beq.n	8008774 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d003      	beq.n	8008764 <create_chain+0xa6>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008762:	d101      	bne.n	8008768 <create_chain+0xaa>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	e03e      	b.n	80087e6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008768:	69fa      	ldr	r2, [r7, #28]
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	429a      	cmp	r2, r3
 800876e:	d1da      	bne.n	8008726 <create_chain+0x68>
 8008770:	2300      	movs	r3, #0
 8008772:	e038      	b.n	80087e6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008774:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008776:	f04f 32ff 	mov.w	r2, #4294967295
 800877a:	69f9      	ldr	r1, [r7, #28]
 800877c:	6938      	ldr	r0, [r7, #16]
 800877e:	f7ff fe1f 	bl	80083c0 <put_fat>
 8008782:	4603      	mov	r3, r0
 8008784:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008786:	7dfb      	ldrb	r3, [r7, #23]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d109      	bne.n	80087a0 <create_chain+0xe2>
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d006      	beq.n	80087a0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008792:	69fa      	ldr	r2, [r7, #28]
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6938      	ldr	r0, [r7, #16]
 8008798:	f7ff fe12 	bl	80083c0 <put_fat>
 800879c:	4603      	mov	r3, r0
 800879e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80087a0:	7dfb      	ldrb	r3, [r7, #23]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d116      	bne.n	80087d4 <create_chain+0x116>
		fs->last_clst = ncl;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	69fa      	ldr	r2, [r7, #28]
 80087aa:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	699a      	ldr	r2, [r3, #24]
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	3b02      	subs	r3, #2
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d804      	bhi.n	80087c4 <create_chain+0x106>
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	1e5a      	subs	r2, r3, #1
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	791b      	ldrb	r3, [r3, #4]
 80087c8:	f043 0301 	orr.w	r3, r3, #1
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	711a      	strb	r2, [r3, #4]
 80087d2:	e007      	b.n	80087e4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80087d4:	7dfb      	ldrb	r3, [r7, #23]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d102      	bne.n	80087e0 <create_chain+0x122>
 80087da:	f04f 33ff 	mov.w	r3, #4294967295
 80087de:	e000      	b.n	80087e2 <create_chain+0x124>
 80087e0:	2301      	movs	r3, #1
 80087e2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80087e4:	69fb      	ldr	r3, [r7, #28]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3720      	adds	r7, #32
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b087      	sub	sp, #28
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008802:	3304      	adds	r3, #4
 8008804:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	899b      	ldrh	r3, [r3, #12]
 800880a:	461a      	mov	r2, r3
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	8952      	ldrh	r2, [r2, #10]
 8008816:	fbb3 f3f2 	udiv	r3, r3, r2
 800881a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	1d1a      	adds	r2, r3, #4
 8008820:	613a      	str	r2, [r7, #16]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <clmt_clust+0x42>
 800882c:	2300      	movs	r3, #0
 800882e:	e010      	b.n	8008852 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	429a      	cmp	r2, r3
 8008836:	d307      	bcc.n	8008848 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008838:	697a      	ldr	r2, [r7, #20]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	617b      	str	r3, [r7, #20]
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	3304      	adds	r3, #4
 8008844:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008846:	e7e9      	b.n	800881c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008848:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	4413      	add	r3, r2
}
 8008852:	4618      	mov	r0, r3
 8008854:	371c      	adds	r7, #28
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b086      	sub	sp, #24
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008874:	d204      	bcs.n	8008880 <dir_sdi+0x22>
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	f003 031f 	and.w	r3, r3, #31
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008880:	2302      	movs	r3, #2
 8008882:	e071      	b.n	8008968 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d106      	bne.n	80088a4 <dir_sdi+0x46>
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2b02      	cmp	r3, #2
 800889c:	d902      	bls.n	80088a4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10c      	bne.n	80088c4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	095b      	lsrs	r3, r3, #5
 80088ae:	693a      	ldr	r2, [r7, #16]
 80088b0:	8912      	ldrh	r2, [r2, #8]
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d301      	bcc.n	80088ba <dir_sdi+0x5c>
 80088b6:	2302      	movs	r3, #2
 80088b8:	e056      	b.n	8008968 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	61da      	str	r2, [r3, #28]
 80088c2:	e02d      	b.n	8008920 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	895b      	ldrh	r3, [r3, #10]
 80088c8:	461a      	mov	r2, r3
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	899b      	ldrh	r3, [r3, #12]
 80088ce:	fb02 f303 	mul.w	r3, r2, r3
 80088d2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80088d4:	e019      	b.n	800890a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6979      	ldr	r1, [r7, #20]
 80088da:	4618      	mov	r0, r3
 80088dc:	f7ff fc9d 	bl	800821a <get_fat>
 80088e0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e8:	d101      	bne.n	80088ee <dir_sdi+0x90>
 80088ea:	2301      	movs	r3, #1
 80088ec:	e03c      	b.n	8008968 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d904      	bls.n	80088fe <dir_sdi+0xa0>
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	69db      	ldr	r3, [r3, #28]
 80088f8:	697a      	ldr	r2, [r7, #20]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d301      	bcc.n	8008902 <dir_sdi+0xa4>
 80088fe:	2302      	movs	r3, #2
 8008900:	e032      	b.n	8008968 <dir_sdi+0x10a>
			ofs -= csz;
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800890a:	683a      	ldr	r2, [r7, #0]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	429a      	cmp	r2, r3
 8008910:	d2e1      	bcs.n	80088d6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008912:	6979      	ldr	r1, [r7, #20]
 8008914:	6938      	ldr	r0, [r7, #16]
 8008916:	f7ff fc61 	bl	80081dc <clust2sect>
 800891a:	4602      	mov	r2, r0
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <dir_sdi+0xd4>
 800892e:	2302      	movs	r3, #2
 8008930:	e01a      	b.n	8008968 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	69da      	ldr	r2, [r3, #28]
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	899b      	ldrh	r3, [r3, #12]
 800893a:	4619      	mov	r1, r3
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008942:	441a      	add	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	899b      	ldrh	r3, [r3, #12]
 8008952:	461a      	mov	r2, r3
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	fbb3 f0f2 	udiv	r0, r3, r2
 800895a:	fb00 f202 	mul.w	r2, r0, r2
 800895e:	1a9b      	subs	r3, r3, r2
 8008960:	18ca      	adds	r2, r1, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	3320      	adds	r3, #32
 8008986:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	69db      	ldr	r3, [r3, #28]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d003      	beq.n	8008998 <dir_next+0x28>
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008996:	d301      	bcc.n	800899c <dir_next+0x2c>
 8008998:	2304      	movs	r3, #4
 800899a:	e0bb      	b.n	8008b14 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	899b      	ldrh	r3, [r3, #12]
 80089a0:	461a      	mov	r2, r3
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80089a8:	fb01 f202 	mul.w	r2, r1, r2
 80089ac:	1a9b      	subs	r3, r3, r2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f040 809d 	bne.w	8008aee <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	69db      	ldr	r3, [r3, #28]
 80089b8:	1c5a      	adds	r2, r3, #1
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10b      	bne.n	80089de <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	095b      	lsrs	r3, r3, #5
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	8912      	ldrh	r2, [r2, #8]
 80089ce:	4293      	cmp	r3, r2
 80089d0:	f0c0 808d 	bcc.w	8008aee <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	61da      	str	r2, [r3, #28]
 80089da:	2304      	movs	r3, #4
 80089dc:	e09a      	b.n	8008b14 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	899b      	ldrh	r3, [r3, #12]
 80089e2:	461a      	mov	r2, r3
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	8952      	ldrh	r2, [r2, #10]
 80089ee:	3a01      	subs	r2, #1
 80089f0:	4013      	ands	r3, r2
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d17b      	bne.n	8008aee <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	4619      	mov	r1, r3
 80089fe:	4610      	mov	r0, r2
 8008a00:	f7ff fc0b 	bl	800821a <get_fat>
 8008a04:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d801      	bhi.n	8008a10 <dir_next+0xa0>
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	e081      	b.n	8008b14 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a16:	d101      	bne.n	8008a1c <dir_next+0xac>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e07b      	b.n	8008b14 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	69db      	ldr	r3, [r3, #28]
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d359      	bcc.n	8008ada <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d104      	bne.n	8008a36 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	61da      	str	r2, [r3, #28]
 8008a32:	2304      	movs	r3, #4
 8008a34:	e06e      	b.n	8008b14 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	4610      	mov	r0, r2
 8008a40:	f7ff fe3d 	bl	80086be <create_chain>
 8008a44:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d101      	bne.n	8008a50 <dir_next+0xe0>
 8008a4c:	2307      	movs	r3, #7
 8008a4e:	e061      	b.n	8008b14 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d101      	bne.n	8008a5a <dir_next+0xea>
 8008a56:	2302      	movs	r3, #2
 8008a58:	e05c      	b.n	8008b14 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a60:	d101      	bne.n	8008a66 <dir_next+0xf6>
 8008a62:	2301      	movs	r3, #1
 8008a64:	e056      	b.n	8008b14 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f7ff fad6 	bl	8008018 <sync_window>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <dir_next+0x106>
 8008a72:	2301      	movs	r3, #1
 8008a74:	e04e      	b.n	8008b14 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	899b      	ldrh	r3, [r3, #12]
 8008a80:	461a      	mov	r2, r3
 8008a82:	2100      	movs	r1, #0
 8008a84:	f7ff f8ff 	bl	8007c86 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008a88:	2300      	movs	r3, #0
 8008a8a:	613b      	str	r3, [r7, #16]
 8008a8c:	6979      	ldr	r1, [r7, #20]
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f7ff fba4 	bl	80081dc <clust2sect>
 8008a94:	4602      	mov	r2, r0
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	635a      	str	r2, [r3, #52]	@ 0x34
 8008a9a:	e012      	b.n	8008ac2 <dir_next+0x152>
						fs->wflag = 1;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f7ff fab8 	bl	8008018 <sync_window>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <dir_next+0x142>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e030      	b.n	8008b14 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	613b      	str	r3, [r7, #16]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008abc:	1c5a      	adds	r2, r3, #1
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	635a      	str	r2, [r3, #52]	@ 0x34
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	895b      	ldrh	r3, [r3, #10]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d3e6      	bcc.n	8008a9c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	1ad2      	subs	r2, r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008ae0:	6979      	ldr	r1, [r7, #20]
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f7ff fb7a 	bl	80081dc <clust2sect>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	899b      	ldrh	r3, [r3, #12]
 8008afe:	461a      	mov	r2, r3
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b06:	fb00 f202 	mul.w	r2, r0, r2
 8008b0a:	1a9b      	subs	r3, r3, r2
 8008b0c:	18ca      	adds	r2, r1, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3718      	adds	r7, #24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7ff fe95 	bl	800885e <dir_sdi>
 8008b34:	4603      	mov	r3, r0
 8008b36:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008b38:	7dfb      	ldrb	r3, [r7, #23]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d12b      	bne.n	8008b96 <dir_alloc+0x7a>
		n = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	69db      	ldr	r3, [r3, #28]
 8008b46:	4619      	mov	r1, r3
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f7ff faa9 	bl	80080a0 <move_window>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d11d      	bne.n	8008b94 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a1b      	ldr	r3, [r3, #32]
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	2be5      	cmp	r3, #229	@ 0xe5
 8008b60:	d004      	beq.n	8008b6c <dir_alloc+0x50>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d107      	bne.n	8008b7c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	613b      	str	r3, [r7, #16]
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d102      	bne.n	8008b80 <dir_alloc+0x64>
 8008b7a:	e00c      	b.n	8008b96 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008b80:	2101      	movs	r1, #1
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7ff fef4 	bl	8008970 <dir_next>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008b8c:	7dfb      	ldrb	r3, [r7, #23]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d0d7      	beq.n	8008b42 <dir_alloc+0x26>
 8008b92:	e000      	b.n	8008b96 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008b94:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
 8008b98:	2b04      	cmp	r3, #4
 8008b9a:	d101      	bne.n	8008ba0 <dir_alloc+0x84>
 8008b9c:	2307      	movs	r3, #7
 8008b9e:	75fb      	strb	r3, [r7, #23]
	return res;
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	331a      	adds	r3, #26
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fe ffc1 	bl	8007b40 <ld_word>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	2b03      	cmp	r3, #3
 8008bc8:	d109      	bne.n	8008bde <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	3314      	adds	r3, #20
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fe ffb6 	bl	8007b40 <ld_word>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	041b      	lsls	r3, r3, #16
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008bde:	68fb      	ldr	r3, [r7, #12]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	331a      	adds	r3, #26
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	b292      	uxth	r2, r2
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fe ffd9 	bl	8007bb6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	2b03      	cmp	r3, #3
 8008c0a:	d109      	bne.n	8008c20 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	f103 0214 	add.w	r2, r3, #20
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	0c1b      	lsrs	r3, r3, #16
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	4619      	mov	r1, r3
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	f7fe ffcb 	bl	8007bb6 <st_word>
	}
}
 8008c20:	bf00      	nop
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008c28:	b590      	push	{r4, r7, lr}
 8008c2a:	b087      	sub	sp, #28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	331a      	adds	r3, #26
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fe ff82 	bl	8007b40 <ld_word>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <cmp_lfn+0x1e>
 8008c42:	2300      	movs	r3, #0
 8008c44:	e059      	b.n	8008cfa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c4e:	1e5a      	subs	r2, r3, #1
 8008c50:	4613      	mov	r3, r2
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	4413      	add	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	4413      	add	r3, r2
 8008c5a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	81fb      	strh	r3, [r7, #14]
 8008c60:	2300      	movs	r3, #0
 8008c62:	613b      	str	r3, [r7, #16]
 8008c64:	e033      	b.n	8008cce <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008c66:	4a27      	ldr	r2, [pc, #156]	@ (8008d04 <cmp_lfn+0xdc>)
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	4413      	add	r3, r2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7fe ff63 	bl	8007b40 <ld_word>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008c7e:	89fb      	ldrh	r3, [r7, #14]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d01a      	beq.n	8008cba <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	2bfe      	cmp	r3, #254	@ 0xfe
 8008c88:	d812      	bhi.n	8008cb0 <cmp_lfn+0x88>
 8008c8a:	89bb      	ldrh	r3, [r7, #12]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f001 ff95 	bl	800abbc <ff_wtoupper>
 8008c92:	4603      	mov	r3, r0
 8008c94:	461c      	mov	r4, r3
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	1c5a      	adds	r2, r3, #1
 8008c9a:	617a      	str	r2, [r7, #20]
 8008c9c:	005b      	lsls	r3, r3, #1
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	881b      	ldrh	r3, [r3, #0]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f001 ff89 	bl	800abbc <ff_wtoupper>
 8008caa:	4603      	mov	r3, r0
 8008cac:	429c      	cmp	r4, r3
 8008cae:	d001      	beq.n	8008cb4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	e022      	b.n	8008cfa <cmp_lfn+0xd2>
			}
			wc = uc;
 8008cb4:	89bb      	ldrh	r3, [r7, #12]
 8008cb6:	81fb      	strh	r3, [r7, #14]
 8008cb8:	e006      	b.n	8008cc8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008cba:	89bb      	ldrh	r3, [r7, #12]
 8008cbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d001      	beq.n	8008cc8 <cmp_lfn+0xa0>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	e018      	b.n	8008cfa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	613b      	str	r3, [r7, #16]
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	2b0c      	cmp	r3, #12
 8008cd2:	d9c8      	bls.n	8008c66 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00b      	beq.n	8008cf8 <cmp_lfn+0xd0>
 8008ce0:	89fb      	ldrh	r3, [r7, #14]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d008      	beq.n	8008cf8 <cmp_lfn+0xd0>
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	005b      	lsls	r3, r3, #1
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	4413      	add	r3, r2
 8008cee:	881b      	ldrh	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <cmp_lfn+0xd0>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	e000      	b.n	8008cfa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008cf8:	2301      	movs	r3, #1
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	371c      	adds	r7, #28
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd90      	pop	{r4, r7, pc}
 8008d02:	bf00      	nop
 8008d04:	0800f360 	.word	0x0800f360

08008d08 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b088      	sub	sp, #32
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	4611      	mov	r1, r2
 8008d14:	461a      	mov	r2, r3
 8008d16:	460b      	mov	r3, r1
 8008d18:	71fb      	strb	r3, [r7, #7]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	330d      	adds	r3, #13
 8008d22:	79ba      	ldrb	r2, [r7, #6]
 8008d24:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	330b      	adds	r3, #11
 8008d2a:	220f      	movs	r2, #15
 8008d2c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	330c      	adds	r3, #12
 8008d32:	2200      	movs	r2, #0
 8008d34:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	331a      	adds	r3, #26
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7fe ff3a 	bl	8007bb6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008d42:	79fb      	ldrb	r3, [r7, #7]
 8008d44:	1e5a      	subs	r2, r3, #1
 8008d46:	4613      	mov	r3, r2
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	4413      	add	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008d52:	2300      	movs	r3, #0
 8008d54:	82fb      	strh	r3, [r7, #22]
 8008d56:	2300      	movs	r3, #0
 8008d58:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008d5a:	8afb      	ldrh	r3, [r7, #22]
 8008d5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d007      	beq.n	8008d74 <put_lfn+0x6c>
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	1c5a      	adds	r2, r3, #1
 8008d68:	61fa      	str	r2, [r7, #28]
 8008d6a:	005b      	lsls	r3, r3, #1
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	4413      	add	r3, r2
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008d74:	4a17      	ldr	r2, [pc, #92]	@ (8008dd4 <put_lfn+0xcc>)
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	4413      	add	r3, r2
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	4413      	add	r3, r2
 8008d82:	8afa      	ldrh	r2, [r7, #22]
 8008d84:	4611      	mov	r1, r2
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fe ff15 	bl	8007bb6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008d8c:	8afb      	ldrh	r3, [r7, #22]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d102      	bne.n	8008d98 <put_lfn+0x90>
 8008d92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008d96:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	61bb      	str	r3, [r7, #24]
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	2b0c      	cmp	r3, #12
 8008da2:	d9da      	bls.n	8008d5a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008da4:	8afb      	ldrh	r3, [r7, #22]
 8008da6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d006      	beq.n	8008dbc <put_lfn+0xb4>
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	005b      	lsls	r3, r3, #1
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	4413      	add	r3, r2
 8008db6:	881b      	ldrh	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d103      	bne.n	8008dc4 <put_lfn+0xbc>
 8008dbc:	79fb      	ldrb	r3, [r7, #7]
 8008dbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dc2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	79fa      	ldrb	r2, [r7, #7]
 8008dc8:	701a      	strb	r2, [r3, #0]
}
 8008dca:	bf00      	nop
 8008dcc:	3720      	adds	r7, #32
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	0800f360 	.word	0x0800f360

08008dd8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08c      	sub	sp, #48	@ 0x30
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
 8008de4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008de6:	220b      	movs	r2, #11
 8008de8:	68b9      	ldr	r1, [r7, #8]
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f7fe ff2a 	bl	8007c44 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b05      	cmp	r3, #5
 8008df4:	d92b      	bls.n	8008e4e <gen_numname+0x76>
		sr = seq;
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008dfa:	e022      	b.n	8008e42 <gen_numname+0x6a>
			wc = *lfn++;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	1c9a      	adds	r2, r3, #2
 8008e00:	607a      	str	r2, [r7, #4]
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8008e06:	2300      	movs	r3, #0
 8008e08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e0a:	e017      	b.n	8008e3c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	005a      	lsls	r2, r3, #1
 8008e10:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	4413      	add	r3, r2
 8008e18:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008e1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008e1c:	085b      	lsrs	r3, r3, #1
 8008e1e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d005      	beq.n	8008e36 <gen_numname+0x5e>
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8008e30:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8008e34:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e38:	3301      	adds	r3, #1
 8008e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3e:	2b0f      	cmp	r3, #15
 8008e40:	d9e4      	bls.n	8008e0c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	881b      	ldrh	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1d8      	bne.n	8008dfc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008e4e:	2307      	movs	r3, #7
 8008e50:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	f003 030f 	and.w	r3, r3, #15
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	3330      	adds	r3, #48	@ 0x30
 8008e5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8008e62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008e66:	2b39      	cmp	r3, #57	@ 0x39
 8008e68:	d904      	bls.n	8008e74 <gen_numname+0x9c>
 8008e6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008e6e:	3307      	adds	r3, #7
 8008e70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8008e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e76:	1e5a      	subs	r2, r3, #1
 8008e78:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008e7a:	3330      	adds	r3, #48	@ 0x30
 8008e7c:	443b      	add	r3, r7
 8008e7e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8008e82:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	091b      	lsrs	r3, r3, #4
 8008e8a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1df      	bne.n	8008e52 <gen_numname+0x7a>
	ns[i] = '~';
 8008e92:	f107 0214 	add.w	r2, r7, #20
 8008e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e98:	4413      	add	r3, r2
 8008e9a:	227e      	movs	r2, #126	@ 0x7e
 8008e9c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ea2:	e002      	b.n	8008eaa <gen_numname+0xd2>
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d205      	bcs.n	8008ebe <gen_numname+0xe6>
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb6:	4413      	add	r3, r2
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	2b20      	cmp	r3, #32
 8008ebc:	d1f2      	bne.n	8008ea4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec0:	2b07      	cmp	r3, #7
 8008ec2:	d807      	bhi.n	8008ed4 <gen_numname+0xfc>
 8008ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec6:	1c5a      	adds	r2, r3, #1
 8008ec8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008eca:	3330      	adds	r3, #48	@ 0x30
 8008ecc:	443b      	add	r3, r7
 8008ece:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008ed2:	e000      	b.n	8008ed6 <gen_numname+0xfe>
 8008ed4:	2120      	movs	r1, #32
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	627a      	str	r2, [r7, #36]	@ 0x24
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	4413      	add	r3, r2
 8008ee0:	460a      	mov	r2, r1
 8008ee2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee6:	2b07      	cmp	r3, #7
 8008ee8:	d9e9      	bls.n	8008ebe <gen_numname+0xe6>
}
 8008eea:	bf00      	nop
 8008eec:	bf00      	nop
 8008eee:	3730      	adds	r7, #48	@ 0x30
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008f00:	230b      	movs	r3, #11
 8008f02:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	0852      	lsrs	r2, r2, #1
 8008f0a:	01db      	lsls	r3, r3, #7
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	b2da      	uxtb	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	1c59      	adds	r1, r3, #1
 8008f14:	6079      	str	r1, [r7, #4]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	4413      	add	r3, r2
 8008f1a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	60bb      	str	r3, [r7, #8]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1ed      	bne.n	8008f04 <sum_sfn+0x10>
	return sum;
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b086      	sub	sp, #24
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008f44:	2100      	movs	r1, #0
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7ff fc89 	bl	800885e <dir_sdi>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <dir_find+0x24>
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
 8008f58:	e0a9      	b.n	80090ae <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008f5a:	23ff      	movs	r3, #255	@ 0xff
 8008f5c:	753b      	strb	r3, [r7, #20]
 8008f5e:	7d3b      	ldrb	r3, [r7, #20]
 8008f60:	757b      	strb	r3, [r7, #21]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f04f 32ff 	mov.w	r2, #4294967295
 8008f68:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	69db      	ldr	r3, [r3, #28]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6938      	ldr	r0, [r7, #16]
 8008f72:	f7ff f895 	bl	80080a0 <move_window>
 8008f76:	4603      	mov	r3, r0
 8008f78:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f040 8090 	bne.w	80090a2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a1b      	ldr	r3, [r3, #32]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008f8a:	7dbb      	ldrb	r3, [r7, #22]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d102      	bne.n	8008f96 <dir_find+0x60>
 8008f90:	2304      	movs	r3, #4
 8008f92:	75fb      	strb	r3, [r7, #23]
 8008f94:	e08a      	b.n	80090ac <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	330b      	adds	r3, #11
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fa2:	73fb      	strb	r3, [r7, #15]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	7bfa      	ldrb	r2, [r7, #15]
 8008fa8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008faa:	7dbb      	ldrb	r3, [r7, #22]
 8008fac:	2be5      	cmp	r3, #229	@ 0xe5
 8008fae:	d007      	beq.n	8008fc0 <dir_find+0x8a>
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
 8008fb2:	f003 0308 	and.w	r3, r3, #8
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d009      	beq.n	8008fce <dir_find+0x98>
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
 8008fbc:	2b0f      	cmp	r3, #15
 8008fbe:	d006      	beq.n	8008fce <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008fc0:	23ff      	movs	r3, #255	@ 0xff
 8008fc2:	757b      	strb	r3, [r7, #21]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fca:	631a      	str	r2, [r3, #48]	@ 0x30
 8008fcc:	e05e      	b.n	800908c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008fce:	7bfb      	ldrb	r3, [r7, #15]
 8008fd0:	2b0f      	cmp	r3, #15
 8008fd2:	d136      	bne.n	8009042 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d154      	bne.n	800908c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008fe2:	7dbb      	ldrb	r3, [r7, #22]
 8008fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00d      	beq.n	8009008 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a1b      	ldr	r3, [r3, #32]
 8008ff0:	7b5b      	ldrb	r3, [r3, #13]
 8008ff2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008ff4:	7dbb      	ldrb	r3, [r7, #22]
 8008ff6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ffa:	75bb      	strb	r3, [r7, #22]
 8008ffc:	7dbb      	ldrb	r3, [r7, #22]
 8008ffe:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	695a      	ldr	r2, [r3, #20]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009008:	7dba      	ldrb	r2, [r7, #22]
 800900a:	7d7b      	ldrb	r3, [r7, #21]
 800900c:	429a      	cmp	r2, r3
 800900e:	d115      	bne.n	800903c <dir_find+0x106>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	330d      	adds	r3, #13
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	7d3a      	ldrb	r2, [r7, #20]
 800901a:	429a      	cmp	r2, r3
 800901c:	d10e      	bne.n	800903c <dir_find+0x106>
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	691a      	ldr	r2, [r3, #16]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a1b      	ldr	r3, [r3, #32]
 8009026:	4619      	mov	r1, r3
 8009028:	4610      	mov	r0, r2
 800902a:	f7ff fdfd 	bl	8008c28 <cmp_lfn>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d003      	beq.n	800903c <dir_find+0x106>
 8009034:	7d7b      	ldrb	r3, [r7, #21]
 8009036:	3b01      	subs	r3, #1
 8009038:	b2db      	uxtb	r3, r3
 800903a:	e000      	b.n	800903e <dir_find+0x108>
 800903c:	23ff      	movs	r3, #255	@ 0xff
 800903e:	757b      	strb	r3, [r7, #21]
 8009040:	e024      	b.n	800908c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009042:	7d7b      	ldrb	r3, [r7, #21]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d109      	bne.n	800905c <dir_find+0x126>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a1b      	ldr	r3, [r3, #32]
 800904c:	4618      	mov	r0, r3
 800904e:	f7ff ff51 	bl	8008ef4 <sum_sfn>
 8009052:	4603      	mov	r3, r0
 8009054:	461a      	mov	r2, r3
 8009056:	7d3b      	ldrb	r3, [r7, #20]
 8009058:	4293      	cmp	r3, r2
 800905a:	d024      	beq.n	80090a6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009062:	f003 0301 	and.w	r3, r3, #1
 8009066:	2b00      	cmp	r3, #0
 8009068:	d10a      	bne.n	8009080 <dir_find+0x14a>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a18      	ldr	r0, [r3, #32]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	3324      	adds	r3, #36	@ 0x24
 8009072:	220b      	movs	r2, #11
 8009074:	4619      	mov	r1, r3
 8009076:	f7fe fe21 	bl	8007cbc <mem_cmp>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d014      	beq.n	80090aa <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009080:	23ff      	movs	r3, #255	@ 0xff
 8009082:	757b      	strb	r3, [r7, #21]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f04f 32ff 	mov.w	r2, #4294967295
 800908a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800908c:	2100      	movs	r1, #0
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7ff fc6e 	bl	8008970 <dir_next>
 8009094:	4603      	mov	r3, r0
 8009096:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009098:	7dfb      	ldrb	r3, [r7, #23]
 800909a:	2b00      	cmp	r3, #0
 800909c:	f43f af65 	beq.w	8008f6a <dir_find+0x34>
 80090a0:	e004      	b.n	80090ac <dir_find+0x176>
		if (res != FR_OK) break;
 80090a2:	bf00      	nop
 80090a4:	e002      	b.n	80090ac <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80090a6:	bf00      	nop
 80090a8:	e000      	b.n	80090ac <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80090aa:	bf00      	nop

	return res;
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08c      	sub	sp, #48	@ 0x30
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80090cc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <dir_register+0x20>
 80090d4:	2306      	movs	r3, #6
 80090d6:	e0e0      	b.n	800929a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80090d8:	2300      	movs	r3, #0
 80090da:	627b      	str	r3, [r7, #36]	@ 0x24
 80090dc:	e002      	b.n	80090e4 <dir_register+0x2c>
 80090de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e0:	3301      	adds	r3, #1
 80090e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	691a      	ldr	r2, [r3, #16]
 80090e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ea:	005b      	lsls	r3, r3, #1
 80090ec:	4413      	add	r3, r2
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1f4      	bne.n	80090de <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80090fa:	f107 030c 	add.w	r3, r7, #12
 80090fe:	220c      	movs	r2, #12
 8009100:	4618      	mov	r0, r3
 8009102:	f7fe fd9f 	bl	8007c44 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009106:	7dfb      	ldrb	r3, [r7, #23]
 8009108:	f003 0301 	and.w	r3, r3, #1
 800910c:	2b00      	cmp	r3, #0
 800910e:	d032      	beq.n	8009176 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2240      	movs	r2, #64	@ 0x40
 8009114:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8009118:	2301      	movs	r3, #1
 800911a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800911c:	e016      	b.n	800914c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	691a      	ldr	r2, [r3, #16]
 8009128:	f107 010c 	add.w	r1, r7, #12
 800912c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800912e:	f7ff fe53 	bl	8008dd8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7ff feff 	bl	8008f36 <dir_find>
 8009138:	4603      	mov	r3, r0
 800913a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800913e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009142:	2b00      	cmp	r3, #0
 8009144:	d106      	bne.n	8009154 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009148:	3301      	adds	r3, #1
 800914a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800914c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800914e:	2b63      	cmp	r3, #99	@ 0x63
 8009150:	d9e5      	bls.n	800911e <dir_register+0x66>
 8009152:	e000      	b.n	8009156 <dir_register+0x9e>
			if (res != FR_OK) break;
 8009154:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009158:	2b64      	cmp	r3, #100	@ 0x64
 800915a:	d101      	bne.n	8009160 <dir_register+0xa8>
 800915c:	2307      	movs	r3, #7
 800915e:	e09c      	b.n	800929a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009160:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009164:	2b04      	cmp	r3, #4
 8009166:	d002      	beq.n	800916e <dir_register+0xb6>
 8009168:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800916c:	e095      	b.n	800929a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800916e:	7dfa      	ldrb	r2, [r7, #23]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	f003 0302 	and.w	r3, r3, #2
 800917c:	2b00      	cmp	r3, #0
 800917e:	d007      	beq.n	8009190 <dir_register+0xd8>
 8009180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009182:	330c      	adds	r3, #12
 8009184:	4a47      	ldr	r2, [pc, #284]	@ (80092a4 <dir_register+0x1ec>)
 8009186:	fba2 2303 	umull	r2, r3, r2, r3
 800918a:	089b      	lsrs	r3, r3, #2
 800918c:	3301      	adds	r3, #1
 800918e:	e000      	b.n	8009192 <dir_register+0xda>
 8009190:	2301      	movs	r3, #1
 8009192:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009194:	6a39      	ldr	r1, [r7, #32]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f7ff fcc0 	bl	8008b1c <dir_alloc>
 800919c:	4603      	mov	r3, r0
 800919e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80091a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d148      	bne.n	800923c <dir_register+0x184>
 80091aa:	6a3b      	ldr	r3, [r7, #32]
 80091ac:	3b01      	subs	r3, #1
 80091ae:	623b      	str	r3, [r7, #32]
 80091b0:	6a3b      	ldr	r3, [r7, #32]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d042      	beq.n	800923c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	695a      	ldr	r2, [r3, #20]
 80091ba:	6a3b      	ldr	r3, [r7, #32]
 80091bc:	015b      	lsls	r3, r3, #5
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	4619      	mov	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7ff fb4b 	bl	800885e <dir_sdi>
 80091c8:	4603      	mov	r3, r0
 80091ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80091ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d132      	bne.n	800923c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	3324      	adds	r3, #36	@ 0x24
 80091da:	4618      	mov	r0, r3
 80091dc:	f7ff fe8a 	bl	8008ef4 <sum_sfn>
 80091e0:	4603      	mov	r3, r0
 80091e2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	4619      	mov	r1, r3
 80091ea:	69f8      	ldr	r0, [r7, #28]
 80091ec:	f7fe ff58 	bl	80080a0 <move_window>
 80091f0:	4603      	mov	r3, r0
 80091f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80091f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d11d      	bne.n	800923a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	6918      	ldr	r0, [r3, #16]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a19      	ldr	r1, [r3, #32]
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	b2da      	uxtb	r2, r3
 800920a:	7efb      	ldrb	r3, [r7, #27]
 800920c:	f7ff fd7c 	bl	8008d08 <put_lfn>
				fs->wflag = 1;
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	2201      	movs	r2, #1
 8009214:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009216:	2100      	movs	r1, #0
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7ff fba9 	bl	8008970 <dir_next>
 800921e:	4603      	mov	r3, r0
 8009220:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8009224:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009228:	2b00      	cmp	r3, #0
 800922a:	d107      	bne.n	800923c <dir_register+0x184>
 800922c:	6a3b      	ldr	r3, [r7, #32]
 800922e:	3b01      	subs	r3, #1
 8009230:	623b      	str	r3, [r7, #32]
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1d5      	bne.n	80091e4 <dir_register+0x12c>
 8009238:	e000      	b.n	800923c <dir_register+0x184>
				if (res != FR_OK) break;
 800923a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800923c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009240:	2b00      	cmp	r3, #0
 8009242:	d128      	bne.n	8009296 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	69db      	ldr	r3, [r3, #28]
 8009248:	4619      	mov	r1, r3
 800924a:	69f8      	ldr	r0, [r7, #28]
 800924c:	f7fe ff28 	bl	80080a0 <move_window>
 8009250:	4603      	mov	r3, r0
 8009252:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8009256:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800925a:	2b00      	cmp	r3, #0
 800925c:	d11b      	bne.n	8009296 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	2220      	movs	r2, #32
 8009264:	2100      	movs	r1, #0
 8009266:	4618      	mov	r0, r3
 8009268:	f7fe fd0d 	bl	8007c86 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a18      	ldr	r0, [r3, #32]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	3324      	adds	r3, #36	@ 0x24
 8009274:	220b      	movs	r2, #11
 8009276:	4619      	mov	r1, r3
 8009278:	f7fe fce4 	bl	8007c44 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	330c      	adds	r3, #12
 8009288:	f002 0218 	and.w	r2, r2, #24
 800928c:	b2d2      	uxtb	r2, r2
 800928e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	2201      	movs	r2, #1
 8009294:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009296:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800929a:	4618      	mov	r0, r3
 800929c:	3730      	adds	r7, #48	@ 0x30
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	4ec4ec4f 	.word	0x4ec4ec4f

080092a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b08a      	sub	sp, #40	@ 0x28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	613b      	str	r3, [r7, #16]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	60fb      	str	r3, [r7, #12]
 80092c0:	2300      	movs	r3, #0
 80092c2:	617b      	str	r3, [r7, #20]
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	1c5a      	adds	r2, r3, #1
 80092cc:	61ba      	str	r2, [r7, #24]
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	4413      	add	r3, r2
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80092d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80092d8:	2b1f      	cmp	r3, #31
 80092da:	d940      	bls.n	800935e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80092dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80092de:	2b2f      	cmp	r3, #47	@ 0x2f
 80092e0:	d006      	beq.n	80092f0 <create_name+0x48>
 80092e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80092e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80092e6:	d110      	bne.n	800930a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80092e8:	e002      	b.n	80092f0 <create_name+0x48>
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	3301      	adds	r3, #1
 80092ee:	61bb      	str	r3, [r7, #24]
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	4413      	add	r3, r2
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80092fa:	d0f6      	beq.n	80092ea <create_name+0x42>
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	4413      	add	r3, r2
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	2b5c      	cmp	r3, #92	@ 0x5c
 8009306:	d0f0      	beq.n	80092ea <create_name+0x42>
			break;
 8009308:	e02a      	b.n	8009360 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	2bfe      	cmp	r3, #254	@ 0xfe
 800930e:	d901      	bls.n	8009314 <create_name+0x6c>
 8009310:	2306      	movs	r3, #6
 8009312:	e17d      	b.n	8009610 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009314:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009316:	b2db      	uxtb	r3, r3
 8009318:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800931a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800931c:	2101      	movs	r1, #1
 800931e:	4618      	mov	r0, r3
 8009320:	f001 fc10 	bl	800ab44 <ff_convert>
 8009324:	4603      	mov	r3, r0
 8009326:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009328:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800932a:	2b00      	cmp	r3, #0
 800932c:	d101      	bne.n	8009332 <create_name+0x8a>
 800932e:	2306      	movs	r3, #6
 8009330:	e16e      	b.n	8009610 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009332:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009334:	2b7f      	cmp	r3, #127	@ 0x7f
 8009336:	d809      	bhi.n	800934c <create_name+0xa4>
 8009338:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800933a:	4619      	mov	r1, r3
 800933c:	488d      	ldr	r0, [pc, #564]	@ (8009574 <create_name+0x2cc>)
 800933e:	f7fe fce4 	bl	8007d0a <chk_chr>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d001      	beq.n	800934c <create_name+0xa4>
 8009348:	2306      	movs	r3, #6
 800934a:	e161      	b.n	8009610 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	1c5a      	adds	r2, r3, #1
 8009350:	617a      	str	r2, [r7, #20]
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	4413      	add	r3, r2
 8009358:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800935a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800935c:	e7b4      	b.n	80092c8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800935e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	441a      	add	r2, r3
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800936a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800936c:	2b1f      	cmp	r3, #31
 800936e:	d801      	bhi.n	8009374 <create_name+0xcc>
 8009370:	2304      	movs	r3, #4
 8009372:	e000      	b.n	8009376 <create_name+0xce>
 8009374:	2300      	movs	r3, #0
 8009376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800937a:	e011      	b.n	80093a0 <create_name+0xf8>
		w = lfn[di - 1];
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009382:	3b01      	subs	r3, #1
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	4413      	add	r3, r2
 800938a:	881b      	ldrh	r3, [r3, #0]
 800938c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800938e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009390:	2b20      	cmp	r3, #32
 8009392:	d002      	beq.n	800939a <create_name+0xf2>
 8009394:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009396:	2b2e      	cmp	r3, #46	@ 0x2e
 8009398:	d106      	bne.n	80093a8 <create_name+0x100>
		di--;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	3b01      	subs	r3, #1
 800939e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1ea      	bne.n	800937c <create_name+0xd4>
 80093a6:	e000      	b.n	80093aa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80093a8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	005b      	lsls	r3, r3, #1
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	4413      	add	r3, r2
 80093b2:	2200      	movs	r2, #0
 80093b4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d101      	bne.n	80093c0 <create_name+0x118>
 80093bc:	2306      	movs	r3, #6
 80093be:	e127      	b.n	8009610 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3324      	adds	r3, #36	@ 0x24
 80093c4:	220b      	movs	r2, #11
 80093c6:	2120      	movs	r1, #32
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7fe fc5c 	bl	8007c86 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80093ce:	2300      	movs	r3, #0
 80093d0:	61bb      	str	r3, [r7, #24]
 80093d2:	e002      	b.n	80093da <create_name+0x132>
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	3301      	adds	r3, #1
 80093d8:	61bb      	str	r3, [r7, #24]
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	005b      	lsls	r3, r3, #1
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	4413      	add	r3, r2
 80093e2:	881b      	ldrh	r3, [r3, #0]
 80093e4:	2b20      	cmp	r3, #32
 80093e6:	d0f5      	beq.n	80093d4 <create_name+0x12c>
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	005b      	lsls	r3, r3, #1
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	4413      	add	r3, r2
 80093f0:	881b      	ldrh	r3, [r3, #0]
 80093f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80093f4:	d0ee      	beq.n	80093d4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d009      	beq.n	8009410 <create_name+0x168>
 80093fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009400:	f043 0303 	orr.w	r3, r3, #3
 8009404:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009408:	e002      	b.n	8009410 <create_name+0x168>
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	3b01      	subs	r3, #1
 800940e:	617b      	str	r3, [r7, #20]
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d009      	beq.n	800942a <create_name+0x182>
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800941c:	3b01      	subs	r3, #1
 800941e:	005b      	lsls	r3, r3, #1
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	4413      	add	r3, r2
 8009424:	881b      	ldrh	r3, [r3, #0]
 8009426:	2b2e      	cmp	r3, #46	@ 0x2e
 8009428:	d1ef      	bne.n	800940a <create_name+0x162>

	i = b = 0; ni = 8;
 800942a:	2300      	movs	r3, #0
 800942c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009430:	2300      	movs	r3, #0
 8009432:	623b      	str	r3, [r7, #32]
 8009434:	2308      	movs	r3, #8
 8009436:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	1c5a      	adds	r2, r3, #1
 800943c:	61ba      	str	r2, [r7, #24]
 800943e:	005b      	lsls	r3, r3, #1
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	4413      	add	r3, r2
 8009444:	881b      	ldrh	r3, [r3, #0]
 8009446:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009448:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800944a:	2b00      	cmp	r3, #0
 800944c:	f000 8090 	beq.w	8009570 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009450:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009452:	2b20      	cmp	r3, #32
 8009454:	d006      	beq.n	8009464 <create_name+0x1bc>
 8009456:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009458:	2b2e      	cmp	r3, #46	@ 0x2e
 800945a:	d10a      	bne.n	8009472 <create_name+0x1ca>
 800945c:	69ba      	ldr	r2, [r7, #24]
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	429a      	cmp	r2, r3
 8009462:	d006      	beq.n	8009472 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009464:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009468:	f043 0303 	orr.w	r3, r3, #3
 800946c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009470:	e07d      	b.n	800956e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009472:	6a3a      	ldr	r2, [r7, #32]
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	429a      	cmp	r2, r3
 8009478:	d203      	bcs.n	8009482 <create_name+0x1da>
 800947a:	69ba      	ldr	r2, [r7, #24]
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	429a      	cmp	r2, r3
 8009480:	d123      	bne.n	80094ca <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	2b0b      	cmp	r3, #11
 8009486:	d106      	bne.n	8009496 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009488:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800948c:	f043 0303 	orr.w	r3, r3, #3
 8009490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009494:	e075      	b.n	8009582 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009496:	69ba      	ldr	r2, [r7, #24]
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	429a      	cmp	r2, r3
 800949c:	d005      	beq.n	80094aa <create_name+0x202>
 800949e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094a2:	f043 0303 	orr.w	r3, r3, #3
 80094a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80094aa:	69ba      	ldr	r2, [r7, #24]
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d866      	bhi.n	8009580 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	61bb      	str	r3, [r7, #24]
 80094b6:	2308      	movs	r3, #8
 80094b8:	623b      	str	r3, [r7, #32]
 80094ba:	230b      	movs	r3, #11
 80094bc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80094be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80094c8:	e051      	b.n	800956e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80094ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80094cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80094ce:	d914      	bls.n	80094fa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80094d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80094d2:	2100      	movs	r1, #0
 80094d4:	4618      	mov	r0, r3
 80094d6:	f001 fb35 	bl	800ab44 <ff_convert>
 80094da:	4603      	mov	r3, r0
 80094dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80094de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d004      	beq.n	80094ee <create_name+0x246>
 80094e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80094e6:	3b80      	subs	r3, #128	@ 0x80
 80094e8:	4a23      	ldr	r2, [pc, #140]	@ (8009578 <create_name+0x2d0>)
 80094ea:	5cd3      	ldrb	r3, [r2, r3]
 80094ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80094ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094f2:	f043 0302 	orr.w	r3, r3, #2
 80094f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80094fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d007      	beq.n	8009510 <create_name+0x268>
 8009500:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009502:	4619      	mov	r1, r3
 8009504:	481d      	ldr	r0, [pc, #116]	@ (800957c <create_name+0x2d4>)
 8009506:	f7fe fc00 	bl	8007d0a <chk_chr>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d008      	beq.n	8009522 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009510:	235f      	movs	r3, #95	@ 0x5f
 8009512:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009518:	f043 0303 	orr.w	r3, r3, #3
 800951c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009520:	e01b      	b.n	800955a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009522:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009524:	2b40      	cmp	r3, #64	@ 0x40
 8009526:	d909      	bls.n	800953c <create_name+0x294>
 8009528:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800952a:	2b5a      	cmp	r3, #90	@ 0x5a
 800952c:	d806      	bhi.n	800953c <create_name+0x294>
					b |= 2;
 800952e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009532:	f043 0302 	orr.w	r3, r3, #2
 8009536:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800953a:	e00e      	b.n	800955a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800953c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800953e:	2b60      	cmp	r3, #96	@ 0x60
 8009540:	d90b      	bls.n	800955a <create_name+0x2b2>
 8009542:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009544:	2b7a      	cmp	r3, #122	@ 0x7a
 8009546:	d808      	bhi.n	800955a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009548:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800954c:	f043 0301 	orr.w	r3, r3, #1
 8009550:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009554:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009556:	3b20      	subs	r3, #32
 8009558:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800955a:	6a3b      	ldr	r3, [r7, #32]
 800955c:	1c5a      	adds	r2, r3, #1
 800955e:	623a      	str	r2, [r7, #32]
 8009560:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009562:	b2d1      	uxtb	r1, r2
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	4413      	add	r3, r2
 8009568:	460a      	mov	r2, r1
 800956a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800956e:	e763      	b.n	8009438 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009570:	bf00      	nop
 8009572:	e006      	b.n	8009582 <create_name+0x2da>
 8009574:	0800f258 	.word	0x0800f258
 8009578:	0800f2e0 	.word	0x0800f2e0
 800957c:	0800f264 	.word	0x0800f264
			if (si > di) break;			/* No extension */
 8009580:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009588:	2be5      	cmp	r3, #229	@ 0xe5
 800958a:	d103      	bne.n	8009594 <create_name+0x2ec>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2205      	movs	r2, #5
 8009590:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	2b08      	cmp	r3, #8
 8009598:	d104      	bne.n	80095a4 <create_name+0x2fc>
 800959a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80095a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80095a8:	f003 030c 	and.w	r3, r3, #12
 80095ac:	2b0c      	cmp	r3, #12
 80095ae:	d005      	beq.n	80095bc <create_name+0x314>
 80095b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80095b4:	f003 0303 	and.w	r3, r3, #3
 80095b8:	2b03      	cmp	r3, #3
 80095ba:	d105      	bne.n	80095c8 <create_name+0x320>
 80095bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095c0:	f043 0302 	orr.w	r3, r3, #2
 80095c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80095c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095cc:	f003 0302 	and.w	r3, r3, #2
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d117      	bne.n	8009604 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80095d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80095d8:	f003 0303 	and.w	r3, r3, #3
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d105      	bne.n	80095ec <create_name+0x344>
 80095e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095e4:	f043 0310 	orr.w	r3, r3, #16
 80095e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80095ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80095f0:	f003 030c 	and.w	r3, r3, #12
 80095f4:	2b04      	cmp	r3, #4
 80095f6:	d105      	bne.n	8009604 <create_name+0x35c>
 80095f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095fc:	f043 0308 	orr.w	r3, r3, #8
 8009600:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800960a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800960e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009610:	4618      	mov	r0, r3
 8009612:	3728      	adds	r7, #40	@ 0x28
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b086      	sub	sp, #24
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800962c:	e002      	b.n	8009634 <follow_path+0x1c>
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	3301      	adds	r3, #1
 8009632:	603b      	str	r3, [r7, #0]
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2b2f      	cmp	r3, #47	@ 0x2f
 800963a:	d0f8      	beq.n	800962e <follow_path+0x16>
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	2b5c      	cmp	r3, #92	@ 0x5c
 8009642:	d0f4      	beq.n	800962e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	2200      	movs	r2, #0
 8009648:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	2b1f      	cmp	r3, #31
 8009650:	d80a      	bhi.n	8009668 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2280      	movs	r2, #128	@ 0x80
 8009656:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800965a:	2100      	movs	r1, #0
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f7ff f8fe 	bl	800885e <dir_sdi>
 8009662:	4603      	mov	r3, r0
 8009664:	75fb      	strb	r3, [r7, #23]
 8009666:	e048      	b.n	80096fa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009668:	463b      	mov	r3, r7
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff fe1b 	bl	80092a8 <create_name>
 8009672:	4603      	mov	r3, r0
 8009674:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009676:	7dfb      	ldrb	r3, [r7, #23]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d139      	bne.n	80096f0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7ff fc5a 	bl	8008f36 <dir_find>
 8009682:	4603      	mov	r3, r0
 8009684:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800968c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800968e:	7dfb      	ldrb	r3, [r7, #23]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00a      	beq.n	80096aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009694:	7dfb      	ldrb	r3, [r7, #23]
 8009696:	2b04      	cmp	r3, #4
 8009698:	d12c      	bne.n	80096f4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800969a:	7afb      	ldrb	r3, [r7, #11]
 800969c:	f003 0304 	and.w	r3, r3, #4
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d127      	bne.n	80096f4 <follow_path+0xdc>
 80096a4:	2305      	movs	r3, #5
 80096a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80096a8:	e024      	b.n	80096f4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80096aa:	7afb      	ldrb	r3, [r7, #11]
 80096ac:	f003 0304 	and.w	r3, r3, #4
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d121      	bne.n	80096f8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	799b      	ldrb	r3, [r3, #6]
 80096b8:	f003 0310 	and.w	r3, r3, #16
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d102      	bne.n	80096c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80096c0:	2305      	movs	r3, #5
 80096c2:	75fb      	strb	r3, [r7, #23]
 80096c4:	e019      	b.n	80096fa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	695b      	ldr	r3, [r3, #20]
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	8992      	ldrh	r2, [r2, #12]
 80096d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80096d8:	fb00 f202 	mul.w	r2, r0, r2
 80096dc:	1a9b      	subs	r3, r3, r2
 80096de:	440b      	add	r3, r1
 80096e0:	4619      	mov	r1, r3
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f7ff fa61 	bl	8008baa <ld_clust>
 80096e8:	4602      	mov	r2, r0
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80096ee:	e7bb      	b.n	8009668 <follow_path+0x50>
			if (res != FR_OK) break;
 80096f0:	bf00      	nop
 80096f2:	e002      	b.n	80096fa <follow_path+0xe2>
				break;
 80096f4:	bf00      	nop
 80096f6:	e000      	b.n	80096fa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80096f8:	bf00      	nop
			}
		}
	}

	return res;
 80096fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3718      	adds	r7, #24
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009704:	b480      	push	{r7}
 8009706:	b087      	sub	sp, #28
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800970c:	f04f 33ff 	mov.w	r3, #4294967295
 8009710:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d031      	beq.n	800977e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	617b      	str	r3, [r7, #20]
 8009720:	e002      	b.n	8009728 <get_ldnumber+0x24>
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	3301      	adds	r3, #1
 8009726:	617b      	str	r3, [r7, #20]
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	2b1f      	cmp	r3, #31
 800972e:	d903      	bls.n	8009738 <get_ldnumber+0x34>
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	2b3a      	cmp	r3, #58	@ 0x3a
 8009736:	d1f4      	bne.n	8009722 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	2b3a      	cmp	r3, #58	@ 0x3a
 800973e:	d11c      	bne.n	800977a <get_ldnumber+0x76>
			tp = *path;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	1c5a      	adds	r2, r3, #1
 800974a:	60fa      	str	r2, [r7, #12]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	3b30      	subs	r3, #48	@ 0x30
 8009750:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	2b09      	cmp	r3, #9
 8009756:	d80e      	bhi.n	8009776 <get_ldnumber+0x72>
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	429a      	cmp	r2, r3
 800975e:	d10a      	bne.n	8009776 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d107      	bne.n	8009776 <get_ldnumber+0x72>
					vol = (int)i;
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	3301      	adds	r3, #1
 800976e:	617b      	str	r3, [r7, #20]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	697a      	ldr	r2, [r7, #20]
 8009774:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	e002      	b.n	8009780 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800977a:	2300      	movs	r3, #0
 800977c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800977e:	693b      	ldr	r3, [r7, #16]
}
 8009780:	4618      	mov	r0, r3
 8009782:	371c      	adds	r7, #28
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	70da      	strb	r2, [r3, #3]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f04f 32ff 	mov.w	r2, #4294967295
 80097a2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80097a4:	6839      	ldr	r1, [r7, #0]
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7fe fc7a 	bl	80080a0 <move_window>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d001      	beq.n	80097b6 <check_fs+0x2a>
 80097b2:	2304      	movs	r3, #4
 80097b4:	e038      	b.n	8009828 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	3338      	adds	r3, #56	@ 0x38
 80097ba:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fe f9be 	bl	8007b40 <ld_word>
 80097c4:	4603      	mov	r3, r0
 80097c6:	461a      	mov	r2, r3
 80097c8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d001      	beq.n	80097d4 <check_fs+0x48>
 80097d0:	2303      	movs	r3, #3
 80097d2:	e029      	b.n	8009828 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80097da:	2be9      	cmp	r3, #233	@ 0xe9
 80097dc:	d009      	beq.n	80097f2 <check_fs+0x66>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80097e4:	2beb      	cmp	r3, #235	@ 0xeb
 80097e6:	d11e      	bne.n	8009826 <check_fs+0x9a>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80097ee:	2b90      	cmp	r3, #144	@ 0x90
 80097f0:	d119      	bne.n	8009826 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	3338      	adds	r3, #56	@ 0x38
 80097f6:	3336      	adds	r3, #54	@ 0x36
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fe f9b9 	bl	8007b70 <ld_dword>
 80097fe:	4603      	mov	r3, r0
 8009800:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009804:	4a0a      	ldr	r2, [pc, #40]	@ (8009830 <check_fs+0xa4>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d101      	bne.n	800980e <check_fs+0x82>
 800980a:	2300      	movs	r3, #0
 800980c:	e00c      	b.n	8009828 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	3338      	adds	r3, #56	@ 0x38
 8009812:	3352      	adds	r3, #82	@ 0x52
 8009814:	4618      	mov	r0, r3
 8009816:	f7fe f9ab 	bl	8007b70 <ld_dword>
 800981a:	4603      	mov	r3, r0
 800981c:	4a05      	ldr	r2, [pc, #20]	@ (8009834 <check_fs+0xa8>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d101      	bne.n	8009826 <check_fs+0x9a>
 8009822:	2300      	movs	r3, #0
 8009824:	e000      	b.n	8009828 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009826:	2302      	movs	r3, #2
}
 8009828:	4618      	mov	r0, r3
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	00544146 	.word	0x00544146
 8009834:	33544146 	.word	0x33544146

08009838 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b096      	sub	sp, #88	@ 0x58
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	4613      	mov	r3, r2
 8009844:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	2200      	movs	r2, #0
 800984a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f7ff ff59 	bl	8009704 <get_ldnumber>
 8009852:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009856:	2b00      	cmp	r3, #0
 8009858:	da01      	bge.n	800985e <find_volume+0x26>
 800985a:	230b      	movs	r3, #11
 800985c:	e265      	b.n	8009d2a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800985e:	4a9f      	ldr	r2, [pc, #636]	@ (8009adc <find_volume+0x2a4>)
 8009860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009866:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800986a:	2b00      	cmp	r3, #0
 800986c:	d101      	bne.n	8009872 <find_volume+0x3a>
 800986e:	230c      	movs	r3, #12
 8009870:	e25b      	b.n	8009d2a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009876:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009878:	79fb      	ldrb	r3, [r7, #7]
 800987a:	f023 0301 	bic.w	r3, r3, #1
 800987e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d01a      	beq.n	80098be <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800988a:	785b      	ldrb	r3, [r3, #1]
 800988c:	4618      	mov	r0, r3
 800988e:	f7fe f8b9 	bl	8007a04 <disk_status>
 8009892:	4603      	mov	r3, r0
 8009894:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009898:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800989c:	f003 0301 	and.w	r3, r3, #1
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10c      	bne.n	80098be <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80098a4:	79fb      	ldrb	r3, [r7, #7]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d007      	beq.n	80098ba <find_volume+0x82>
 80098aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80098ae:	f003 0304 	and.w	r3, r3, #4
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80098b6:	230a      	movs	r3, #10
 80098b8:	e237      	b.n	8009d2a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80098ba:	2300      	movs	r3, #0
 80098bc:	e235      	b.n	8009d2a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80098be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c0:	2200      	movs	r2, #0
 80098c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80098c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80098cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ce:	785b      	ldrb	r3, [r3, #1]
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7fe f8b1 	bl	8007a38 <disk_initialize>
 80098d6:	4603      	mov	r3, r0
 80098d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80098dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d001      	beq.n	80098ec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80098e8:	2303      	movs	r3, #3
 80098ea:	e21e      	b.n	8009d2a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80098ec:	79fb      	ldrb	r3, [r7, #7]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d007      	beq.n	8009902 <find_volume+0xca>
 80098f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80098f6:	f003 0304 	and.w	r3, r3, #4
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d001      	beq.n	8009902 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80098fe:	230a      	movs	r3, #10
 8009900:	e213      	b.n	8009d2a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009904:	7858      	ldrb	r0, [r3, #1]
 8009906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009908:	330c      	adds	r3, #12
 800990a:	461a      	mov	r2, r3
 800990c:	2102      	movs	r1, #2
 800990e:	f7fe f8f9 	bl	8007b04 <disk_ioctl>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d001      	beq.n	800991c <find_volume+0xe4>
 8009918:	2301      	movs	r3, #1
 800991a:	e206      	b.n	8009d2a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800991c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991e:	899b      	ldrh	r3, [r3, #12]
 8009920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009924:	d80d      	bhi.n	8009942 <find_volume+0x10a>
 8009926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009928:	899b      	ldrh	r3, [r3, #12]
 800992a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800992e:	d308      	bcc.n	8009942 <find_volume+0x10a>
 8009930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009932:	899b      	ldrh	r3, [r3, #12]
 8009934:	461a      	mov	r2, r3
 8009936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009938:	899b      	ldrh	r3, [r3, #12]
 800993a:	3b01      	subs	r3, #1
 800993c:	4013      	ands	r3, r2
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <find_volume+0x10e>
 8009942:	2301      	movs	r3, #1
 8009944:	e1f1      	b.n	8009d2a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009946:	2300      	movs	r3, #0
 8009948:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800994a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800994c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800994e:	f7ff ff1d 	bl	800978c <check_fs>
 8009952:	4603      	mov	r3, r0
 8009954:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009958:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800995c:	2b02      	cmp	r3, #2
 800995e:	d149      	bne.n	80099f4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009960:	2300      	movs	r3, #0
 8009962:	643b      	str	r3, [r7, #64]	@ 0x40
 8009964:	e01e      	b.n	80099a4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009968:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800996c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800996e:	011b      	lsls	r3, r3, #4
 8009970:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009974:	4413      	add	r3, r2
 8009976:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997a:	3304      	adds	r3, #4
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d006      	beq.n	8009990 <find_volume+0x158>
 8009982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009984:	3308      	adds	r3, #8
 8009986:	4618      	mov	r0, r3
 8009988:	f7fe f8f2 	bl	8007b70 <ld_dword>
 800998c:	4602      	mov	r2, r0
 800998e:	e000      	b.n	8009992 <find_volume+0x15a>
 8009990:	2200      	movs	r2, #0
 8009992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	3358      	adds	r3, #88	@ 0x58
 8009998:	443b      	add	r3, r7
 800999a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800999e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099a0:	3301      	adds	r3, #1
 80099a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80099a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d9dd      	bls.n	8009966 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80099aa:	2300      	movs	r3, #0
 80099ac:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80099ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <find_volume+0x182>
 80099b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099b6:	3b01      	subs	r3, #1
 80099b8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80099ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	3358      	adds	r3, #88	@ 0x58
 80099c0:	443b      	add	r3, r7
 80099c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80099c6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80099c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d005      	beq.n	80099da <find_volume+0x1a2>
 80099ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80099d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80099d2:	f7ff fedb 	bl	800978c <check_fs>
 80099d6:	4603      	mov	r3, r0
 80099d8:	e000      	b.n	80099dc <find_volume+0x1a4>
 80099da:	2303      	movs	r3, #3
 80099dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80099e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d905      	bls.n	80099f4 <find_volume+0x1bc>
 80099e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099ea:	3301      	adds	r3, #1
 80099ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80099ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	d9e2      	bls.n	80099ba <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80099f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80099f8:	2b04      	cmp	r3, #4
 80099fa:	d101      	bne.n	8009a00 <find_volume+0x1c8>
 80099fc:	2301      	movs	r3, #1
 80099fe:	e194      	b.n	8009d2a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009a00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d901      	bls.n	8009a0c <find_volume+0x1d4>
 8009a08:	230d      	movs	r3, #13
 8009a0a:	e18e      	b.n	8009d2a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a0e:	3338      	adds	r3, #56	@ 0x38
 8009a10:	330b      	adds	r3, #11
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fe f894 	bl	8007b40 <ld_word>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a1e:	899b      	ldrh	r3, [r3, #12]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d001      	beq.n	8009a28 <find_volume+0x1f0>
 8009a24:	230d      	movs	r3, #13
 8009a26:	e180      	b.n	8009d2a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a2a:	3338      	adds	r3, #56	@ 0x38
 8009a2c:	3316      	adds	r3, #22
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fe f886 	bl	8007b40 <ld_word>
 8009a34:	4603      	mov	r3, r0
 8009a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009a38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d106      	bne.n	8009a4c <find_volume+0x214>
 8009a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a40:	3338      	adds	r3, #56	@ 0x38
 8009a42:	3324      	adds	r3, #36	@ 0x24
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7fe f893 	bl	8007b70 <ld_dword>
 8009a4a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009a50:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a54:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8009a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a5e:	789b      	ldrb	r3, [r3, #2]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d005      	beq.n	8009a70 <find_volume+0x238>
 8009a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a66:	789b      	ldrb	r3, [r3, #2]
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d001      	beq.n	8009a70 <find_volume+0x238>
 8009a6c:	230d      	movs	r3, #13
 8009a6e:	e15c      	b.n	8009d2a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a72:	789b      	ldrb	r3, [r3, #2]
 8009a74:	461a      	mov	r2, r3
 8009a76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a78:	fb02 f303 	mul.w	r3, r2, r3
 8009a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a84:	461a      	mov	r2, r3
 8009a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8c:	895b      	ldrh	r3, [r3, #10]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d008      	beq.n	8009aa4 <find_volume+0x26c>
 8009a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a94:	895b      	ldrh	r3, [r3, #10]
 8009a96:	461a      	mov	r2, r3
 8009a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9a:	895b      	ldrh	r3, [r3, #10]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d001      	beq.n	8009aa8 <find_volume+0x270>
 8009aa4:	230d      	movs	r3, #13
 8009aa6:	e140      	b.n	8009d2a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aaa:	3338      	adds	r3, #56	@ 0x38
 8009aac:	3311      	adds	r3, #17
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fe f846 	bl	8007b40 <ld_word>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009abe:	891b      	ldrh	r3, [r3, #8]
 8009ac0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ac2:	8992      	ldrh	r2, [r2, #12]
 8009ac4:	0952      	lsrs	r2, r2, #5
 8009ac6:	b292      	uxth	r2, r2
 8009ac8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009acc:	fb01 f202 	mul.w	r2, r1, r2
 8009ad0:	1a9b      	subs	r3, r3, r2
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d003      	beq.n	8009ae0 <find_volume+0x2a8>
 8009ad8:	230d      	movs	r3, #13
 8009ada:	e126      	b.n	8009d2a <find_volume+0x4f2>
 8009adc:	200029e4 	.word	0x200029e4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae2:	3338      	adds	r3, #56	@ 0x38
 8009ae4:	3313      	adds	r3, #19
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fe f82a 	bl	8007b40 <ld_word>
 8009aec:	4603      	mov	r3, r0
 8009aee:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009af0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d106      	bne.n	8009b04 <find_volume+0x2cc>
 8009af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af8:	3338      	adds	r3, #56	@ 0x38
 8009afa:	3320      	adds	r3, #32
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fe f837 	bl	8007b70 <ld_dword>
 8009b02:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b06:	3338      	adds	r3, #56	@ 0x38
 8009b08:	330e      	adds	r3, #14
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fe f818 	bl	8007b40 <ld_word>
 8009b10:	4603      	mov	r3, r0
 8009b12:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009b14:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d101      	bne.n	8009b1e <find_volume+0x2e6>
 8009b1a:	230d      	movs	r3, #13
 8009b1c:	e105      	b.n	8009d2a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009b1e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b22:	4413      	add	r3, r2
 8009b24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b26:	8911      	ldrh	r1, [r2, #8]
 8009b28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b2a:	8992      	ldrh	r2, [r2, #12]
 8009b2c:	0952      	lsrs	r2, r2, #5
 8009b2e:	b292      	uxth	r2, r2
 8009b30:	fbb1 f2f2 	udiv	r2, r1, r2
 8009b34:	b292      	uxth	r2, r2
 8009b36:	4413      	add	r3, r2
 8009b38:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009b3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d201      	bcs.n	8009b46 <find_volume+0x30e>
 8009b42:	230d      	movs	r3, #13
 8009b44:	e0f1      	b.n	8009d2a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009b46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b4e:	8952      	ldrh	r2, [r2, #10]
 8009b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b54:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d101      	bne.n	8009b60 <find_volume+0x328>
 8009b5c:	230d      	movs	r3, #13
 8009b5e:	e0e4      	b.n	8009d2a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009b60:	2303      	movs	r3, #3
 8009b62:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b68:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d802      	bhi.n	8009b76 <find_volume+0x33e>
 8009b70:	2302      	movs	r3, #2
 8009b72:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b78:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d802      	bhi.n	8009b86 <find_volume+0x34e>
 8009b80:	2301      	movs	r3, #1
 8009b82:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b88:	1c9a      	adds	r2, r3, #2
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009b92:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009b94:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b98:	441a      	add	r2, r3
 8009b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b9c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009b9e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba2:	441a      	add	r2, r3
 8009ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba6:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8009ba8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009bac:	2b03      	cmp	r3, #3
 8009bae:	d11e      	bne.n	8009bee <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb2:	3338      	adds	r3, #56	@ 0x38
 8009bb4:	332a      	adds	r3, #42	@ 0x2a
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fd ffc2 	bl	8007b40 <ld_word>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d001      	beq.n	8009bc6 <find_volume+0x38e>
 8009bc2:	230d      	movs	r3, #13
 8009bc4:	e0b1      	b.n	8009d2a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc8:	891b      	ldrh	r3, [r3, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <find_volume+0x39a>
 8009bce:	230d      	movs	r3, #13
 8009bd0:	e0ab      	b.n	8009d2a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd4:	3338      	adds	r3, #56	@ 0x38
 8009bd6:	332c      	adds	r3, #44	@ 0x2c
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fd ffc9 	bl	8007b70 <ld_dword>
 8009bde:	4602      	mov	r2, r0
 8009be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be2:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be6:	69db      	ldr	r3, [r3, #28]
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bec:	e01f      	b.n	8009c2e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf0:	891b      	ldrh	r3, [r3, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d101      	bne.n	8009bfa <find_volume+0x3c2>
 8009bf6:	230d      	movs	r3, #13
 8009bf8:	e097      	b.n	8009d2a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009bfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c00:	441a      	add	r2, r3
 8009c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c04:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009c06:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d103      	bne.n	8009c16 <find_volume+0x3de>
 8009c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c10:	69db      	ldr	r3, [r3, #28]
 8009c12:	005b      	lsls	r3, r3, #1
 8009c14:	e00a      	b.n	8009c2c <find_volume+0x3f4>
 8009c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c18:	69da      	ldr	r2, [r3, #28]
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	005b      	lsls	r3, r3, #1
 8009c1e:	4413      	add	r3, r2
 8009c20:	085a      	lsrs	r2, r3, #1
 8009c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c24:	69db      	ldr	r3, [r3, #28]
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009c2c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c30:	6a1a      	ldr	r2, [r3, #32]
 8009c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c34:	899b      	ldrh	r3, [r3, #12]
 8009c36:	4619      	mov	r1, r3
 8009c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c3a:	440b      	add	r3, r1
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009c40:	8989      	ldrh	r1, [r1, #12]
 8009c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d201      	bcs.n	8009c4e <find_volume+0x416>
 8009c4a:	230d      	movs	r3, #13
 8009c4c:	e06d      	b.n	8009d2a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c50:	f04f 32ff 	mov.w	r2, #4294967295
 8009c54:	619a      	str	r2, [r3, #24]
 8009c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c58:	699a      	ldr	r2, [r3, #24]
 8009c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c5c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c60:	2280      	movs	r2, #128	@ 0x80
 8009c62:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009c64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009c68:	2b03      	cmp	r3, #3
 8009c6a:	d149      	bne.n	8009d00 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c6e:	3338      	adds	r3, #56	@ 0x38
 8009c70:	3330      	adds	r3, #48	@ 0x30
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fd ff64 	bl	8007b40 <ld_word>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d140      	bne.n	8009d00 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009c7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c80:	3301      	adds	r3, #1
 8009c82:	4619      	mov	r1, r3
 8009c84:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009c86:	f7fe fa0b 	bl	80080a0 <move_window>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d137      	bne.n	8009d00 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c92:	2200      	movs	r2, #0
 8009c94:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c98:	3338      	adds	r3, #56	@ 0x38
 8009c9a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fd ff4e 	bl	8007b40 <ld_word>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d127      	bne.n	8009d00 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb2:	3338      	adds	r3, #56	@ 0x38
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7fd ff5b 	bl	8007b70 <ld_dword>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8009d34 <find_volume+0x4fc>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d11e      	bne.n	8009d00 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc4:	3338      	adds	r3, #56	@ 0x38
 8009cc6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fd ff50 	bl	8007b70 <ld_dword>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	4a19      	ldr	r2, [pc, #100]	@ (8009d38 <find_volume+0x500>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d113      	bne.n	8009d00 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cda:	3338      	adds	r3, #56	@ 0x38
 8009cdc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fd ff45 	bl	8007b70 <ld_dword>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cea:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cee:	3338      	adds	r3, #56	@ 0x38
 8009cf0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7fd ff3b 	bl	8007b70 <ld_dword>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cfe:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d02:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009d06:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009d08:	4b0c      	ldr	r3, [pc, #48]	@ (8009d3c <find_volume+0x504>)
 8009d0a:	881b      	ldrh	r3, [r3, #0]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	4b0a      	ldr	r3, [pc, #40]	@ (8009d3c <find_volume+0x504>)
 8009d12:	801a      	strh	r2, [r3, #0]
 8009d14:	4b09      	ldr	r3, [pc, #36]	@ (8009d3c <find_volume+0x504>)
 8009d16:	881a      	ldrh	r2, [r3, #0]
 8009d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1e:	4a08      	ldr	r2, [pc, #32]	@ (8009d40 <find_volume+0x508>)
 8009d20:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009d22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009d24:	f7fe f954 	bl	8007fd0 <clear_lock>
#endif
	return FR_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3758      	adds	r7, #88	@ 0x58
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	41615252 	.word	0x41615252
 8009d38:	61417272 	.word	0x61417272
 8009d3c:	200029e8 	.word	0x200029e8
 8009d40:	20002a0c 	.word	0x20002a0c

08009d44 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009d4e:	2309      	movs	r3, #9
 8009d50:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d01c      	beq.n	8009d92 <validate+0x4e>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d018      	beq.n	8009d92 <validate+0x4e>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d013      	beq.n	8009d92 <validate+0x4e>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	889a      	ldrh	r2, [r3, #4]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	88db      	ldrh	r3, [r3, #6]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d10c      	bne.n	8009d92 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	785b      	ldrb	r3, [r3, #1]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7fd fe40 	bl	8007a04 <disk_status>
 8009d84:	4603      	mov	r3, r0
 8009d86:	f003 0301 	and.w	r3, r3, #1
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d101      	bne.n	8009d92 <validate+0x4e>
			res = FR_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d102      	bne.n	8009d9e <validate+0x5a>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	e000      	b.n	8009da0 <validate+0x5c>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	683a      	ldr	r2, [r7, #0]
 8009da2:	6013      	str	r3, [r2, #0]
	return res;
 8009da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
	...

08009db0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b088      	sub	sp, #32
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009dc2:	f107 0310 	add.w	r3, r7, #16
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7ff fc9c 	bl	8009704 <get_ldnumber>
 8009dcc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	da01      	bge.n	8009dd8 <f_mount+0x28>
 8009dd4:	230b      	movs	r3, #11
 8009dd6:	e02b      	b.n	8009e30 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009dd8:	4a17      	ldr	r2, [pc, #92]	@ (8009e38 <f_mount+0x88>)
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009de0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d005      	beq.n	8009df4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009de8:	69b8      	ldr	r0, [r7, #24]
 8009dea:	f7fe f8f1 	bl	8007fd0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	2200      	movs	r2, #0
 8009df2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d002      	beq.n	8009e00 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	490d      	ldr	r1, [pc, #52]	@ (8009e38 <f_mount+0x88>)
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d002      	beq.n	8009e16 <f_mount+0x66>
 8009e10:	79fb      	ldrb	r3, [r7, #7]
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d001      	beq.n	8009e1a <f_mount+0x6a>
 8009e16:	2300      	movs	r3, #0
 8009e18:	e00a      	b.n	8009e30 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009e1a:	f107 010c 	add.w	r1, r7, #12
 8009e1e:	f107 0308 	add.w	r3, r7, #8
 8009e22:	2200      	movs	r2, #0
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7ff fd07 	bl	8009838 <find_volume>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3720      	adds	r7, #32
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	200029e4 	.word	0x200029e4

08009e3c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b09a      	sub	sp, #104	@ 0x68
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	4613      	mov	r3, r2
 8009e48:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d101      	bne.n	8009e54 <f_open+0x18>
 8009e50:	2309      	movs	r3, #9
 8009e52:	e1b7      	b.n	800a1c4 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009e54:	79fb      	ldrb	r3, [r7, #7]
 8009e56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e5a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009e5c:	79fa      	ldrb	r2, [r7, #7]
 8009e5e:	f107 0114 	add.w	r1, r7, #20
 8009e62:	f107 0308 	add.w	r3, r7, #8
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7ff fce6 	bl	8009838 <find_volume>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8009e72:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f040 819b 	bne.w	800a1b2 <f_open+0x376>
		dj.obj.fs = fs;
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	f107 0318 	add.w	r3, r7, #24
 8009e86:	4611      	mov	r1, r2
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7ff fbc5 	bl	8009618 <follow_path>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009e94:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d118      	bne.n	8009ece <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009e9c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009ea0:	b25b      	sxtb	r3, r3
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	da03      	bge.n	8009eae <f_open+0x72>
				res = FR_INVALID_NAME;
 8009ea6:	2306      	movs	r3, #6
 8009ea8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009eac:	e00f      	b.n	8009ece <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009eae:	79fb      	ldrb	r3, [r7, #7]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	bf8c      	ite	hi
 8009eb4:	2301      	movhi	r3, #1
 8009eb6:	2300      	movls	r3, #0
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	461a      	mov	r2, r3
 8009ebc:	f107 0318 	add.w	r3, r7, #24
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fd ff3c 	bl	8007d40 <chk_lock>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009ece:	79fb      	ldrb	r3, [r7, #7]
 8009ed0:	f003 031c 	and.w	r3, r3, #28
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d07f      	beq.n	8009fd8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009ed8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d017      	beq.n	8009f10 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009ee0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009ee4:	2b04      	cmp	r3, #4
 8009ee6:	d10e      	bne.n	8009f06 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009ee8:	f7fd ff86 	bl	8007df8 <enq_lock>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d006      	beq.n	8009f00 <f_open+0xc4>
 8009ef2:	f107 0318 	add.w	r3, r7, #24
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7ff f8de 	bl	80090b8 <dir_register>
 8009efc:	4603      	mov	r3, r0
 8009efe:	e000      	b.n	8009f02 <f_open+0xc6>
 8009f00:	2312      	movs	r3, #18
 8009f02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009f06:	79fb      	ldrb	r3, [r7, #7]
 8009f08:	f043 0308 	orr.w	r3, r3, #8
 8009f0c:	71fb      	strb	r3, [r7, #7]
 8009f0e:	e010      	b.n	8009f32 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009f10:	7fbb      	ldrb	r3, [r7, #30]
 8009f12:	f003 0311 	and.w	r3, r3, #17
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d003      	beq.n	8009f22 <f_open+0xe6>
					res = FR_DENIED;
 8009f1a:	2307      	movs	r3, #7
 8009f1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009f20:	e007      	b.n	8009f32 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009f22:	79fb      	ldrb	r3, [r7, #7]
 8009f24:	f003 0304 	and.w	r3, r3, #4
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <f_open+0xf6>
 8009f2c:	2308      	movs	r3, #8
 8009f2e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009f32:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d168      	bne.n	800a00c <f_open+0x1d0>
 8009f3a:	79fb      	ldrb	r3, [r7, #7]
 8009f3c:	f003 0308 	and.w	r3, r3, #8
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d063      	beq.n	800a00c <f_open+0x1d0>
				dw = GET_FATTIME();
 8009f44:	f7fd fd00 	bl	8007948 <get_fattime>
 8009f48:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f4c:	330e      	adds	r3, #14
 8009f4e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7fd fe4b 	bl	8007bec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f58:	3316      	adds	r3, #22
 8009f5a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7fd fe45 	bl	8007bec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f64:	330b      	adds	r3, #11
 8009f66:	2220      	movs	r2, #32
 8009f68:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f6e:	4611      	mov	r1, r2
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fe fe1a 	bl	8008baa <ld_clust>
 8009f76:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fe fe32 	bl	8008be8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f86:	331c      	adds	r3, #28
 8009f88:	2100      	movs	r1, #0
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fd fe2e 	bl	8007bec <st_dword>
					fs->wflag = 1;
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	2201      	movs	r2, #1
 8009f94:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d037      	beq.n	800a00c <f_open+0x1d0>
						dw = fs->winsect;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fa0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009fa2:	f107 0318 	add.w	r3, r7, #24
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fe fb22 	bl	80085f4 <remove_chain>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8009fb6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d126      	bne.n	800a00c <f_open+0x1d0>
							res = move_window(fs, dw);
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fe f86c 	bl	80080a0 <move_window>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009fd2:	3a01      	subs	r2, #1
 8009fd4:	615a      	str	r2, [r3, #20]
 8009fd6:	e019      	b.n	800a00c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009fd8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d115      	bne.n	800a00c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009fe0:	7fbb      	ldrb	r3, [r7, #30]
 8009fe2:	f003 0310 	and.w	r3, r3, #16
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d003      	beq.n	8009ff2 <f_open+0x1b6>
					res = FR_NO_FILE;
 8009fea:	2304      	movs	r3, #4
 8009fec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009ff0:	e00c      	b.n	800a00c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009ff2:	79fb      	ldrb	r3, [r7, #7]
 8009ff4:	f003 0302 	and.w	r3, r3, #2
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d007      	beq.n	800a00c <f_open+0x1d0>
 8009ffc:	7fbb      	ldrb	r3, [r7, #30]
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	d002      	beq.n	800a00c <f_open+0x1d0>
						res = FR_DENIED;
 800a006:	2307      	movs	r3, #7
 800a008:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a00c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a010:	2b00      	cmp	r3, #0
 800a012:	d126      	bne.n	800a062 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a014:	79fb      	ldrb	r3, [r7, #7]
 800a016:	f003 0308 	and.w	r3, r3, #8
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d003      	beq.n	800a026 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a01e:	79fb      	ldrb	r3, [r7, #7]
 800a020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a024:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a02e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a034:	79fb      	ldrb	r3, [r7, #7]
 800a036:	2b01      	cmp	r3, #1
 800a038:	bf8c      	ite	hi
 800a03a:	2301      	movhi	r3, #1
 800a03c:	2300      	movls	r3, #0
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	461a      	mov	r2, r3
 800a042:	f107 0318 	add.w	r3, r7, #24
 800a046:	4611      	mov	r1, r2
 800a048:	4618      	mov	r0, r3
 800a04a:	f7fd fef7 	bl	8007e3c <inc_lock>
 800a04e:	4602      	mov	r2, r0
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d102      	bne.n	800a062 <f_open+0x226>
 800a05c:	2302      	movs	r3, #2
 800a05e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a062:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a066:	2b00      	cmp	r3, #0
 800a068:	f040 80a3 	bne.w	800a1b2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a070:	4611      	mov	r1, r2
 800a072:	4618      	mov	r0, r3
 800a074:	f7fe fd99 	bl	8008baa <ld_clust>
 800a078:	4602      	mov	r2, r0
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a080:	331c      	adds	r3, #28
 800a082:	4618      	mov	r0, r3
 800a084:	f7fd fd74 	bl	8007b70 <ld_dword>
 800a088:	4602      	mov	r2, r0
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a094:	697a      	ldr	r2, [r7, #20]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	88da      	ldrh	r2, [r3, #6]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	79fa      	ldrb	r2, [r7, #7]
 800a0a6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	3330      	adds	r3, #48	@ 0x30
 800a0be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7fd fdde 	bl	8007c86 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a0ca:	79fb      	ldrb	r3, [r7, #7]
 800a0cc:	f003 0320 	and.w	r3, r3, #32
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d06e      	beq.n	800a1b2 <f_open+0x376>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d06a      	beq.n	800a1b2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	68da      	ldr	r2, [r3, #12]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	895b      	ldrh	r3, [r3, #10]
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	899b      	ldrh	r3, [r3, #12]
 800a0ee:	fb02 f303 	mul.w	r3, r2, r3
 800a0f2:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a100:	e016      	b.n	800a130 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a106:	4618      	mov	r0, r3
 800a108:	f7fe f887 	bl	800821a <get_fat>
 800a10c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a10e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a110:	2b01      	cmp	r3, #1
 800a112:	d802      	bhi.n	800a11a <f_open+0x2de>
 800a114:	2302      	movs	r3, #2
 800a116:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a11a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a120:	d102      	bne.n	800a128 <f_open+0x2ec>
 800a122:	2301      	movs	r3, #1
 800a124:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a128:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a12a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a130:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a134:	2b00      	cmp	r3, #0
 800a136:	d103      	bne.n	800a140 <f_open+0x304>
 800a138:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a13a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d8e0      	bhi.n	800a102 <f_open+0x2c6>
				}
				fp->clust = clst;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a144:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a146:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d131      	bne.n	800a1b2 <f_open+0x376>
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	899b      	ldrh	r3, [r3, #12]
 800a152:	461a      	mov	r2, r3
 800a154:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a156:	fbb3 f1f2 	udiv	r1, r3, r2
 800a15a:	fb01 f202 	mul.w	r2, r1, r2
 800a15e:	1a9b      	subs	r3, r3, r2
 800a160:	2b00      	cmp	r3, #0
 800a162:	d026      	beq.n	800a1b2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a168:	4618      	mov	r0, r3
 800a16a:	f7fe f837 	bl	80081dc <clust2sect>
 800a16e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800a170:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a172:	2b00      	cmp	r3, #0
 800a174:	d103      	bne.n	800a17e <f_open+0x342>
						res = FR_INT_ERR;
 800a176:	2302      	movs	r3, #2
 800a178:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a17c:	e019      	b.n	800a1b2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	899b      	ldrh	r3, [r3, #12]
 800a182:	461a      	mov	r2, r3
 800a184:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a186:	fbb3 f2f2 	udiv	r2, r3, r2
 800a18a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a18c:	441a      	add	r2, r3
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	7858      	ldrb	r0, [r3, #1]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6a1a      	ldr	r2, [r3, #32]
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	f7fd fc6f 	bl	8007a84 <disk_read>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d002      	beq.n	800a1b2 <f_open+0x376>
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a1b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d002      	beq.n	800a1c0 <f_open+0x384>
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a1c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3768      	adds	r7, #104	@ 0x68
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b08c      	sub	sp, #48	@ 0x30
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]
 800a1d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f107 0210 	add.w	r2, r7, #16
 800a1ea:	4611      	mov	r1, r2
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7ff fda9 	bl	8009d44 <validate>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a1f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d107      	bne.n	800a210 <f_write+0x44>
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	7d5b      	ldrb	r3, [r3, #21]
 800a204:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a208:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d002      	beq.n	800a216 <f_write+0x4a>
 800a210:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a214:	e16a      	b.n	800a4ec <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	7d1b      	ldrb	r3, [r3, #20]
 800a21a:	f003 0302 	and.w	r3, r3, #2
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d101      	bne.n	800a226 <f_write+0x5a>
 800a222:	2307      	movs	r3, #7
 800a224:	e162      	b.n	800a4ec <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	699a      	ldr	r2, [r3, #24]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	441a      	add	r2, r3
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	429a      	cmp	r2, r3
 800a234:	f080 814c 	bcs.w	800a4d0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	43db      	mvns	r3, r3
 800a23e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a240:	e146      	b.n	800a4d0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	699b      	ldr	r3, [r3, #24]
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	8992      	ldrh	r2, [r2, #12]
 800a24a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a24e:	fb01 f202 	mul.w	r2, r1, r2
 800a252:	1a9b      	subs	r3, r3, r2
 800a254:	2b00      	cmp	r3, #0
 800a256:	f040 80f1 	bne.w	800a43c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	699b      	ldr	r3, [r3, #24]
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	8992      	ldrh	r2, [r2, #12]
 800a262:	fbb3 f3f2 	udiv	r3, r3, r2
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	8952      	ldrh	r2, [r2, #10]
 800a26a:	3a01      	subs	r2, #1
 800a26c:	4013      	ands	r3, r2
 800a26e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d143      	bne.n	800a2fe <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	699b      	ldr	r3, [r3, #24]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d10c      	bne.n	800a298 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a286:	2b00      	cmp	r3, #0
 800a288:	d11a      	bne.n	800a2c0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2100      	movs	r1, #0
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fe fa15 	bl	80086be <create_chain>
 800a294:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a296:	e013      	b.n	800a2c0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d007      	beq.n	800a2b0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f7fe faa1 	bl	80087ee <clmt_clust>
 800a2ac:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a2ae:	e007      	b.n	800a2c0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	69db      	ldr	r3, [r3, #28]
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	4610      	mov	r0, r2
 800a2ba:	f7fe fa00 	bl	80086be <create_chain>
 800a2be:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	f000 8109 	beq.w	800a4da <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d104      	bne.n	800a2d8 <f_write+0x10c>
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2202      	movs	r2, #2
 800a2d2:	755a      	strb	r2, [r3, #21]
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	e109      	b.n	800a4ec <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2de:	d104      	bne.n	800a2ea <f_write+0x11e>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	755a      	strb	r2, [r3, #21]
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e100      	b.n	800a4ec <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a2ee:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d102      	bne.n	800a2fe <f_write+0x132>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a2fc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	7d1b      	ldrb	r3, [r3, #20]
 800a302:	b25b      	sxtb	r3, r3
 800a304:	2b00      	cmp	r3, #0
 800a306:	da18      	bge.n	800a33a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	7858      	ldrb	r0, [r3, #1]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6a1a      	ldr	r2, [r3, #32]
 800a316:	2301      	movs	r3, #1
 800a318:	f7fd fbd4 	bl	8007ac4 <disk_write>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d004      	beq.n	800a32c <f_write+0x160>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2201      	movs	r2, #1
 800a326:	755a      	strb	r2, [r3, #21]
 800a328:	2301      	movs	r3, #1
 800a32a:	e0df      	b.n	800a4ec <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	7d1b      	ldrb	r3, [r3, #20]
 800a330:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a334:	b2da      	uxtb	r2, r3
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	69db      	ldr	r3, [r3, #28]
 800a340:	4619      	mov	r1, r3
 800a342:	4610      	mov	r0, r2
 800a344:	f7fd ff4a 	bl	80081dc <clust2sect>
 800a348:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d104      	bne.n	800a35a <f_write+0x18e>
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2202      	movs	r2, #2
 800a354:	755a      	strb	r2, [r3, #21]
 800a356:	2302      	movs	r3, #2
 800a358:	e0c8      	b.n	800a4ec <f_write+0x320>
			sect += csect;
 800a35a:	697a      	ldr	r2, [r7, #20]
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	4413      	add	r3, r2
 800a360:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	899b      	ldrh	r3, [r3, #12]
 800a366:	461a      	mov	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a36e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a370:	6a3b      	ldr	r3, [r7, #32]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d043      	beq.n	800a3fe <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a376:	69ba      	ldr	r2, [r7, #24]
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	4413      	add	r3, r2
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	8952      	ldrh	r2, [r2, #10]
 800a380:	4293      	cmp	r3, r2
 800a382:	d905      	bls.n	800a390 <f_write+0x1c4>
					cc = fs->csize - csect;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	895b      	ldrh	r3, [r3, #10]
 800a388:	461a      	mov	r2, r3
 800a38a:	69bb      	ldr	r3, [r7, #24]
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	7858      	ldrb	r0, [r3, #1]
 800a394:	6a3b      	ldr	r3, [r7, #32]
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	69f9      	ldr	r1, [r7, #28]
 800a39a:	f7fd fb93 	bl	8007ac4 <disk_write>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d004      	beq.n	800a3ae <f_write+0x1e2>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	755a      	strb	r2, [r3, #21]
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e09e      	b.n	800a4ec <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6a1a      	ldr	r2, [r3, #32]
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	1ad3      	subs	r3, r2, r3
 800a3b6:	6a3a      	ldr	r2, [r7, #32]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d918      	bls.n	800a3ee <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6a1a      	ldr	r2, [r3, #32]
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	8992      	ldrh	r2, [r2, #12]
 800a3ce:	fb02 f303 	mul.w	r3, r2, r3
 800a3d2:	69fa      	ldr	r2, [r7, #28]
 800a3d4:	18d1      	adds	r1, r2, r3
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	899b      	ldrh	r3, [r3, #12]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	f7fd fc32 	bl	8007c44 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	7d1b      	ldrb	r3, [r3, #20]
 800a3e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	899b      	ldrh	r3, [r3, #12]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	6a3b      	ldr	r3, [r7, #32]
 800a3f6:	fb02 f303 	mul.w	r3, r2, r3
 800a3fa:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800a3fc:	e04b      	b.n	800a496 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6a1b      	ldr	r3, [r3, #32]
 800a402:	697a      	ldr	r2, [r7, #20]
 800a404:	429a      	cmp	r2, r3
 800a406:	d016      	beq.n	800a436 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	699a      	ldr	r2, [r3, #24]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a410:	429a      	cmp	r2, r3
 800a412:	d210      	bcs.n	800a436 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	7858      	ldrb	r0, [r3, #1]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a41e:	2301      	movs	r3, #1
 800a420:	697a      	ldr	r2, [r7, #20]
 800a422:	f7fd fb2f 	bl	8007a84 <disk_read>
 800a426:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d004      	beq.n	800a436 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2201      	movs	r2, #1
 800a430:	755a      	strb	r2, [r3, #21]
 800a432:	2301      	movs	r3, #1
 800a434:	e05a      	b.n	800a4ec <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	697a      	ldr	r2, [r7, #20]
 800a43a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	899b      	ldrh	r3, [r3, #12]
 800a440:	4618      	mov	r0, r3
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	693a      	ldr	r2, [r7, #16]
 800a448:	8992      	ldrh	r2, [r2, #12]
 800a44a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a44e:	fb01 f202 	mul.w	r2, r1, r2
 800a452:	1a9b      	subs	r3, r3, r2
 800a454:	1ac3      	subs	r3, r0, r3
 800a456:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d901      	bls.n	800a464 <f_write+0x298>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	699b      	ldr	r3, [r3, #24]
 800a46e:	693a      	ldr	r2, [r7, #16]
 800a470:	8992      	ldrh	r2, [r2, #12]
 800a472:	fbb3 f0f2 	udiv	r0, r3, r2
 800a476:	fb00 f202 	mul.w	r2, r0, r2
 800a47a:	1a9b      	subs	r3, r3, r2
 800a47c:	440b      	add	r3, r1
 800a47e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a480:	69f9      	ldr	r1, [r7, #28]
 800a482:	4618      	mov	r0, r3
 800a484:	f7fd fbde 	bl	8007c44 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	7d1b      	ldrb	r3, [r3, #20]
 800a48c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a490:	b2da      	uxtb	r2, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a496:	69fa      	ldr	r2, [r7, #28]
 800a498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49a:	4413      	add	r3, r2
 800a49c:	61fb      	str	r3, [r7, #28]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	699a      	ldr	r2, [r3, #24]
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a4:	441a      	add	r2, r3
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	619a      	str	r2, [r3, #24]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	68da      	ldr	r2, [r3, #12]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	699b      	ldr	r3, [r3, #24]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	bf38      	it	cc
 800a4b6:	461a      	movcc	r2, r3
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	60da      	str	r2, [r3, #12]
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c2:	441a      	add	r2, r3
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	601a      	str	r2, [r3, #0]
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f47f aeb5 	bne.w	800a242 <f_write+0x76>
 800a4d8:	e000      	b.n	800a4dc <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a4da:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	7d1b      	ldrb	r3, [r3, #20]
 800a4e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4e4:	b2da      	uxtb	r2, r3
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3730      	adds	r7, #48	@ 0x30
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f107 0208 	add.w	r2, r7, #8
 800a502:	4611      	mov	r1, r2
 800a504:	4618      	mov	r0, r3
 800a506:	f7ff fc1d 	bl	8009d44 <validate>
 800a50a:	4603      	mov	r3, r0
 800a50c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a50e:	7dfb      	ldrb	r3, [r7, #23]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d168      	bne.n	800a5e6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	7d1b      	ldrb	r3, [r3, #20]
 800a518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d062      	beq.n	800a5e6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	7d1b      	ldrb	r3, [r3, #20]
 800a524:	b25b      	sxtb	r3, r3
 800a526:	2b00      	cmp	r3, #0
 800a528:	da15      	bge.n	800a556 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	7858      	ldrb	r0, [r3, #1]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6a1a      	ldr	r2, [r3, #32]
 800a538:	2301      	movs	r3, #1
 800a53a:	f7fd fac3 	bl	8007ac4 <disk_write>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <f_sync+0x54>
 800a544:	2301      	movs	r3, #1
 800a546:	e04f      	b.n	800a5e8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	7d1b      	ldrb	r3, [r3, #20]
 800a54c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a550:	b2da      	uxtb	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a556:	f7fd f9f7 	bl	8007948 <get_fattime>
 800a55a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a562:	4619      	mov	r1, r3
 800a564:	4610      	mov	r0, r2
 800a566:	f7fd fd9b 	bl	80080a0 <move_window>
 800a56a:	4603      	mov	r3, r0
 800a56c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a56e:	7dfb      	ldrb	r3, [r7, #23]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d138      	bne.n	800a5e6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a578:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	330b      	adds	r3, #11
 800a57e:	781a      	ldrb	r2, [r3, #0]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	330b      	adds	r3, #11
 800a584:	f042 0220 	orr.w	r2, r2, #32
 800a588:	b2d2      	uxtb	r2, r2
 800a58a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6818      	ldr	r0, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	461a      	mov	r2, r3
 800a596:	68f9      	ldr	r1, [r7, #12]
 800a598:	f7fe fb26 	bl	8008be8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f103 021c 	add.w	r2, r3, #28
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	4610      	mov	r0, r2
 800a5aa:	f7fd fb1f 	bl	8007bec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	3316      	adds	r3, #22
 800a5b2:	6939      	ldr	r1, [r7, #16]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7fd fb19 	bl	8007bec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3312      	adds	r3, #18
 800a5be:	2100      	movs	r1, #0
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7fd faf8 	bl	8007bb6 <st_word>
					fs->wflag = 1;
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7fd fd94 	bl	80080fc <sync_fs>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	7d1b      	ldrb	r3, [r3, #20]
 800a5dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5e0:	b2da      	uxtb	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a5e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3718      	adds	r7, #24
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7ff ff7b 	bl	800a4f4 <f_sync>
 800a5fe:	4603      	mov	r3, r0
 800a600:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a602:	7bfb      	ldrb	r3, [r7, #15]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d118      	bne.n	800a63a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f107 0208 	add.w	r2, r7, #8
 800a60e:	4611      	mov	r1, r2
 800a610:	4618      	mov	r0, r3
 800a612:	f7ff fb97 	bl	8009d44 <validate>
 800a616:	4603      	mov	r3, r0
 800a618:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a61a:	7bfb      	ldrb	r3, [r7, #15]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10c      	bne.n	800a63a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	4618      	mov	r0, r3
 800a626:	f7fd fc97 	bl	8007f58 <dec_lock>
 800a62a:	4603      	mov	r3, r0
 800a62c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a62e:	7bfb      	ldrb	r3, [r7, #15]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d102      	bne.n	800a63a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a63a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b090      	sub	sp, #64	@ 0x40
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f107 0208 	add.w	r2, r7, #8
 800a654:	4611      	mov	r1, r2
 800a656:	4618      	mov	r0, r3
 800a658:	f7ff fb74 	bl	8009d44 <validate>
 800a65c:	4603      	mov	r3, r0
 800a65e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a662:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a666:	2b00      	cmp	r3, #0
 800a668:	d103      	bne.n	800a672 <f_lseek+0x2e>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	7d5b      	ldrb	r3, [r3, #21]
 800a66e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a672:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a676:	2b00      	cmp	r3, #0
 800a678:	d002      	beq.n	800a680 <f_lseek+0x3c>
 800a67a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a67e:	e201      	b.n	800aa84 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a684:	2b00      	cmp	r3, #0
 800a686:	f000 80d9 	beq.w	800a83c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a690:	d15a      	bne.n	800a748 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a696:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a69a:	1d1a      	adds	r2, r3, #4
 800a69c:	627a      	str	r2, [r7, #36]	@ 0x24
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	617b      	str	r3, [r7, #20]
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d03a      	beq.n	800a728 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b4:	613b      	str	r3, [r7, #16]
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6bc:	3302      	adds	r3, #2
 800a6be:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800a6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c2:	60fb      	str	r3, [r7, #12]
 800a6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fd fda3 	bl	800821a <get_fat>
 800a6d4:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d804      	bhi.n	800a6e6 <f_lseek+0xa2>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2202      	movs	r2, #2
 800a6e0:	755a      	strb	r2, [r3, #21]
 800a6e2:	2302      	movs	r3, #2
 800a6e4:	e1ce      	b.n	800aa84 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ec:	d104      	bne.n	800a6f8 <f_lseek+0xb4>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	755a      	strb	r2, [r3, #21]
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e1c5      	b.n	800aa84 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d0de      	beq.n	800a6c0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a702:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	429a      	cmp	r2, r3
 800a708:	d809      	bhi.n	800a71e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70c:	1d1a      	adds	r2, r3, #4
 800a70e:	627a      	str	r2, [r7, #36]	@ 0x24
 800a710:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a712:	601a      	str	r2, [r3, #0]
 800a714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a716:	1d1a      	adds	r2, r3, #4
 800a718:	627a      	str	r2, [r7, #36]	@ 0x24
 800a71a:	693a      	ldr	r2, [r7, #16]
 800a71c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	69db      	ldr	r3, [r3, #28]
 800a722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a724:	429a      	cmp	r2, r3
 800a726:	d3c4      	bcc.n	800a6b2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a72c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a72e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a730:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	429a      	cmp	r2, r3
 800a736:	d803      	bhi.n	800a740 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73a:	2200      	movs	r2, #0
 800a73c:	601a      	str	r2, [r3, #0]
 800a73e:	e19f      	b.n	800aa80 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a740:	2311      	movs	r3, #17
 800a742:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a746:	e19b      	b.n	800aa80 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	683a      	ldr	r2, [r7, #0]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d902      	bls.n	800a758 <f_lseek+0x114>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	f000 818d 	beq.w	800aa80 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	3b01      	subs	r3, #1
 800a76a:	4619      	mov	r1, r3
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f7fe f83e 	bl	80087ee <clmt_clust>
 800a772:	4602      	mov	r2, r0
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	69db      	ldr	r3, [r3, #28]
 800a77e:	4619      	mov	r1, r3
 800a780:	4610      	mov	r0, r2
 800a782:	f7fd fd2b 	bl	80081dc <clust2sect>
 800a786:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a788:	69bb      	ldr	r3, [r7, #24]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d104      	bne.n	800a798 <f_lseek+0x154>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2202      	movs	r2, #2
 800a792:	755a      	strb	r2, [r3, #21]
 800a794:	2302      	movs	r3, #2
 800a796:	e175      	b.n	800aa84 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	3b01      	subs	r3, #1
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	8992      	ldrh	r2, [r2, #12]
 800a7a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7a4:	68ba      	ldr	r2, [r7, #8]
 800a7a6:	8952      	ldrh	r2, [r2, #10]
 800a7a8:	3a01      	subs	r2, #1
 800a7aa:	4013      	ands	r3, r2
 800a7ac:	69ba      	ldr	r2, [r7, #24]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	68ba      	ldr	r2, [r7, #8]
 800a7b8:	8992      	ldrh	r2, [r2, #12]
 800a7ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800a7be:	fb01 f202 	mul.w	r2, r1, r2
 800a7c2:	1a9b      	subs	r3, r3, r2
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f000 815b 	beq.w	800aa80 <f_lseek+0x43c>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a1b      	ldr	r3, [r3, #32]
 800a7ce:	69ba      	ldr	r2, [r7, #24]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	f000 8155 	beq.w	800aa80 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	7d1b      	ldrb	r3, [r3, #20]
 800a7da:	b25b      	sxtb	r3, r3
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	da18      	bge.n	800a812 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	7858      	ldrb	r0, [r3, #1]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a1a      	ldr	r2, [r3, #32]
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	f7fd f968 	bl	8007ac4 <disk_write>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d004      	beq.n	800a804 <f_lseek+0x1c0>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	755a      	strb	r2, [r3, #21]
 800a800:	2301      	movs	r3, #1
 800a802:	e13f      	b.n	800aa84 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	7d1b      	ldrb	r3, [r3, #20]
 800a808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	7858      	ldrb	r0, [r3, #1]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a81c:	2301      	movs	r3, #1
 800a81e:	69ba      	ldr	r2, [r7, #24]
 800a820:	f7fd f930 	bl	8007a84 <disk_read>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d004      	beq.n	800a834 <f_lseek+0x1f0>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2201      	movs	r2, #1
 800a82e:	755a      	strb	r2, [r3, #21]
 800a830:	2301      	movs	r3, #1
 800a832:	e127      	b.n	800aa84 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	69ba      	ldr	r2, [r7, #24]
 800a838:	621a      	str	r2, [r3, #32]
 800a83a:	e121      	b.n	800aa80 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	683a      	ldr	r2, [r7, #0]
 800a842:	429a      	cmp	r2, r3
 800a844:	d908      	bls.n	800a858 <f_lseek+0x214>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	7d1b      	ldrb	r3, [r3, #20]
 800a84a:	f003 0302 	and.w	r3, r3, #2
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d102      	bne.n	800a858 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a85e:	2300      	movs	r3, #0
 800a860:	637b      	str	r3, [r7, #52]	@ 0x34
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a866:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f000 80b5 	beq.w	800a9da <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	895b      	ldrh	r3, [r3, #10]
 800a874:	461a      	mov	r2, r3
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	899b      	ldrh	r3, [r3, #12]
 800a87a:	fb02 f303 	mul.w	r3, r2, r3
 800a87e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a880:	6a3b      	ldr	r3, [r7, #32]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d01b      	beq.n	800a8be <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	1e5a      	subs	r2, r3, #1
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a890:	6a3b      	ldr	r3, [r7, #32]
 800a892:	1e59      	subs	r1, r3, #1
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d30f      	bcc.n	800a8be <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a89e:	6a3b      	ldr	r3, [r7, #32]
 800a8a0:	1e5a      	subs	r2, r3, #1
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	425b      	negs	r3, r3
 800a8a6:	401a      	ands	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	699b      	ldr	r3, [r3, #24]
 800a8b0:	683a      	ldr	r2, [r7, #0]
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	69db      	ldr	r3, [r3, #28]
 800a8ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8bc:	e022      	b.n	800a904 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d119      	bne.n	800a8fe <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fd fef5 	bl	80086be <create_chain>
 800a8d4:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a8d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d104      	bne.n	800a8e6 <f_lseek+0x2a2>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2202      	movs	r2, #2
 800a8e0:	755a      	strb	r2, [r3, #21]
 800a8e2:	2302      	movs	r3, #2
 800a8e4:	e0ce      	b.n	800aa84 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ec:	d104      	bne.n	800a8f8 <f_lseek+0x2b4>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	755a      	strb	r2, [r3, #21]
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e0c5      	b.n	800aa84 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a8fc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a902:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a906:	2b00      	cmp	r3, #0
 800a908:	d067      	beq.n	800a9da <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800a90a:	e03a      	b.n	800a982 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800a90c:	683a      	ldr	r2, [r7, #0]
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	603b      	str	r3, [r7, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	699a      	ldr	r2, [r3, #24]
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	441a      	add	r2, r3
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	7d1b      	ldrb	r3, [r3, #20]
 800a924:	f003 0302 	and.w	r3, r3, #2
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00b      	beq.n	800a944 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a930:	4618      	mov	r0, r3
 800a932:	f7fd fec4 	bl	80086be <create_chain>
 800a936:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d108      	bne.n	800a950 <f_lseek+0x30c>
							ofs = 0; break;
 800a93e:	2300      	movs	r3, #0
 800a940:	603b      	str	r3, [r7, #0]
 800a942:	e022      	b.n	800a98a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fd fc66 	bl	800821a <get_fat>
 800a94e:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a952:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a956:	d104      	bne.n	800a962 <f_lseek+0x31e>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	755a      	strb	r2, [r3, #21]
 800a95e:	2301      	movs	r3, #1
 800a960:	e090      	b.n	800aa84 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a964:	2b01      	cmp	r3, #1
 800a966:	d904      	bls.n	800a972 <f_lseek+0x32e>
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	69db      	ldr	r3, [r3, #28]
 800a96c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a96e:	429a      	cmp	r2, r3
 800a970:	d304      	bcc.n	800a97c <f_lseek+0x338>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2202      	movs	r2, #2
 800a976:	755a      	strb	r2, [r3, #21]
 800a978:	2302      	movs	r3, #2
 800a97a:	e083      	b.n	800aa84 <f_lseek+0x440>
					fp->clust = clst;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a980:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a982:	683a      	ldr	r2, [r7, #0]
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	429a      	cmp	r2, r3
 800a988:	d8c0      	bhi.n	800a90c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	699a      	ldr	r2, [r3, #24]
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	441a      	add	r2, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	899b      	ldrh	r3, [r3, #12]
 800a99a:	461a      	mov	r2, r3
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9a2:	fb01 f202 	mul.w	r2, r1, r2
 800a9a6:	1a9b      	subs	r3, r3, r2
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d016      	beq.n	800a9da <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fd fc13 	bl	80081dc <clust2sect>
 800a9b6:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a9b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d104      	bne.n	800a9c8 <f_lseek+0x384>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	755a      	strb	r2, [r3, #21]
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	e05d      	b.n	800aa84 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	899b      	ldrh	r3, [r3, #12]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9d6:	4413      	add	r3, r2
 800a9d8:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	699a      	ldr	r2, [r3, #24]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d90a      	bls.n	800a9fc <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	699a      	ldr	r2, [r3, #24]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	7d1b      	ldrb	r3, [r3, #20]
 800a9f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9f6:	b2da      	uxtb	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	68ba      	ldr	r2, [r7, #8]
 800aa02:	8992      	ldrh	r2, [r2, #12]
 800aa04:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa08:	fb01 f202 	mul.w	r2, r1, r2
 800aa0c:	1a9b      	subs	r3, r3, r2
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d036      	beq.n	800aa80 <f_lseek+0x43c>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d031      	beq.n	800aa80 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	7d1b      	ldrb	r3, [r3, #20]
 800aa20:	b25b      	sxtb	r3, r3
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	da18      	bge.n	800aa58 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	7858      	ldrb	r0, [r3, #1]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a1a      	ldr	r2, [r3, #32]
 800aa34:	2301      	movs	r3, #1
 800aa36:	f7fd f845 	bl	8007ac4 <disk_write>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d004      	beq.n	800aa4a <f_lseek+0x406>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	755a      	strb	r2, [r3, #21]
 800aa46:	2301      	movs	r3, #1
 800aa48:	e01c      	b.n	800aa84 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	7d1b      	ldrb	r3, [r3, #20]
 800aa4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa52:	b2da      	uxtb	r2, r3
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	7858      	ldrb	r0, [r3, #1]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aa62:	2301      	movs	r3, #1
 800aa64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa66:	f7fd f80d 	bl	8007a84 <disk_read>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d004      	beq.n	800aa7a <f_lseek+0x436>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	755a      	strb	r2, [r3, #21]
 800aa76:	2301      	movs	r3, #1
 800aa78:	e004      	b.n	800aa84 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa7e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800aa80:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3740      	adds	r7, #64	@ 0x40
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b087      	sub	sp, #28
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	4613      	mov	r3, r2
 800aa98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aaa2:	4b1f      	ldr	r3, [pc, #124]	@ (800ab20 <FATFS_LinkDriverEx+0x94>)
 800aaa4:	7a5b      	ldrb	r3, [r3, #9]
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d131      	bne.n	800ab10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aaac:	4b1c      	ldr	r3, [pc, #112]	@ (800ab20 <FATFS_LinkDriverEx+0x94>)
 800aaae:	7a5b      	ldrb	r3, [r3, #9]
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	461a      	mov	r2, r3
 800aab4:	4b1a      	ldr	r3, [pc, #104]	@ (800ab20 <FATFS_LinkDriverEx+0x94>)
 800aab6:	2100      	movs	r1, #0
 800aab8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800aaba:	4b19      	ldr	r3, [pc, #100]	@ (800ab20 <FATFS_LinkDriverEx+0x94>)
 800aabc:	7a5b      	ldrb	r3, [r3, #9]
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	4a17      	ldr	r2, [pc, #92]	@ (800ab20 <FATFS_LinkDriverEx+0x94>)
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4413      	add	r3, r2
 800aac6:	68fa      	ldr	r2, [r7, #12]
 800aac8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aaca:	4b15      	ldr	r3, [pc, #84]	@ (800ab20 <FATFS_LinkDriverEx+0x94>)
 800aacc:	7a5b      	ldrb	r3, [r3, #9]
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	461a      	mov	r2, r3
 800aad2:	4b13      	ldr	r3, [pc, #76]	@ (800ab20 <FATFS_LinkDriverEx+0x94>)
 800aad4:	4413      	add	r3, r2
 800aad6:	79fa      	ldrb	r2, [r7, #7]
 800aad8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aada:	4b11      	ldr	r3, [pc, #68]	@ (800ab20 <FATFS_LinkDriverEx+0x94>)
 800aadc:	7a5b      	ldrb	r3, [r3, #9]
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	1c5a      	adds	r2, r3, #1
 800aae2:	b2d1      	uxtb	r1, r2
 800aae4:	4a0e      	ldr	r2, [pc, #56]	@ (800ab20 <FATFS_LinkDriverEx+0x94>)
 800aae6:	7251      	strb	r1, [r2, #9]
 800aae8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aaea:	7dbb      	ldrb	r3, [r7, #22]
 800aaec:	3330      	adds	r3, #48	@ 0x30
 800aaee:	b2da      	uxtb	r2, r3
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	223a      	movs	r2, #58	@ 0x3a
 800aafa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	3302      	adds	r3, #2
 800ab00:	222f      	movs	r2, #47	@ 0x2f
 800ab02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	3303      	adds	r3, #3
 800ab08:	2200      	movs	r2, #0
 800ab0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ab10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	371c      	adds	r7, #28
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr
 800ab1e:	bf00      	nop
 800ab20:	20002c0c 	.word	0x20002c0c

0800ab24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ab2e:	2200      	movs	r2, #0
 800ab30:	6839      	ldr	r1, [r7, #0]
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f7ff ffaa 	bl	800aa8c <FATFS_LinkDriverEx>
 800ab38:	4603      	mov	r3, r0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
	...

0800ab44 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	6039      	str	r1, [r7, #0]
 800ab4e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ab50:	88fb      	ldrh	r3, [r7, #6]
 800ab52:	2b7f      	cmp	r3, #127	@ 0x7f
 800ab54:	d802      	bhi.n	800ab5c <ff_convert+0x18>
		c = chr;
 800ab56:	88fb      	ldrh	r3, [r7, #6]
 800ab58:	81fb      	strh	r3, [r7, #14]
 800ab5a:	e025      	b.n	800aba8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00b      	beq.n	800ab7a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ab62:	88fb      	ldrh	r3, [r7, #6]
 800ab64:	2bff      	cmp	r3, #255	@ 0xff
 800ab66:	d805      	bhi.n	800ab74 <ff_convert+0x30>
 800ab68:	88fb      	ldrh	r3, [r7, #6]
 800ab6a:	3b80      	subs	r3, #128	@ 0x80
 800ab6c:	4a12      	ldr	r2, [pc, #72]	@ (800abb8 <ff_convert+0x74>)
 800ab6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab72:	e000      	b.n	800ab76 <ff_convert+0x32>
 800ab74:	2300      	movs	r3, #0
 800ab76:	81fb      	strh	r3, [r7, #14]
 800ab78:	e016      	b.n	800aba8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	81fb      	strh	r3, [r7, #14]
 800ab7e:	e009      	b.n	800ab94 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ab80:	89fb      	ldrh	r3, [r7, #14]
 800ab82:	4a0d      	ldr	r2, [pc, #52]	@ (800abb8 <ff_convert+0x74>)
 800ab84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab88:	88fa      	ldrh	r2, [r7, #6]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d006      	beq.n	800ab9c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ab8e:	89fb      	ldrh	r3, [r7, #14]
 800ab90:	3301      	adds	r3, #1
 800ab92:	81fb      	strh	r3, [r7, #14]
 800ab94:	89fb      	ldrh	r3, [r7, #14]
 800ab96:	2b7f      	cmp	r3, #127	@ 0x7f
 800ab98:	d9f2      	bls.n	800ab80 <ff_convert+0x3c>
 800ab9a:	e000      	b.n	800ab9e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ab9c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ab9e:	89fb      	ldrh	r3, [r7, #14]
 800aba0:	3380      	adds	r3, #128	@ 0x80
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800aba8:	89fb      	ldrh	r3, [r7, #14]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3714      	adds	r7, #20
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	0800f370 	.word	0x0800f370

0800abbc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b087      	sub	sp, #28
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	4603      	mov	r3, r0
 800abc4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800abc6:	88fb      	ldrh	r3, [r7, #6]
 800abc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abcc:	d201      	bcs.n	800abd2 <ff_wtoupper+0x16>
 800abce:	4b3e      	ldr	r3, [pc, #248]	@ (800acc8 <ff_wtoupper+0x10c>)
 800abd0:	e000      	b.n	800abd4 <ff_wtoupper+0x18>
 800abd2:	4b3e      	ldr	r3, [pc, #248]	@ (800accc <ff_wtoupper+0x110>)
 800abd4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	1c9a      	adds	r2, r3, #2
 800abda:	617a      	str	r2, [r7, #20]
 800abdc:	881b      	ldrh	r3, [r3, #0]
 800abde:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800abe0:	8a7b      	ldrh	r3, [r7, #18]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d068      	beq.n	800acb8 <ff_wtoupper+0xfc>
 800abe6:	88fa      	ldrh	r2, [r7, #6]
 800abe8:	8a7b      	ldrh	r3, [r7, #18]
 800abea:	429a      	cmp	r2, r3
 800abec:	d364      	bcc.n	800acb8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	1c9a      	adds	r2, r3, #2
 800abf2:	617a      	str	r2, [r7, #20]
 800abf4:	881b      	ldrh	r3, [r3, #0]
 800abf6:	823b      	strh	r3, [r7, #16]
 800abf8:	8a3b      	ldrh	r3, [r7, #16]
 800abfa:	0a1b      	lsrs	r3, r3, #8
 800abfc:	81fb      	strh	r3, [r7, #14]
 800abfe:	8a3b      	ldrh	r3, [r7, #16]
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ac04:	88fa      	ldrh	r2, [r7, #6]
 800ac06:	8a79      	ldrh	r1, [r7, #18]
 800ac08:	8a3b      	ldrh	r3, [r7, #16]
 800ac0a:	440b      	add	r3, r1
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	da49      	bge.n	800aca4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ac10:	89fb      	ldrh	r3, [r7, #14]
 800ac12:	2b08      	cmp	r3, #8
 800ac14:	d84f      	bhi.n	800acb6 <ff_wtoupper+0xfa>
 800ac16:	a201      	add	r2, pc, #4	@ (adr r2, 800ac1c <ff_wtoupper+0x60>)
 800ac18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac1c:	0800ac41 	.word	0x0800ac41
 800ac20:	0800ac53 	.word	0x0800ac53
 800ac24:	0800ac69 	.word	0x0800ac69
 800ac28:	0800ac71 	.word	0x0800ac71
 800ac2c:	0800ac79 	.word	0x0800ac79
 800ac30:	0800ac81 	.word	0x0800ac81
 800ac34:	0800ac89 	.word	0x0800ac89
 800ac38:	0800ac91 	.word	0x0800ac91
 800ac3c:	0800ac99 	.word	0x0800ac99
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ac40:	88fa      	ldrh	r2, [r7, #6]
 800ac42:	8a7b      	ldrh	r3, [r7, #18]
 800ac44:	1ad3      	subs	r3, r2, r3
 800ac46:	005b      	lsls	r3, r3, #1
 800ac48:	697a      	ldr	r2, [r7, #20]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	881b      	ldrh	r3, [r3, #0]
 800ac4e:	80fb      	strh	r3, [r7, #6]
 800ac50:	e027      	b.n	800aca2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ac52:	88fa      	ldrh	r2, [r7, #6]
 800ac54:	8a7b      	ldrh	r3, [r7, #18]
 800ac56:	1ad3      	subs	r3, r2, r3
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	f003 0301 	and.w	r3, r3, #1
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	88fa      	ldrh	r2, [r7, #6]
 800ac62:	1ad3      	subs	r3, r2, r3
 800ac64:	80fb      	strh	r3, [r7, #6]
 800ac66:	e01c      	b.n	800aca2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ac68:	88fb      	ldrh	r3, [r7, #6]
 800ac6a:	3b10      	subs	r3, #16
 800ac6c:	80fb      	strh	r3, [r7, #6]
 800ac6e:	e018      	b.n	800aca2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ac70:	88fb      	ldrh	r3, [r7, #6]
 800ac72:	3b20      	subs	r3, #32
 800ac74:	80fb      	strh	r3, [r7, #6]
 800ac76:	e014      	b.n	800aca2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ac78:	88fb      	ldrh	r3, [r7, #6]
 800ac7a:	3b30      	subs	r3, #48	@ 0x30
 800ac7c:	80fb      	strh	r3, [r7, #6]
 800ac7e:	e010      	b.n	800aca2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ac80:	88fb      	ldrh	r3, [r7, #6]
 800ac82:	3b1a      	subs	r3, #26
 800ac84:	80fb      	strh	r3, [r7, #6]
 800ac86:	e00c      	b.n	800aca2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ac88:	88fb      	ldrh	r3, [r7, #6]
 800ac8a:	3308      	adds	r3, #8
 800ac8c:	80fb      	strh	r3, [r7, #6]
 800ac8e:	e008      	b.n	800aca2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ac90:	88fb      	ldrh	r3, [r7, #6]
 800ac92:	3b50      	subs	r3, #80	@ 0x50
 800ac94:	80fb      	strh	r3, [r7, #6]
 800ac96:	e004      	b.n	800aca2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ac98:	88fb      	ldrh	r3, [r7, #6]
 800ac9a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800ac9e:	80fb      	strh	r3, [r7, #6]
 800aca0:	bf00      	nop
			}
			break;
 800aca2:	e008      	b.n	800acb6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800aca4:	89fb      	ldrh	r3, [r7, #14]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d195      	bne.n	800abd6 <ff_wtoupper+0x1a>
 800acaa:	8a3b      	ldrh	r3, [r7, #16]
 800acac:	005b      	lsls	r3, r3, #1
 800acae:	697a      	ldr	r2, [r7, #20]
 800acb0:	4413      	add	r3, r2
 800acb2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800acb4:	e78f      	b.n	800abd6 <ff_wtoupper+0x1a>
			break;
 800acb6:	bf00      	nop
	}

	return chr;
 800acb8:	88fb      	ldrh	r3, [r7, #6]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	371c      	adds	r7, #28
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	0800f470 	.word	0x0800f470
 800accc:	0800f664 	.word	0x0800f664

0800acd0 <sulp>:
 800acd0:	b570      	push	{r4, r5, r6, lr}
 800acd2:	4604      	mov	r4, r0
 800acd4:	460d      	mov	r5, r1
 800acd6:	ec45 4b10 	vmov	d0, r4, r5
 800acda:	4616      	mov	r6, r2
 800acdc:	f003 fc5c 	bl	800e598 <__ulp>
 800ace0:	ec51 0b10 	vmov	r0, r1, d0
 800ace4:	b17e      	cbz	r6, 800ad06 <sulp+0x36>
 800ace6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800acea:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800acee:	2b00      	cmp	r3, #0
 800acf0:	dd09      	ble.n	800ad06 <sulp+0x36>
 800acf2:	051b      	lsls	r3, r3, #20
 800acf4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800acf8:	2400      	movs	r4, #0
 800acfa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800acfe:	4622      	mov	r2, r4
 800ad00:	462b      	mov	r3, r5
 800ad02:	f7f5 fca1 	bl	8000648 <__aeabi_dmul>
 800ad06:	ec41 0b10 	vmov	d0, r0, r1
 800ad0a:	bd70      	pop	{r4, r5, r6, pc}
 800ad0c:	0000      	movs	r0, r0
	...

0800ad10 <_strtod_l>:
 800ad10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad14:	b09f      	sub	sp, #124	@ 0x7c
 800ad16:	460c      	mov	r4, r1
 800ad18:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ad1e:	9005      	str	r0, [sp, #20]
 800ad20:	f04f 0a00 	mov.w	sl, #0
 800ad24:	f04f 0b00 	mov.w	fp, #0
 800ad28:	460a      	mov	r2, r1
 800ad2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad2c:	7811      	ldrb	r1, [r2, #0]
 800ad2e:	292b      	cmp	r1, #43	@ 0x2b
 800ad30:	d04a      	beq.n	800adc8 <_strtod_l+0xb8>
 800ad32:	d838      	bhi.n	800ada6 <_strtod_l+0x96>
 800ad34:	290d      	cmp	r1, #13
 800ad36:	d832      	bhi.n	800ad9e <_strtod_l+0x8e>
 800ad38:	2908      	cmp	r1, #8
 800ad3a:	d832      	bhi.n	800ada2 <_strtod_l+0x92>
 800ad3c:	2900      	cmp	r1, #0
 800ad3e:	d03b      	beq.n	800adb8 <_strtod_l+0xa8>
 800ad40:	2200      	movs	r2, #0
 800ad42:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ad44:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ad46:	782a      	ldrb	r2, [r5, #0]
 800ad48:	2a30      	cmp	r2, #48	@ 0x30
 800ad4a:	f040 80b3 	bne.w	800aeb4 <_strtod_l+0x1a4>
 800ad4e:	786a      	ldrb	r2, [r5, #1]
 800ad50:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ad54:	2a58      	cmp	r2, #88	@ 0x58
 800ad56:	d16e      	bne.n	800ae36 <_strtod_l+0x126>
 800ad58:	9302      	str	r3, [sp, #8]
 800ad5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad5c:	9301      	str	r3, [sp, #4]
 800ad5e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ad60:	9300      	str	r3, [sp, #0]
 800ad62:	4a8e      	ldr	r2, [pc, #568]	@ (800af9c <_strtod_l+0x28c>)
 800ad64:	9805      	ldr	r0, [sp, #20]
 800ad66:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ad68:	a919      	add	r1, sp, #100	@ 0x64
 800ad6a:	f002 fd07 	bl	800d77c <__gethex>
 800ad6e:	f010 060f 	ands.w	r6, r0, #15
 800ad72:	4604      	mov	r4, r0
 800ad74:	d005      	beq.n	800ad82 <_strtod_l+0x72>
 800ad76:	2e06      	cmp	r6, #6
 800ad78:	d128      	bne.n	800adcc <_strtod_l+0xbc>
 800ad7a:	3501      	adds	r5, #1
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ad80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f040 858e 	bne.w	800b8a6 <_strtod_l+0xb96>
 800ad8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad8c:	b1cb      	cbz	r3, 800adc2 <_strtod_l+0xb2>
 800ad8e:	4652      	mov	r2, sl
 800ad90:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ad94:	ec43 2b10 	vmov	d0, r2, r3
 800ad98:	b01f      	add	sp, #124	@ 0x7c
 800ad9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad9e:	2920      	cmp	r1, #32
 800ada0:	d1ce      	bne.n	800ad40 <_strtod_l+0x30>
 800ada2:	3201      	adds	r2, #1
 800ada4:	e7c1      	b.n	800ad2a <_strtod_l+0x1a>
 800ada6:	292d      	cmp	r1, #45	@ 0x2d
 800ada8:	d1ca      	bne.n	800ad40 <_strtod_l+0x30>
 800adaa:	2101      	movs	r1, #1
 800adac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800adae:	1c51      	adds	r1, r2, #1
 800adb0:	9119      	str	r1, [sp, #100]	@ 0x64
 800adb2:	7852      	ldrb	r2, [r2, #1]
 800adb4:	2a00      	cmp	r2, #0
 800adb6:	d1c5      	bne.n	800ad44 <_strtod_l+0x34>
 800adb8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800adba:	9419      	str	r4, [sp, #100]	@ 0x64
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f040 8570 	bne.w	800b8a2 <_strtod_l+0xb92>
 800adc2:	4652      	mov	r2, sl
 800adc4:	465b      	mov	r3, fp
 800adc6:	e7e5      	b.n	800ad94 <_strtod_l+0x84>
 800adc8:	2100      	movs	r1, #0
 800adca:	e7ef      	b.n	800adac <_strtod_l+0x9c>
 800adcc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800adce:	b13a      	cbz	r2, 800ade0 <_strtod_l+0xd0>
 800add0:	2135      	movs	r1, #53	@ 0x35
 800add2:	a81c      	add	r0, sp, #112	@ 0x70
 800add4:	f003 fcda 	bl	800e78c <__copybits>
 800add8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adda:	9805      	ldr	r0, [sp, #20]
 800addc:	f003 f8a8 	bl	800df30 <_Bfree>
 800ade0:	3e01      	subs	r6, #1
 800ade2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ade4:	2e04      	cmp	r6, #4
 800ade6:	d806      	bhi.n	800adf6 <_strtod_l+0xe6>
 800ade8:	e8df f006 	tbb	[pc, r6]
 800adec:	201d0314 	.word	0x201d0314
 800adf0:	14          	.byte	0x14
 800adf1:	00          	.byte	0x00
 800adf2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800adf6:	05e1      	lsls	r1, r4, #23
 800adf8:	bf48      	it	mi
 800adfa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800adfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae02:	0d1b      	lsrs	r3, r3, #20
 800ae04:	051b      	lsls	r3, r3, #20
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1bb      	bne.n	800ad82 <_strtod_l+0x72>
 800ae0a:	f001 fd6b 	bl	800c8e4 <__errno>
 800ae0e:	2322      	movs	r3, #34	@ 0x22
 800ae10:	6003      	str	r3, [r0, #0]
 800ae12:	e7b6      	b.n	800ad82 <_strtod_l+0x72>
 800ae14:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ae18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ae1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ae20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ae24:	e7e7      	b.n	800adf6 <_strtod_l+0xe6>
 800ae26:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800afa4 <_strtod_l+0x294>
 800ae2a:	e7e4      	b.n	800adf6 <_strtod_l+0xe6>
 800ae2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ae30:	f04f 3aff 	mov.w	sl, #4294967295
 800ae34:	e7df      	b.n	800adf6 <_strtod_l+0xe6>
 800ae36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae38:	1c5a      	adds	r2, r3, #1
 800ae3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae3c:	785b      	ldrb	r3, [r3, #1]
 800ae3e:	2b30      	cmp	r3, #48	@ 0x30
 800ae40:	d0f9      	beq.n	800ae36 <_strtod_l+0x126>
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d09d      	beq.n	800ad82 <_strtod_l+0x72>
 800ae46:	2301      	movs	r3, #1
 800ae48:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae4c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae4e:	2300      	movs	r3, #0
 800ae50:	9308      	str	r3, [sp, #32]
 800ae52:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae54:	461f      	mov	r7, r3
 800ae56:	220a      	movs	r2, #10
 800ae58:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ae5a:	7805      	ldrb	r5, [r0, #0]
 800ae5c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ae60:	b2d9      	uxtb	r1, r3
 800ae62:	2909      	cmp	r1, #9
 800ae64:	d928      	bls.n	800aeb8 <_strtod_l+0x1a8>
 800ae66:	494e      	ldr	r1, [pc, #312]	@ (800afa0 <_strtod_l+0x290>)
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f001 fcdf 	bl	800c82c <strncmp>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	d032      	beq.n	800aed8 <_strtod_l+0x1c8>
 800ae72:	2000      	movs	r0, #0
 800ae74:	462a      	mov	r2, r5
 800ae76:	4681      	mov	r9, r0
 800ae78:	463d      	mov	r5, r7
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2a65      	cmp	r2, #101	@ 0x65
 800ae7e:	d001      	beq.n	800ae84 <_strtod_l+0x174>
 800ae80:	2a45      	cmp	r2, #69	@ 0x45
 800ae82:	d114      	bne.n	800aeae <_strtod_l+0x19e>
 800ae84:	b91d      	cbnz	r5, 800ae8e <_strtod_l+0x17e>
 800ae86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae88:	4302      	orrs	r2, r0
 800ae8a:	d095      	beq.n	800adb8 <_strtod_l+0xa8>
 800ae8c:	2500      	movs	r5, #0
 800ae8e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ae90:	1c62      	adds	r2, r4, #1
 800ae92:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae94:	7862      	ldrb	r2, [r4, #1]
 800ae96:	2a2b      	cmp	r2, #43	@ 0x2b
 800ae98:	d077      	beq.n	800af8a <_strtod_l+0x27a>
 800ae9a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ae9c:	d07b      	beq.n	800af96 <_strtod_l+0x286>
 800ae9e:	f04f 0c00 	mov.w	ip, #0
 800aea2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800aea6:	2909      	cmp	r1, #9
 800aea8:	f240 8082 	bls.w	800afb0 <_strtod_l+0x2a0>
 800aeac:	9419      	str	r4, [sp, #100]	@ 0x64
 800aeae:	f04f 0800 	mov.w	r8, #0
 800aeb2:	e0a2      	b.n	800affa <_strtod_l+0x2ea>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	e7c7      	b.n	800ae48 <_strtod_l+0x138>
 800aeb8:	2f08      	cmp	r7, #8
 800aeba:	bfd5      	itete	le
 800aebc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800aebe:	9908      	ldrgt	r1, [sp, #32]
 800aec0:	fb02 3301 	mlale	r3, r2, r1, r3
 800aec4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800aec8:	f100 0001 	add.w	r0, r0, #1
 800aecc:	bfd4      	ite	le
 800aece:	930a      	strle	r3, [sp, #40]	@ 0x28
 800aed0:	9308      	strgt	r3, [sp, #32]
 800aed2:	3701      	adds	r7, #1
 800aed4:	9019      	str	r0, [sp, #100]	@ 0x64
 800aed6:	e7bf      	b.n	800ae58 <_strtod_l+0x148>
 800aed8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aeda:	1c5a      	adds	r2, r3, #1
 800aedc:	9219      	str	r2, [sp, #100]	@ 0x64
 800aede:	785a      	ldrb	r2, [r3, #1]
 800aee0:	b37f      	cbz	r7, 800af42 <_strtod_l+0x232>
 800aee2:	4681      	mov	r9, r0
 800aee4:	463d      	mov	r5, r7
 800aee6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800aeea:	2b09      	cmp	r3, #9
 800aeec:	d912      	bls.n	800af14 <_strtod_l+0x204>
 800aeee:	2301      	movs	r3, #1
 800aef0:	e7c4      	b.n	800ae7c <_strtod_l+0x16c>
 800aef2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aef4:	1c5a      	adds	r2, r3, #1
 800aef6:	9219      	str	r2, [sp, #100]	@ 0x64
 800aef8:	785a      	ldrb	r2, [r3, #1]
 800aefa:	3001      	adds	r0, #1
 800aefc:	2a30      	cmp	r2, #48	@ 0x30
 800aefe:	d0f8      	beq.n	800aef2 <_strtod_l+0x1e2>
 800af00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800af04:	2b08      	cmp	r3, #8
 800af06:	f200 84d3 	bhi.w	800b8b0 <_strtod_l+0xba0>
 800af0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af0c:	930c      	str	r3, [sp, #48]	@ 0x30
 800af0e:	4681      	mov	r9, r0
 800af10:	2000      	movs	r0, #0
 800af12:	4605      	mov	r5, r0
 800af14:	3a30      	subs	r2, #48	@ 0x30
 800af16:	f100 0301 	add.w	r3, r0, #1
 800af1a:	d02a      	beq.n	800af72 <_strtod_l+0x262>
 800af1c:	4499      	add	r9, r3
 800af1e:	eb00 0c05 	add.w	ip, r0, r5
 800af22:	462b      	mov	r3, r5
 800af24:	210a      	movs	r1, #10
 800af26:	4563      	cmp	r3, ip
 800af28:	d10d      	bne.n	800af46 <_strtod_l+0x236>
 800af2a:	1c69      	adds	r1, r5, #1
 800af2c:	4401      	add	r1, r0
 800af2e:	4428      	add	r0, r5
 800af30:	2808      	cmp	r0, #8
 800af32:	dc16      	bgt.n	800af62 <_strtod_l+0x252>
 800af34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800af36:	230a      	movs	r3, #10
 800af38:	fb03 2300 	mla	r3, r3, r0, r2
 800af3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800af3e:	2300      	movs	r3, #0
 800af40:	e018      	b.n	800af74 <_strtod_l+0x264>
 800af42:	4638      	mov	r0, r7
 800af44:	e7da      	b.n	800aefc <_strtod_l+0x1ec>
 800af46:	2b08      	cmp	r3, #8
 800af48:	f103 0301 	add.w	r3, r3, #1
 800af4c:	dc03      	bgt.n	800af56 <_strtod_l+0x246>
 800af4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800af50:	434e      	muls	r6, r1
 800af52:	960a      	str	r6, [sp, #40]	@ 0x28
 800af54:	e7e7      	b.n	800af26 <_strtod_l+0x216>
 800af56:	2b10      	cmp	r3, #16
 800af58:	bfde      	ittt	le
 800af5a:	9e08      	ldrle	r6, [sp, #32]
 800af5c:	434e      	mulle	r6, r1
 800af5e:	9608      	strle	r6, [sp, #32]
 800af60:	e7e1      	b.n	800af26 <_strtod_l+0x216>
 800af62:	280f      	cmp	r0, #15
 800af64:	dceb      	bgt.n	800af3e <_strtod_l+0x22e>
 800af66:	9808      	ldr	r0, [sp, #32]
 800af68:	230a      	movs	r3, #10
 800af6a:	fb03 2300 	mla	r3, r3, r0, r2
 800af6e:	9308      	str	r3, [sp, #32]
 800af70:	e7e5      	b.n	800af3e <_strtod_l+0x22e>
 800af72:	4629      	mov	r1, r5
 800af74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af76:	1c50      	adds	r0, r2, #1
 800af78:	9019      	str	r0, [sp, #100]	@ 0x64
 800af7a:	7852      	ldrb	r2, [r2, #1]
 800af7c:	4618      	mov	r0, r3
 800af7e:	460d      	mov	r5, r1
 800af80:	e7b1      	b.n	800aee6 <_strtod_l+0x1d6>
 800af82:	f04f 0900 	mov.w	r9, #0
 800af86:	2301      	movs	r3, #1
 800af88:	e77d      	b.n	800ae86 <_strtod_l+0x176>
 800af8a:	f04f 0c00 	mov.w	ip, #0
 800af8e:	1ca2      	adds	r2, r4, #2
 800af90:	9219      	str	r2, [sp, #100]	@ 0x64
 800af92:	78a2      	ldrb	r2, [r4, #2]
 800af94:	e785      	b.n	800aea2 <_strtod_l+0x192>
 800af96:	f04f 0c01 	mov.w	ip, #1
 800af9a:	e7f8      	b.n	800af8e <_strtod_l+0x27e>
 800af9c:	0800f738 	.word	0x0800f738
 800afa0:	0800f720 	.word	0x0800f720
 800afa4:	7ff00000 	.word	0x7ff00000
 800afa8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800afaa:	1c51      	adds	r1, r2, #1
 800afac:	9119      	str	r1, [sp, #100]	@ 0x64
 800afae:	7852      	ldrb	r2, [r2, #1]
 800afb0:	2a30      	cmp	r2, #48	@ 0x30
 800afb2:	d0f9      	beq.n	800afa8 <_strtod_l+0x298>
 800afb4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800afb8:	2908      	cmp	r1, #8
 800afba:	f63f af78 	bhi.w	800aeae <_strtod_l+0x19e>
 800afbe:	3a30      	subs	r2, #48	@ 0x30
 800afc0:	920e      	str	r2, [sp, #56]	@ 0x38
 800afc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800afc4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800afc6:	f04f 080a 	mov.w	r8, #10
 800afca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800afcc:	1c56      	adds	r6, r2, #1
 800afce:	9619      	str	r6, [sp, #100]	@ 0x64
 800afd0:	7852      	ldrb	r2, [r2, #1]
 800afd2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800afd6:	f1be 0f09 	cmp.w	lr, #9
 800afda:	d939      	bls.n	800b050 <_strtod_l+0x340>
 800afdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800afde:	1a76      	subs	r6, r6, r1
 800afe0:	2e08      	cmp	r6, #8
 800afe2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800afe6:	dc03      	bgt.n	800aff0 <_strtod_l+0x2e0>
 800afe8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800afea:	4588      	cmp	r8, r1
 800afec:	bfa8      	it	ge
 800afee:	4688      	movge	r8, r1
 800aff0:	f1bc 0f00 	cmp.w	ip, #0
 800aff4:	d001      	beq.n	800affa <_strtod_l+0x2ea>
 800aff6:	f1c8 0800 	rsb	r8, r8, #0
 800affa:	2d00      	cmp	r5, #0
 800affc:	d14e      	bne.n	800b09c <_strtod_l+0x38c>
 800affe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b000:	4308      	orrs	r0, r1
 800b002:	f47f aebe 	bne.w	800ad82 <_strtod_l+0x72>
 800b006:	2b00      	cmp	r3, #0
 800b008:	f47f aed6 	bne.w	800adb8 <_strtod_l+0xa8>
 800b00c:	2a69      	cmp	r2, #105	@ 0x69
 800b00e:	d028      	beq.n	800b062 <_strtod_l+0x352>
 800b010:	dc25      	bgt.n	800b05e <_strtod_l+0x34e>
 800b012:	2a49      	cmp	r2, #73	@ 0x49
 800b014:	d025      	beq.n	800b062 <_strtod_l+0x352>
 800b016:	2a4e      	cmp	r2, #78	@ 0x4e
 800b018:	f47f aece 	bne.w	800adb8 <_strtod_l+0xa8>
 800b01c:	499b      	ldr	r1, [pc, #620]	@ (800b28c <_strtod_l+0x57c>)
 800b01e:	a819      	add	r0, sp, #100	@ 0x64
 800b020:	f002 fdce 	bl	800dbc0 <__match>
 800b024:	2800      	cmp	r0, #0
 800b026:	f43f aec7 	beq.w	800adb8 <_strtod_l+0xa8>
 800b02a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	2b28      	cmp	r3, #40	@ 0x28
 800b030:	d12e      	bne.n	800b090 <_strtod_l+0x380>
 800b032:	4997      	ldr	r1, [pc, #604]	@ (800b290 <_strtod_l+0x580>)
 800b034:	aa1c      	add	r2, sp, #112	@ 0x70
 800b036:	a819      	add	r0, sp, #100	@ 0x64
 800b038:	f002 fdd6 	bl	800dbe8 <__hexnan>
 800b03c:	2805      	cmp	r0, #5
 800b03e:	d127      	bne.n	800b090 <_strtod_l+0x380>
 800b040:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b042:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b046:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b04a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b04e:	e698      	b.n	800ad82 <_strtod_l+0x72>
 800b050:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b052:	fb08 2101 	mla	r1, r8, r1, r2
 800b056:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b05a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b05c:	e7b5      	b.n	800afca <_strtod_l+0x2ba>
 800b05e:	2a6e      	cmp	r2, #110	@ 0x6e
 800b060:	e7da      	b.n	800b018 <_strtod_l+0x308>
 800b062:	498c      	ldr	r1, [pc, #560]	@ (800b294 <_strtod_l+0x584>)
 800b064:	a819      	add	r0, sp, #100	@ 0x64
 800b066:	f002 fdab 	bl	800dbc0 <__match>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	f43f aea4 	beq.w	800adb8 <_strtod_l+0xa8>
 800b070:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b072:	4989      	ldr	r1, [pc, #548]	@ (800b298 <_strtod_l+0x588>)
 800b074:	3b01      	subs	r3, #1
 800b076:	a819      	add	r0, sp, #100	@ 0x64
 800b078:	9319      	str	r3, [sp, #100]	@ 0x64
 800b07a:	f002 fda1 	bl	800dbc0 <__match>
 800b07e:	b910      	cbnz	r0, 800b086 <_strtod_l+0x376>
 800b080:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b082:	3301      	adds	r3, #1
 800b084:	9319      	str	r3, [sp, #100]	@ 0x64
 800b086:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b2a8 <_strtod_l+0x598>
 800b08a:	f04f 0a00 	mov.w	sl, #0
 800b08e:	e678      	b.n	800ad82 <_strtod_l+0x72>
 800b090:	4882      	ldr	r0, [pc, #520]	@ (800b29c <_strtod_l+0x58c>)
 800b092:	f001 fc65 	bl	800c960 <nan>
 800b096:	ec5b ab10 	vmov	sl, fp, d0
 800b09a:	e672      	b.n	800ad82 <_strtod_l+0x72>
 800b09c:	eba8 0309 	sub.w	r3, r8, r9
 800b0a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b0a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0a4:	2f00      	cmp	r7, #0
 800b0a6:	bf08      	it	eq
 800b0a8:	462f      	moveq	r7, r5
 800b0aa:	2d10      	cmp	r5, #16
 800b0ac:	462c      	mov	r4, r5
 800b0ae:	bfa8      	it	ge
 800b0b0:	2410      	movge	r4, #16
 800b0b2:	f7f5 fa4f 	bl	8000554 <__aeabi_ui2d>
 800b0b6:	2d09      	cmp	r5, #9
 800b0b8:	4682      	mov	sl, r0
 800b0ba:	468b      	mov	fp, r1
 800b0bc:	dc13      	bgt.n	800b0e6 <_strtod_l+0x3d6>
 800b0be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f43f ae5e 	beq.w	800ad82 <_strtod_l+0x72>
 800b0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c8:	dd78      	ble.n	800b1bc <_strtod_l+0x4ac>
 800b0ca:	2b16      	cmp	r3, #22
 800b0cc:	dc5f      	bgt.n	800b18e <_strtod_l+0x47e>
 800b0ce:	4974      	ldr	r1, [pc, #464]	@ (800b2a0 <_strtod_l+0x590>)
 800b0d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0d8:	4652      	mov	r2, sl
 800b0da:	465b      	mov	r3, fp
 800b0dc:	f7f5 fab4 	bl	8000648 <__aeabi_dmul>
 800b0e0:	4682      	mov	sl, r0
 800b0e2:	468b      	mov	fp, r1
 800b0e4:	e64d      	b.n	800ad82 <_strtod_l+0x72>
 800b0e6:	4b6e      	ldr	r3, [pc, #440]	@ (800b2a0 <_strtod_l+0x590>)
 800b0e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b0ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b0f0:	f7f5 faaa 	bl	8000648 <__aeabi_dmul>
 800b0f4:	4682      	mov	sl, r0
 800b0f6:	9808      	ldr	r0, [sp, #32]
 800b0f8:	468b      	mov	fp, r1
 800b0fa:	f7f5 fa2b 	bl	8000554 <__aeabi_ui2d>
 800b0fe:	4602      	mov	r2, r0
 800b100:	460b      	mov	r3, r1
 800b102:	4650      	mov	r0, sl
 800b104:	4659      	mov	r1, fp
 800b106:	f7f5 f8e9 	bl	80002dc <__adddf3>
 800b10a:	2d0f      	cmp	r5, #15
 800b10c:	4682      	mov	sl, r0
 800b10e:	468b      	mov	fp, r1
 800b110:	ddd5      	ble.n	800b0be <_strtod_l+0x3ae>
 800b112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b114:	1b2c      	subs	r4, r5, r4
 800b116:	441c      	add	r4, r3
 800b118:	2c00      	cmp	r4, #0
 800b11a:	f340 8096 	ble.w	800b24a <_strtod_l+0x53a>
 800b11e:	f014 030f 	ands.w	r3, r4, #15
 800b122:	d00a      	beq.n	800b13a <_strtod_l+0x42a>
 800b124:	495e      	ldr	r1, [pc, #376]	@ (800b2a0 <_strtod_l+0x590>)
 800b126:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b12a:	4652      	mov	r2, sl
 800b12c:	465b      	mov	r3, fp
 800b12e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b132:	f7f5 fa89 	bl	8000648 <__aeabi_dmul>
 800b136:	4682      	mov	sl, r0
 800b138:	468b      	mov	fp, r1
 800b13a:	f034 040f 	bics.w	r4, r4, #15
 800b13e:	d073      	beq.n	800b228 <_strtod_l+0x518>
 800b140:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b144:	dd48      	ble.n	800b1d8 <_strtod_l+0x4c8>
 800b146:	2400      	movs	r4, #0
 800b148:	46a0      	mov	r8, r4
 800b14a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b14c:	46a1      	mov	r9, r4
 800b14e:	9a05      	ldr	r2, [sp, #20]
 800b150:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b2a8 <_strtod_l+0x598>
 800b154:	2322      	movs	r3, #34	@ 0x22
 800b156:	6013      	str	r3, [r2, #0]
 800b158:	f04f 0a00 	mov.w	sl, #0
 800b15c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b15e:	2b00      	cmp	r3, #0
 800b160:	f43f ae0f 	beq.w	800ad82 <_strtod_l+0x72>
 800b164:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b166:	9805      	ldr	r0, [sp, #20]
 800b168:	f002 fee2 	bl	800df30 <_Bfree>
 800b16c:	9805      	ldr	r0, [sp, #20]
 800b16e:	4649      	mov	r1, r9
 800b170:	f002 fede 	bl	800df30 <_Bfree>
 800b174:	9805      	ldr	r0, [sp, #20]
 800b176:	4641      	mov	r1, r8
 800b178:	f002 feda 	bl	800df30 <_Bfree>
 800b17c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b17e:	9805      	ldr	r0, [sp, #20]
 800b180:	f002 fed6 	bl	800df30 <_Bfree>
 800b184:	9805      	ldr	r0, [sp, #20]
 800b186:	4621      	mov	r1, r4
 800b188:	f002 fed2 	bl	800df30 <_Bfree>
 800b18c:	e5f9      	b.n	800ad82 <_strtod_l+0x72>
 800b18e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b190:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b194:	4293      	cmp	r3, r2
 800b196:	dbbc      	blt.n	800b112 <_strtod_l+0x402>
 800b198:	4c41      	ldr	r4, [pc, #260]	@ (800b2a0 <_strtod_l+0x590>)
 800b19a:	f1c5 050f 	rsb	r5, r5, #15
 800b19e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b1a2:	4652      	mov	r2, sl
 800b1a4:	465b      	mov	r3, fp
 800b1a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1aa:	f7f5 fa4d 	bl	8000648 <__aeabi_dmul>
 800b1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1b0:	1b5d      	subs	r5, r3, r5
 800b1b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b1b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b1ba:	e78f      	b.n	800b0dc <_strtod_l+0x3cc>
 800b1bc:	3316      	adds	r3, #22
 800b1be:	dba8      	blt.n	800b112 <_strtod_l+0x402>
 800b1c0:	4b37      	ldr	r3, [pc, #220]	@ (800b2a0 <_strtod_l+0x590>)
 800b1c2:	eba9 0808 	sub.w	r8, r9, r8
 800b1c6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b1ca:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b1ce:	4650      	mov	r0, sl
 800b1d0:	4659      	mov	r1, fp
 800b1d2:	f7f5 fb63 	bl	800089c <__aeabi_ddiv>
 800b1d6:	e783      	b.n	800b0e0 <_strtod_l+0x3d0>
 800b1d8:	4b32      	ldr	r3, [pc, #200]	@ (800b2a4 <_strtod_l+0x594>)
 800b1da:	9308      	str	r3, [sp, #32]
 800b1dc:	2300      	movs	r3, #0
 800b1de:	1124      	asrs	r4, r4, #4
 800b1e0:	4650      	mov	r0, sl
 800b1e2:	4659      	mov	r1, fp
 800b1e4:	461e      	mov	r6, r3
 800b1e6:	2c01      	cmp	r4, #1
 800b1e8:	dc21      	bgt.n	800b22e <_strtod_l+0x51e>
 800b1ea:	b10b      	cbz	r3, 800b1f0 <_strtod_l+0x4e0>
 800b1ec:	4682      	mov	sl, r0
 800b1ee:	468b      	mov	fp, r1
 800b1f0:	492c      	ldr	r1, [pc, #176]	@ (800b2a4 <_strtod_l+0x594>)
 800b1f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b1f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b1fa:	4652      	mov	r2, sl
 800b1fc:	465b      	mov	r3, fp
 800b1fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b202:	f7f5 fa21 	bl	8000648 <__aeabi_dmul>
 800b206:	4b28      	ldr	r3, [pc, #160]	@ (800b2a8 <_strtod_l+0x598>)
 800b208:	460a      	mov	r2, r1
 800b20a:	400b      	ands	r3, r1
 800b20c:	4927      	ldr	r1, [pc, #156]	@ (800b2ac <_strtod_l+0x59c>)
 800b20e:	428b      	cmp	r3, r1
 800b210:	4682      	mov	sl, r0
 800b212:	d898      	bhi.n	800b146 <_strtod_l+0x436>
 800b214:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b218:	428b      	cmp	r3, r1
 800b21a:	bf86      	itte	hi
 800b21c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b2b0 <_strtod_l+0x5a0>
 800b220:	f04f 3aff 	movhi.w	sl, #4294967295
 800b224:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b228:	2300      	movs	r3, #0
 800b22a:	9308      	str	r3, [sp, #32]
 800b22c:	e07a      	b.n	800b324 <_strtod_l+0x614>
 800b22e:	07e2      	lsls	r2, r4, #31
 800b230:	d505      	bpl.n	800b23e <_strtod_l+0x52e>
 800b232:	9b08      	ldr	r3, [sp, #32]
 800b234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b238:	f7f5 fa06 	bl	8000648 <__aeabi_dmul>
 800b23c:	2301      	movs	r3, #1
 800b23e:	9a08      	ldr	r2, [sp, #32]
 800b240:	3208      	adds	r2, #8
 800b242:	3601      	adds	r6, #1
 800b244:	1064      	asrs	r4, r4, #1
 800b246:	9208      	str	r2, [sp, #32]
 800b248:	e7cd      	b.n	800b1e6 <_strtod_l+0x4d6>
 800b24a:	d0ed      	beq.n	800b228 <_strtod_l+0x518>
 800b24c:	4264      	negs	r4, r4
 800b24e:	f014 020f 	ands.w	r2, r4, #15
 800b252:	d00a      	beq.n	800b26a <_strtod_l+0x55a>
 800b254:	4b12      	ldr	r3, [pc, #72]	@ (800b2a0 <_strtod_l+0x590>)
 800b256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b25a:	4650      	mov	r0, sl
 800b25c:	4659      	mov	r1, fp
 800b25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b262:	f7f5 fb1b 	bl	800089c <__aeabi_ddiv>
 800b266:	4682      	mov	sl, r0
 800b268:	468b      	mov	fp, r1
 800b26a:	1124      	asrs	r4, r4, #4
 800b26c:	d0dc      	beq.n	800b228 <_strtod_l+0x518>
 800b26e:	2c1f      	cmp	r4, #31
 800b270:	dd20      	ble.n	800b2b4 <_strtod_l+0x5a4>
 800b272:	2400      	movs	r4, #0
 800b274:	46a0      	mov	r8, r4
 800b276:	940a      	str	r4, [sp, #40]	@ 0x28
 800b278:	46a1      	mov	r9, r4
 800b27a:	9a05      	ldr	r2, [sp, #20]
 800b27c:	2322      	movs	r3, #34	@ 0x22
 800b27e:	f04f 0a00 	mov.w	sl, #0
 800b282:	f04f 0b00 	mov.w	fp, #0
 800b286:	6013      	str	r3, [r2, #0]
 800b288:	e768      	b.n	800b15c <_strtod_l+0x44c>
 800b28a:	bf00      	nop
 800b28c:	0800f785 	.word	0x0800f785
 800b290:	0800f724 	.word	0x0800f724
 800b294:	0800f77d 	.word	0x0800f77d
 800b298:	0800f7b7 	.word	0x0800f7b7
 800b29c:	0800fb45 	.word	0x0800fb45
 800b2a0:	0800f930 	.word	0x0800f930
 800b2a4:	0800f908 	.word	0x0800f908
 800b2a8:	7ff00000 	.word	0x7ff00000
 800b2ac:	7ca00000 	.word	0x7ca00000
 800b2b0:	7fefffff 	.word	0x7fefffff
 800b2b4:	f014 0310 	ands.w	r3, r4, #16
 800b2b8:	bf18      	it	ne
 800b2ba:	236a      	movne	r3, #106	@ 0x6a
 800b2bc:	4ea9      	ldr	r6, [pc, #676]	@ (800b564 <_strtod_l+0x854>)
 800b2be:	9308      	str	r3, [sp, #32]
 800b2c0:	4650      	mov	r0, sl
 800b2c2:	4659      	mov	r1, fp
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	07e2      	lsls	r2, r4, #31
 800b2c8:	d504      	bpl.n	800b2d4 <_strtod_l+0x5c4>
 800b2ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b2ce:	f7f5 f9bb 	bl	8000648 <__aeabi_dmul>
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	1064      	asrs	r4, r4, #1
 800b2d6:	f106 0608 	add.w	r6, r6, #8
 800b2da:	d1f4      	bne.n	800b2c6 <_strtod_l+0x5b6>
 800b2dc:	b10b      	cbz	r3, 800b2e2 <_strtod_l+0x5d2>
 800b2de:	4682      	mov	sl, r0
 800b2e0:	468b      	mov	fp, r1
 800b2e2:	9b08      	ldr	r3, [sp, #32]
 800b2e4:	b1b3      	cbz	r3, 800b314 <_strtod_l+0x604>
 800b2e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b2ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	4659      	mov	r1, fp
 800b2f2:	dd0f      	ble.n	800b314 <_strtod_l+0x604>
 800b2f4:	2b1f      	cmp	r3, #31
 800b2f6:	dd55      	ble.n	800b3a4 <_strtod_l+0x694>
 800b2f8:	2b34      	cmp	r3, #52	@ 0x34
 800b2fa:	bfde      	ittt	le
 800b2fc:	f04f 33ff 	movle.w	r3, #4294967295
 800b300:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b304:	4093      	lslle	r3, r2
 800b306:	f04f 0a00 	mov.w	sl, #0
 800b30a:	bfcc      	ite	gt
 800b30c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b310:	ea03 0b01 	andle.w	fp, r3, r1
 800b314:	2200      	movs	r2, #0
 800b316:	2300      	movs	r3, #0
 800b318:	4650      	mov	r0, sl
 800b31a:	4659      	mov	r1, fp
 800b31c:	f7f5 fbfc 	bl	8000b18 <__aeabi_dcmpeq>
 800b320:	2800      	cmp	r0, #0
 800b322:	d1a6      	bne.n	800b272 <_strtod_l+0x562>
 800b324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b32a:	9805      	ldr	r0, [sp, #20]
 800b32c:	462b      	mov	r3, r5
 800b32e:	463a      	mov	r2, r7
 800b330:	f002 fe66 	bl	800e000 <__s2b>
 800b334:	900a      	str	r0, [sp, #40]	@ 0x28
 800b336:	2800      	cmp	r0, #0
 800b338:	f43f af05 	beq.w	800b146 <_strtod_l+0x436>
 800b33c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b33e:	2a00      	cmp	r2, #0
 800b340:	eba9 0308 	sub.w	r3, r9, r8
 800b344:	bfa8      	it	ge
 800b346:	2300      	movge	r3, #0
 800b348:	9312      	str	r3, [sp, #72]	@ 0x48
 800b34a:	2400      	movs	r4, #0
 800b34c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b350:	9316      	str	r3, [sp, #88]	@ 0x58
 800b352:	46a0      	mov	r8, r4
 800b354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b356:	9805      	ldr	r0, [sp, #20]
 800b358:	6859      	ldr	r1, [r3, #4]
 800b35a:	f002 fda9 	bl	800deb0 <_Balloc>
 800b35e:	4681      	mov	r9, r0
 800b360:	2800      	cmp	r0, #0
 800b362:	f43f aef4 	beq.w	800b14e <_strtod_l+0x43e>
 800b366:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b368:	691a      	ldr	r2, [r3, #16]
 800b36a:	3202      	adds	r2, #2
 800b36c:	f103 010c 	add.w	r1, r3, #12
 800b370:	0092      	lsls	r2, r2, #2
 800b372:	300c      	adds	r0, #12
 800b374:	f001 fae3 	bl	800c93e <memcpy>
 800b378:	ec4b ab10 	vmov	d0, sl, fp
 800b37c:	9805      	ldr	r0, [sp, #20]
 800b37e:	aa1c      	add	r2, sp, #112	@ 0x70
 800b380:	a91b      	add	r1, sp, #108	@ 0x6c
 800b382:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b386:	f003 f977 	bl	800e678 <__d2b>
 800b38a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b38c:	2800      	cmp	r0, #0
 800b38e:	f43f aede 	beq.w	800b14e <_strtod_l+0x43e>
 800b392:	9805      	ldr	r0, [sp, #20]
 800b394:	2101      	movs	r1, #1
 800b396:	f002 fec9 	bl	800e12c <__i2b>
 800b39a:	4680      	mov	r8, r0
 800b39c:	b948      	cbnz	r0, 800b3b2 <_strtod_l+0x6a2>
 800b39e:	f04f 0800 	mov.w	r8, #0
 800b3a2:	e6d4      	b.n	800b14e <_strtod_l+0x43e>
 800b3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ac:	ea03 0a0a 	and.w	sl, r3, sl
 800b3b0:	e7b0      	b.n	800b314 <_strtod_l+0x604>
 800b3b2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b3b4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b3b6:	2d00      	cmp	r5, #0
 800b3b8:	bfab      	itete	ge
 800b3ba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b3bc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b3be:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b3c0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b3c2:	bfac      	ite	ge
 800b3c4:	18ef      	addge	r7, r5, r3
 800b3c6:	1b5e      	sublt	r6, r3, r5
 800b3c8:	9b08      	ldr	r3, [sp, #32]
 800b3ca:	1aed      	subs	r5, r5, r3
 800b3cc:	4415      	add	r5, r2
 800b3ce:	4b66      	ldr	r3, [pc, #408]	@ (800b568 <_strtod_l+0x858>)
 800b3d0:	3d01      	subs	r5, #1
 800b3d2:	429d      	cmp	r5, r3
 800b3d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b3d8:	da50      	bge.n	800b47c <_strtod_l+0x76c>
 800b3da:	1b5b      	subs	r3, r3, r5
 800b3dc:	2b1f      	cmp	r3, #31
 800b3de:	eba2 0203 	sub.w	r2, r2, r3
 800b3e2:	f04f 0101 	mov.w	r1, #1
 800b3e6:	dc3d      	bgt.n	800b464 <_strtod_l+0x754>
 800b3e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b3ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b3f2:	18bd      	adds	r5, r7, r2
 800b3f4:	9b08      	ldr	r3, [sp, #32]
 800b3f6:	42af      	cmp	r7, r5
 800b3f8:	4416      	add	r6, r2
 800b3fa:	441e      	add	r6, r3
 800b3fc:	463b      	mov	r3, r7
 800b3fe:	bfa8      	it	ge
 800b400:	462b      	movge	r3, r5
 800b402:	42b3      	cmp	r3, r6
 800b404:	bfa8      	it	ge
 800b406:	4633      	movge	r3, r6
 800b408:	2b00      	cmp	r3, #0
 800b40a:	bfc2      	ittt	gt
 800b40c:	1aed      	subgt	r5, r5, r3
 800b40e:	1af6      	subgt	r6, r6, r3
 800b410:	1aff      	subgt	r7, r7, r3
 800b412:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b414:	2b00      	cmp	r3, #0
 800b416:	dd16      	ble.n	800b446 <_strtod_l+0x736>
 800b418:	4641      	mov	r1, r8
 800b41a:	9805      	ldr	r0, [sp, #20]
 800b41c:	461a      	mov	r2, r3
 800b41e:	f002 ff45 	bl	800e2ac <__pow5mult>
 800b422:	4680      	mov	r8, r0
 800b424:	2800      	cmp	r0, #0
 800b426:	d0ba      	beq.n	800b39e <_strtod_l+0x68e>
 800b428:	4601      	mov	r1, r0
 800b42a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b42c:	9805      	ldr	r0, [sp, #20]
 800b42e:	f002 fe93 	bl	800e158 <__multiply>
 800b432:	900e      	str	r0, [sp, #56]	@ 0x38
 800b434:	2800      	cmp	r0, #0
 800b436:	f43f ae8a 	beq.w	800b14e <_strtod_l+0x43e>
 800b43a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b43c:	9805      	ldr	r0, [sp, #20]
 800b43e:	f002 fd77 	bl	800df30 <_Bfree>
 800b442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b444:	931a      	str	r3, [sp, #104]	@ 0x68
 800b446:	2d00      	cmp	r5, #0
 800b448:	dc1d      	bgt.n	800b486 <_strtod_l+0x776>
 800b44a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	dd23      	ble.n	800b498 <_strtod_l+0x788>
 800b450:	4649      	mov	r1, r9
 800b452:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b454:	9805      	ldr	r0, [sp, #20]
 800b456:	f002 ff29 	bl	800e2ac <__pow5mult>
 800b45a:	4681      	mov	r9, r0
 800b45c:	b9e0      	cbnz	r0, 800b498 <_strtod_l+0x788>
 800b45e:	f04f 0900 	mov.w	r9, #0
 800b462:	e674      	b.n	800b14e <_strtod_l+0x43e>
 800b464:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b468:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b46c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b470:	35e2      	adds	r5, #226	@ 0xe2
 800b472:	fa01 f305 	lsl.w	r3, r1, r5
 800b476:	9310      	str	r3, [sp, #64]	@ 0x40
 800b478:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b47a:	e7ba      	b.n	800b3f2 <_strtod_l+0x6e2>
 800b47c:	2300      	movs	r3, #0
 800b47e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b480:	2301      	movs	r3, #1
 800b482:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b484:	e7b5      	b.n	800b3f2 <_strtod_l+0x6e2>
 800b486:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b488:	9805      	ldr	r0, [sp, #20]
 800b48a:	462a      	mov	r2, r5
 800b48c:	f002 ff68 	bl	800e360 <__lshift>
 800b490:	901a      	str	r0, [sp, #104]	@ 0x68
 800b492:	2800      	cmp	r0, #0
 800b494:	d1d9      	bne.n	800b44a <_strtod_l+0x73a>
 800b496:	e65a      	b.n	800b14e <_strtod_l+0x43e>
 800b498:	2e00      	cmp	r6, #0
 800b49a:	dd07      	ble.n	800b4ac <_strtod_l+0x79c>
 800b49c:	4649      	mov	r1, r9
 800b49e:	9805      	ldr	r0, [sp, #20]
 800b4a0:	4632      	mov	r2, r6
 800b4a2:	f002 ff5d 	bl	800e360 <__lshift>
 800b4a6:	4681      	mov	r9, r0
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	d0d8      	beq.n	800b45e <_strtod_l+0x74e>
 800b4ac:	2f00      	cmp	r7, #0
 800b4ae:	dd08      	ble.n	800b4c2 <_strtod_l+0x7b2>
 800b4b0:	4641      	mov	r1, r8
 800b4b2:	9805      	ldr	r0, [sp, #20]
 800b4b4:	463a      	mov	r2, r7
 800b4b6:	f002 ff53 	bl	800e360 <__lshift>
 800b4ba:	4680      	mov	r8, r0
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	f43f ae46 	beq.w	800b14e <_strtod_l+0x43e>
 800b4c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b4c4:	9805      	ldr	r0, [sp, #20]
 800b4c6:	464a      	mov	r2, r9
 800b4c8:	f002 ffd2 	bl	800e470 <__mdiff>
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	f43f ae3d 	beq.w	800b14e <_strtod_l+0x43e>
 800b4d4:	68c3      	ldr	r3, [r0, #12]
 800b4d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b4d8:	2300      	movs	r3, #0
 800b4da:	60c3      	str	r3, [r0, #12]
 800b4dc:	4641      	mov	r1, r8
 800b4de:	f002 ffab 	bl	800e438 <__mcmp>
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	da46      	bge.n	800b574 <_strtod_l+0x864>
 800b4e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4e8:	ea53 030a 	orrs.w	r3, r3, sl
 800b4ec:	d16c      	bne.n	800b5c8 <_strtod_l+0x8b8>
 800b4ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d168      	bne.n	800b5c8 <_strtod_l+0x8b8>
 800b4f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4fa:	0d1b      	lsrs	r3, r3, #20
 800b4fc:	051b      	lsls	r3, r3, #20
 800b4fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b502:	d961      	bls.n	800b5c8 <_strtod_l+0x8b8>
 800b504:	6963      	ldr	r3, [r4, #20]
 800b506:	b913      	cbnz	r3, 800b50e <_strtod_l+0x7fe>
 800b508:	6923      	ldr	r3, [r4, #16]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	dd5c      	ble.n	800b5c8 <_strtod_l+0x8b8>
 800b50e:	4621      	mov	r1, r4
 800b510:	2201      	movs	r2, #1
 800b512:	9805      	ldr	r0, [sp, #20]
 800b514:	f002 ff24 	bl	800e360 <__lshift>
 800b518:	4641      	mov	r1, r8
 800b51a:	4604      	mov	r4, r0
 800b51c:	f002 ff8c 	bl	800e438 <__mcmp>
 800b520:	2800      	cmp	r0, #0
 800b522:	dd51      	ble.n	800b5c8 <_strtod_l+0x8b8>
 800b524:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b528:	9a08      	ldr	r2, [sp, #32]
 800b52a:	0d1b      	lsrs	r3, r3, #20
 800b52c:	051b      	lsls	r3, r3, #20
 800b52e:	2a00      	cmp	r2, #0
 800b530:	d06b      	beq.n	800b60a <_strtod_l+0x8fa>
 800b532:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b536:	d868      	bhi.n	800b60a <_strtod_l+0x8fa>
 800b538:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b53c:	f67f ae9d 	bls.w	800b27a <_strtod_l+0x56a>
 800b540:	4b0a      	ldr	r3, [pc, #40]	@ (800b56c <_strtod_l+0x85c>)
 800b542:	4650      	mov	r0, sl
 800b544:	4659      	mov	r1, fp
 800b546:	2200      	movs	r2, #0
 800b548:	f7f5 f87e 	bl	8000648 <__aeabi_dmul>
 800b54c:	4b08      	ldr	r3, [pc, #32]	@ (800b570 <_strtod_l+0x860>)
 800b54e:	400b      	ands	r3, r1
 800b550:	4682      	mov	sl, r0
 800b552:	468b      	mov	fp, r1
 800b554:	2b00      	cmp	r3, #0
 800b556:	f47f ae05 	bne.w	800b164 <_strtod_l+0x454>
 800b55a:	9a05      	ldr	r2, [sp, #20]
 800b55c:	2322      	movs	r3, #34	@ 0x22
 800b55e:	6013      	str	r3, [r2, #0]
 800b560:	e600      	b.n	800b164 <_strtod_l+0x454>
 800b562:	bf00      	nop
 800b564:	0800f750 	.word	0x0800f750
 800b568:	fffffc02 	.word	0xfffffc02
 800b56c:	39500000 	.word	0x39500000
 800b570:	7ff00000 	.word	0x7ff00000
 800b574:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b578:	d165      	bne.n	800b646 <_strtod_l+0x936>
 800b57a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b57c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b580:	b35a      	cbz	r2, 800b5da <_strtod_l+0x8ca>
 800b582:	4a9f      	ldr	r2, [pc, #636]	@ (800b800 <_strtod_l+0xaf0>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d12b      	bne.n	800b5e0 <_strtod_l+0x8d0>
 800b588:	9b08      	ldr	r3, [sp, #32]
 800b58a:	4651      	mov	r1, sl
 800b58c:	b303      	cbz	r3, 800b5d0 <_strtod_l+0x8c0>
 800b58e:	4b9d      	ldr	r3, [pc, #628]	@ (800b804 <_strtod_l+0xaf4>)
 800b590:	465a      	mov	r2, fp
 800b592:	4013      	ands	r3, r2
 800b594:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b598:	f04f 32ff 	mov.w	r2, #4294967295
 800b59c:	d81b      	bhi.n	800b5d6 <_strtod_l+0x8c6>
 800b59e:	0d1b      	lsrs	r3, r3, #20
 800b5a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b5a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5a8:	4299      	cmp	r1, r3
 800b5aa:	d119      	bne.n	800b5e0 <_strtod_l+0x8d0>
 800b5ac:	4b96      	ldr	r3, [pc, #600]	@ (800b808 <_strtod_l+0xaf8>)
 800b5ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d102      	bne.n	800b5ba <_strtod_l+0x8aa>
 800b5b4:	3101      	adds	r1, #1
 800b5b6:	f43f adca 	beq.w	800b14e <_strtod_l+0x43e>
 800b5ba:	4b92      	ldr	r3, [pc, #584]	@ (800b804 <_strtod_l+0xaf4>)
 800b5bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5be:	401a      	ands	r2, r3
 800b5c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b5c4:	f04f 0a00 	mov.w	sl, #0
 800b5c8:	9b08      	ldr	r3, [sp, #32]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1b8      	bne.n	800b540 <_strtod_l+0x830>
 800b5ce:	e5c9      	b.n	800b164 <_strtod_l+0x454>
 800b5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b5d4:	e7e8      	b.n	800b5a8 <_strtod_l+0x898>
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	e7e6      	b.n	800b5a8 <_strtod_l+0x898>
 800b5da:	ea53 030a 	orrs.w	r3, r3, sl
 800b5de:	d0a1      	beq.n	800b524 <_strtod_l+0x814>
 800b5e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b5e2:	b1db      	cbz	r3, 800b61c <_strtod_l+0x90c>
 800b5e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5e6:	4213      	tst	r3, r2
 800b5e8:	d0ee      	beq.n	800b5c8 <_strtod_l+0x8b8>
 800b5ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5ec:	9a08      	ldr	r2, [sp, #32]
 800b5ee:	4650      	mov	r0, sl
 800b5f0:	4659      	mov	r1, fp
 800b5f2:	b1bb      	cbz	r3, 800b624 <_strtod_l+0x914>
 800b5f4:	f7ff fb6c 	bl	800acd0 <sulp>
 800b5f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5fc:	ec53 2b10 	vmov	r2, r3, d0
 800b600:	f7f4 fe6c 	bl	80002dc <__adddf3>
 800b604:	4682      	mov	sl, r0
 800b606:	468b      	mov	fp, r1
 800b608:	e7de      	b.n	800b5c8 <_strtod_l+0x8b8>
 800b60a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b60e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b612:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b616:	f04f 3aff 	mov.w	sl, #4294967295
 800b61a:	e7d5      	b.n	800b5c8 <_strtod_l+0x8b8>
 800b61c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b61e:	ea13 0f0a 	tst.w	r3, sl
 800b622:	e7e1      	b.n	800b5e8 <_strtod_l+0x8d8>
 800b624:	f7ff fb54 	bl	800acd0 <sulp>
 800b628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b62c:	ec53 2b10 	vmov	r2, r3, d0
 800b630:	f7f4 fe52 	bl	80002d8 <__aeabi_dsub>
 800b634:	2200      	movs	r2, #0
 800b636:	2300      	movs	r3, #0
 800b638:	4682      	mov	sl, r0
 800b63a:	468b      	mov	fp, r1
 800b63c:	f7f5 fa6c 	bl	8000b18 <__aeabi_dcmpeq>
 800b640:	2800      	cmp	r0, #0
 800b642:	d0c1      	beq.n	800b5c8 <_strtod_l+0x8b8>
 800b644:	e619      	b.n	800b27a <_strtod_l+0x56a>
 800b646:	4641      	mov	r1, r8
 800b648:	4620      	mov	r0, r4
 800b64a:	f003 f86d 	bl	800e728 <__ratio>
 800b64e:	ec57 6b10 	vmov	r6, r7, d0
 800b652:	2200      	movs	r2, #0
 800b654:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b658:	4630      	mov	r0, r6
 800b65a:	4639      	mov	r1, r7
 800b65c:	f7f5 fa70 	bl	8000b40 <__aeabi_dcmple>
 800b660:	2800      	cmp	r0, #0
 800b662:	d06f      	beq.n	800b744 <_strtod_l+0xa34>
 800b664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b666:	2b00      	cmp	r3, #0
 800b668:	d17a      	bne.n	800b760 <_strtod_l+0xa50>
 800b66a:	f1ba 0f00 	cmp.w	sl, #0
 800b66e:	d158      	bne.n	800b722 <_strtod_l+0xa12>
 800b670:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b672:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b676:	2b00      	cmp	r3, #0
 800b678:	d15a      	bne.n	800b730 <_strtod_l+0xa20>
 800b67a:	4b64      	ldr	r3, [pc, #400]	@ (800b80c <_strtod_l+0xafc>)
 800b67c:	2200      	movs	r2, #0
 800b67e:	4630      	mov	r0, r6
 800b680:	4639      	mov	r1, r7
 800b682:	f7f5 fa53 	bl	8000b2c <__aeabi_dcmplt>
 800b686:	2800      	cmp	r0, #0
 800b688:	d159      	bne.n	800b73e <_strtod_l+0xa2e>
 800b68a:	4630      	mov	r0, r6
 800b68c:	4639      	mov	r1, r7
 800b68e:	4b60      	ldr	r3, [pc, #384]	@ (800b810 <_strtod_l+0xb00>)
 800b690:	2200      	movs	r2, #0
 800b692:	f7f4 ffd9 	bl	8000648 <__aeabi_dmul>
 800b696:	4606      	mov	r6, r0
 800b698:	460f      	mov	r7, r1
 800b69a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b69e:	9606      	str	r6, [sp, #24]
 800b6a0:	9307      	str	r3, [sp, #28]
 800b6a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6a6:	4d57      	ldr	r5, [pc, #348]	@ (800b804 <_strtod_l+0xaf4>)
 800b6a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b6ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6ae:	401d      	ands	r5, r3
 800b6b0:	4b58      	ldr	r3, [pc, #352]	@ (800b814 <_strtod_l+0xb04>)
 800b6b2:	429d      	cmp	r5, r3
 800b6b4:	f040 80b2 	bne.w	800b81c <_strtod_l+0xb0c>
 800b6b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b6be:	ec4b ab10 	vmov	d0, sl, fp
 800b6c2:	f002 ff69 	bl	800e598 <__ulp>
 800b6c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6ca:	ec51 0b10 	vmov	r0, r1, d0
 800b6ce:	f7f4 ffbb 	bl	8000648 <__aeabi_dmul>
 800b6d2:	4652      	mov	r2, sl
 800b6d4:	465b      	mov	r3, fp
 800b6d6:	f7f4 fe01 	bl	80002dc <__adddf3>
 800b6da:	460b      	mov	r3, r1
 800b6dc:	4949      	ldr	r1, [pc, #292]	@ (800b804 <_strtod_l+0xaf4>)
 800b6de:	4a4e      	ldr	r2, [pc, #312]	@ (800b818 <_strtod_l+0xb08>)
 800b6e0:	4019      	ands	r1, r3
 800b6e2:	4291      	cmp	r1, r2
 800b6e4:	4682      	mov	sl, r0
 800b6e6:	d942      	bls.n	800b76e <_strtod_l+0xa5e>
 800b6e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b6ea:	4b47      	ldr	r3, [pc, #284]	@ (800b808 <_strtod_l+0xaf8>)
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d103      	bne.n	800b6f8 <_strtod_l+0x9e8>
 800b6f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	f43f ad2b 	beq.w	800b14e <_strtod_l+0x43e>
 800b6f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b808 <_strtod_l+0xaf8>
 800b6fc:	f04f 3aff 	mov.w	sl, #4294967295
 800b700:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b702:	9805      	ldr	r0, [sp, #20]
 800b704:	f002 fc14 	bl	800df30 <_Bfree>
 800b708:	9805      	ldr	r0, [sp, #20]
 800b70a:	4649      	mov	r1, r9
 800b70c:	f002 fc10 	bl	800df30 <_Bfree>
 800b710:	9805      	ldr	r0, [sp, #20]
 800b712:	4641      	mov	r1, r8
 800b714:	f002 fc0c 	bl	800df30 <_Bfree>
 800b718:	9805      	ldr	r0, [sp, #20]
 800b71a:	4621      	mov	r1, r4
 800b71c:	f002 fc08 	bl	800df30 <_Bfree>
 800b720:	e618      	b.n	800b354 <_strtod_l+0x644>
 800b722:	f1ba 0f01 	cmp.w	sl, #1
 800b726:	d103      	bne.n	800b730 <_strtod_l+0xa20>
 800b728:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f43f ada5 	beq.w	800b27a <_strtod_l+0x56a>
 800b730:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b7e0 <_strtod_l+0xad0>
 800b734:	4f35      	ldr	r7, [pc, #212]	@ (800b80c <_strtod_l+0xafc>)
 800b736:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b73a:	2600      	movs	r6, #0
 800b73c:	e7b1      	b.n	800b6a2 <_strtod_l+0x992>
 800b73e:	4f34      	ldr	r7, [pc, #208]	@ (800b810 <_strtod_l+0xb00>)
 800b740:	2600      	movs	r6, #0
 800b742:	e7aa      	b.n	800b69a <_strtod_l+0x98a>
 800b744:	4b32      	ldr	r3, [pc, #200]	@ (800b810 <_strtod_l+0xb00>)
 800b746:	4630      	mov	r0, r6
 800b748:	4639      	mov	r1, r7
 800b74a:	2200      	movs	r2, #0
 800b74c:	f7f4 ff7c 	bl	8000648 <__aeabi_dmul>
 800b750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b752:	4606      	mov	r6, r0
 800b754:	460f      	mov	r7, r1
 800b756:	2b00      	cmp	r3, #0
 800b758:	d09f      	beq.n	800b69a <_strtod_l+0x98a>
 800b75a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b75e:	e7a0      	b.n	800b6a2 <_strtod_l+0x992>
 800b760:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b7e8 <_strtod_l+0xad8>
 800b764:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b768:	ec57 6b17 	vmov	r6, r7, d7
 800b76c:	e799      	b.n	800b6a2 <_strtod_l+0x992>
 800b76e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b772:	9b08      	ldr	r3, [sp, #32]
 800b774:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1c1      	bne.n	800b700 <_strtod_l+0x9f0>
 800b77c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b780:	0d1b      	lsrs	r3, r3, #20
 800b782:	051b      	lsls	r3, r3, #20
 800b784:	429d      	cmp	r5, r3
 800b786:	d1bb      	bne.n	800b700 <_strtod_l+0x9f0>
 800b788:	4630      	mov	r0, r6
 800b78a:	4639      	mov	r1, r7
 800b78c:	f7f5 fabc 	bl	8000d08 <__aeabi_d2lz>
 800b790:	f7f4 ff2c 	bl	80005ec <__aeabi_l2d>
 800b794:	4602      	mov	r2, r0
 800b796:	460b      	mov	r3, r1
 800b798:	4630      	mov	r0, r6
 800b79a:	4639      	mov	r1, r7
 800b79c:	f7f4 fd9c 	bl	80002d8 <__aeabi_dsub>
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b7a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b7ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7ae:	ea46 060a 	orr.w	r6, r6, sl
 800b7b2:	431e      	orrs	r6, r3
 800b7b4:	d06f      	beq.n	800b896 <_strtod_l+0xb86>
 800b7b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b7f0 <_strtod_l+0xae0>)
 800b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7bc:	f7f5 f9b6 	bl	8000b2c <__aeabi_dcmplt>
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	f47f accf 	bne.w	800b164 <_strtod_l+0x454>
 800b7c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b7f8 <_strtod_l+0xae8>)
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7d0:	f7f5 f9ca 	bl	8000b68 <__aeabi_dcmpgt>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d093      	beq.n	800b700 <_strtod_l+0x9f0>
 800b7d8:	e4c4      	b.n	800b164 <_strtod_l+0x454>
 800b7da:	bf00      	nop
 800b7dc:	f3af 8000 	nop.w
 800b7e0:	00000000 	.word	0x00000000
 800b7e4:	bff00000 	.word	0xbff00000
 800b7e8:	00000000 	.word	0x00000000
 800b7ec:	3ff00000 	.word	0x3ff00000
 800b7f0:	94a03595 	.word	0x94a03595
 800b7f4:	3fdfffff 	.word	0x3fdfffff
 800b7f8:	35afe535 	.word	0x35afe535
 800b7fc:	3fe00000 	.word	0x3fe00000
 800b800:	000fffff 	.word	0x000fffff
 800b804:	7ff00000 	.word	0x7ff00000
 800b808:	7fefffff 	.word	0x7fefffff
 800b80c:	3ff00000 	.word	0x3ff00000
 800b810:	3fe00000 	.word	0x3fe00000
 800b814:	7fe00000 	.word	0x7fe00000
 800b818:	7c9fffff 	.word	0x7c9fffff
 800b81c:	9b08      	ldr	r3, [sp, #32]
 800b81e:	b323      	cbz	r3, 800b86a <_strtod_l+0xb5a>
 800b820:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b824:	d821      	bhi.n	800b86a <_strtod_l+0xb5a>
 800b826:	a328      	add	r3, pc, #160	@ (adr r3, 800b8c8 <_strtod_l+0xbb8>)
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	4630      	mov	r0, r6
 800b82e:	4639      	mov	r1, r7
 800b830:	f7f5 f986 	bl	8000b40 <__aeabi_dcmple>
 800b834:	b1a0      	cbz	r0, 800b860 <_strtod_l+0xb50>
 800b836:	4639      	mov	r1, r7
 800b838:	4630      	mov	r0, r6
 800b83a:	f7f5 f9dd 	bl	8000bf8 <__aeabi_d2uiz>
 800b83e:	2801      	cmp	r0, #1
 800b840:	bf38      	it	cc
 800b842:	2001      	movcc	r0, #1
 800b844:	f7f4 fe86 	bl	8000554 <__aeabi_ui2d>
 800b848:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b84a:	4606      	mov	r6, r0
 800b84c:	460f      	mov	r7, r1
 800b84e:	b9fb      	cbnz	r3, 800b890 <_strtod_l+0xb80>
 800b850:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b854:	9014      	str	r0, [sp, #80]	@ 0x50
 800b856:	9315      	str	r3, [sp, #84]	@ 0x54
 800b858:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b85c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b860:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b862:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b866:	1b5b      	subs	r3, r3, r5
 800b868:	9311      	str	r3, [sp, #68]	@ 0x44
 800b86a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b86e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b872:	f002 fe91 	bl	800e598 <__ulp>
 800b876:	4650      	mov	r0, sl
 800b878:	ec53 2b10 	vmov	r2, r3, d0
 800b87c:	4659      	mov	r1, fp
 800b87e:	f7f4 fee3 	bl	8000648 <__aeabi_dmul>
 800b882:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b886:	f7f4 fd29 	bl	80002dc <__adddf3>
 800b88a:	4682      	mov	sl, r0
 800b88c:	468b      	mov	fp, r1
 800b88e:	e770      	b.n	800b772 <_strtod_l+0xa62>
 800b890:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b894:	e7e0      	b.n	800b858 <_strtod_l+0xb48>
 800b896:	a30e      	add	r3, pc, #56	@ (adr r3, 800b8d0 <_strtod_l+0xbc0>)
 800b898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89c:	f7f5 f946 	bl	8000b2c <__aeabi_dcmplt>
 800b8a0:	e798      	b.n	800b7d4 <_strtod_l+0xac4>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b8a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8aa:	6013      	str	r3, [r2, #0]
 800b8ac:	f7ff ba6d 	b.w	800ad8a <_strtod_l+0x7a>
 800b8b0:	2a65      	cmp	r2, #101	@ 0x65
 800b8b2:	f43f ab66 	beq.w	800af82 <_strtod_l+0x272>
 800b8b6:	2a45      	cmp	r2, #69	@ 0x45
 800b8b8:	f43f ab63 	beq.w	800af82 <_strtod_l+0x272>
 800b8bc:	2301      	movs	r3, #1
 800b8be:	f7ff bb9e 	b.w	800affe <_strtod_l+0x2ee>
 800b8c2:	bf00      	nop
 800b8c4:	f3af 8000 	nop.w
 800b8c8:	ffc00000 	.word	0xffc00000
 800b8cc:	41dfffff 	.word	0x41dfffff
 800b8d0:	94a03595 	.word	0x94a03595
 800b8d4:	3fcfffff 	.word	0x3fcfffff

0800b8d8 <strtof>:
 800b8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8dc:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800b99c <strtof+0xc4>
 800b8e0:	4b29      	ldr	r3, [pc, #164]	@ (800b988 <strtof+0xb0>)
 800b8e2:	460a      	mov	r2, r1
 800b8e4:	ed2d 8b02 	vpush	{d8}
 800b8e8:	4601      	mov	r1, r0
 800b8ea:	f8d8 0000 	ldr.w	r0, [r8]
 800b8ee:	f7ff fa0f 	bl	800ad10 <_strtod_l>
 800b8f2:	ec55 4b10 	vmov	r4, r5, d0
 800b8f6:	4622      	mov	r2, r4
 800b8f8:	462b      	mov	r3, r5
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	4629      	mov	r1, r5
 800b8fe:	f7f5 f93d 	bl	8000b7c <__aeabi_dcmpun>
 800b902:	b190      	cbz	r0, 800b92a <strtof+0x52>
 800b904:	2d00      	cmp	r5, #0
 800b906:	4821      	ldr	r0, [pc, #132]	@ (800b98c <strtof+0xb4>)
 800b908:	da09      	bge.n	800b91e <strtof+0x46>
 800b90a:	f001 f831 	bl	800c970 <nanf>
 800b90e:	eeb1 8a40 	vneg.f32	s16, s0
 800b912:	eeb0 0a48 	vmov.f32	s0, s16
 800b916:	ecbd 8b02 	vpop	{d8}
 800b91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b91e:	ecbd 8b02 	vpop	{d8}
 800b922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b926:	f001 b823 	b.w	800c970 <nanf>
 800b92a:	4620      	mov	r0, r4
 800b92c:	4629      	mov	r1, r5
 800b92e:	f7f5 f983 	bl	8000c38 <__aeabi_d2f>
 800b932:	ee08 0a10 	vmov	s16, r0
 800b936:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800b990 <strtof+0xb8>
 800b93a:	eeb0 7ac8 	vabs.f32	s14, s16
 800b93e:	eeb4 7a67 	vcmp.f32	s14, s15
 800b942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b946:	dd11      	ble.n	800b96c <strtof+0x94>
 800b948:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800b94c:	4b11      	ldr	r3, [pc, #68]	@ (800b994 <strtof+0xbc>)
 800b94e:	f04f 32ff 	mov.w	r2, #4294967295
 800b952:	4620      	mov	r0, r4
 800b954:	4639      	mov	r1, r7
 800b956:	f7f5 f911 	bl	8000b7c <__aeabi_dcmpun>
 800b95a:	b980      	cbnz	r0, 800b97e <strtof+0xa6>
 800b95c:	4b0d      	ldr	r3, [pc, #52]	@ (800b994 <strtof+0xbc>)
 800b95e:	f04f 32ff 	mov.w	r2, #4294967295
 800b962:	4620      	mov	r0, r4
 800b964:	4639      	mov	r1, r7
 800b966:	f7f5 f8eb 	bl	8000b40 <__aeabi_dcmple>
 800b96a:	b940      	cbnz	r0, 800b97e <strtof+0xa6>
 800b96c:	ee18 3a10 	vmov	r3, s16
 800b970:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b974:	d1cd      	bne.n	800b912 <strtof+0x3a>
 800b976:	4b08      	ldr	r3, [pc, #32]	@ (800b998 <strtof+0xc0>)
 800b978:	402b      	ands	r3, r5
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d0c9      	beq.n	800b912 <strtof+0x3a>
 800b97e:	f8d8 3000 	ldr.w	r3, [r8]
 800b982:	2222      	movs	r2, #34	@ 0x22
 800b984:	601a      	str	r2, [r3, #0]
 800b986:	e7c4      	b.n	800b912 <strtof+0x3a>
 800b988:	20000034 	.word	0x20000034
 800b98c:	0800fb45 	.word	0x0800fb45
 800b990:	7f7fffff 	.word	0x7f7fffff
 800b994:	7fefffff 	.word	0x7fefffff
 800b998:	7ff00000 	.word	0x7ff00000
 800b99c:	200001a0 	.word	0x200001a0

0800b9a0 <__cvt>:
 800b9a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9a4:	ec57 6b10 	vmov	r6, r7, d0
 800b9a8:	2f00      	cmp	r7, #0
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	463b      	mov	r3, r7
 800b9b0:	bfbb      	ittet	lt
 800b9b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b9b6:	461f      	movlt	r7, r3
 800b9b8:	2300      	movge	r3, #0
 800b9ba:	232d      	movlt	r3, #45	@ 0x2d
 800b9bc:	700b      	strb	r3, [r1, #0]
 800b9be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b9c4:	4691      	mov	r9, r2
 800b9c6:	f023 0820 	bic.w	r8, r3, #32
 800b9ca:	bfbc      	itt	lt
 800b9cc:	4632      	movlt	r2, r6
 800b9ce:	4616      	movlt	r6, r2
 800b9d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b9d4:	d005      	beq.n	800b9e2 <__cvt+0x42>
 800b9d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b9da:	d100      	bne.n	800b9de <__cvt+0x3e>
 800b9dc:	3401      	adds	r4, #1
 800b9de:	2102      	movs	r1, #2
 800b9e0:	e000      	b.n	800b9e4 <__cvt+0x44>
 800b9e2:	2103      	movs	r1, #3
 800b9e4:	ab03      	add	r3, sp, #12
 800b9e6:	9301      	str	r3, [sp, #4]
 800b9e8:	ab02      	add	r3, sp, #8
 800b9ea:	9300      	str	r3, [sp, #0]
 800b9ec:	ec47 6b10 	vmov	d0, r6, r7
 800b9f0:	4653      	mov	r3, sl
 800b9f2:	4622      	mov	r2, r4
 800b9f4:	f001 f84c 	bl	800ca90 <_dtoa_r>
 800b9f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b9fc:	4605      	mov	r5, r0
 800b9fe:	d119      	bne.n	800ba34 <__cvt+0x94>
 800ba00:	f019 0f01 	tst.w	r9, #1
 800ba04:	d00e      	beq.n	800ba24 <__cvt+0x84>
 800ba06:	eb00 0904 	add.w	r9, r0, r4
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	4630      	mov	r0, r6
 800ba10:	4639      	mov	r1, r7
 800ba12:	f7f5 f881 	bl	8000b18 <__aeabi_dcmpeq>
 800ba16:	b108      	cbz	r0, 800ba1c <__cvt+0x7c>
 800ba18:	f8cd 900c 	str.w	r9, [sp, #12]
 800ba1c:	2230      	movs	r2, #48	@ 0x30
 800ba1e:	9b03      	ldr	r3, [sp, #12]
 800ba20:	454b      	cmp	r3, r9
 800ba22:	d31e      	bcc.n	800ba62 <__cvt+0xc2>
 800ba24:	9b03      	ldr	r3, [sp, #12]
 800ba26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba28:	1b5b      	subs	r3, r3, r5
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	6013      	str	r3, [r2, #0]
 800ba2e:	b004      	add	sp, #16
 800ba30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ba38:	eb00 0904 	add.w	r9, r0, r4
 800ba3c:	d1e5      	bne.n	800ba0a <__cvt+0x6a>
 800ba3e:	7803      	ldrb	r3, [r0, #0]
 800ba40:	2b30      	cmp	r3, #48	@ 0x30
 800ba42:	d10a      	bne.n	800ba5a <__cvt+0xba>
 800ba44:	2200      	movs	r2, #0
 800ba46:	2300      	movs	r3, #0
 800ba48:	4630      	mov	r0, r6
 800ba4a:	4639      	mov	r1, r7
 800ba4c:	f7f5 f864 	bl	8000b18 <__aeabi_dcmpeq>
 800ba50:	b918      	cbnz	r0, 800ba5a <__cvt+0xba>
 800ba52:	f1c4 0401 	rsb	r4, r4, #1
 800ba56:	f8ca 4000 	str.w	r4, [sl]
 800ba5a:	f8da 3000 	ldr.w	r3, [sl]
 800ba5e:	4499      	add	r9, r3
 800ba60:	e7d3      	b.n	800ba0a <__cvt+0x6a>
 800ba62:	1c59      	adds	r1, r3, #1
 800ba64:	9103      	str	r1, [sp, #12]
 800ba66:	701a      	strb	r2, [r3, #0]
 800ba68:	e7d9      	b.n	800ba1e <__cvt+0x7e>

0800ba6a <__exponent>:
 800ba6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba6c:	2900      	cmp	r1, #0
 800ba6e:	bfba      	itte	lt
 800ba70:	4249      	neglt	r1, r1
 800ba72:	232d      	movlt	r3, #45	@ 0x2d
 800ba74:	232b      	movge	r3, #43	@ 0x2b
 800ba76:	2909      	cmp	r1, #9
 800ba78:	7002      	strb	r2, [r0, #0]
 800ba7a:	7043      	strb	r3, [r0, #1]
 800ba7c:	dd29      	ble.n	800bad2 <__exponent+0x68>
 800ba7e:	f10d 0307 	add.w	r3, sp, #7
 800ba82:	461d      	mov	r5, r3
 800ba84:	270a      	movs	r7, #10
 800ba86:	461a      	mov	r2, r3
 800ba88:	fbb1 f6f7 	udiv	r6, r1, r7
 800ba8c:	fb07 1416 	mls	r4, r7, r6, r1
 800ba90:	3430      	adds	r4, #48	@ 0x30
 800ba92:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ba96:	460c      	mov	r4, r1
 800ba98:	2c63      	cmp	r4, #99	@ 0x63
 800ba9a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba9e:	4631      	mov	r1, r6
 800baa0:	dcf1      	bgt.n	800ba86 <__exponent+0x1c>
 800baa2:	3130      	adds	r1, #48	@ 0x30
 800baa4:	1e94      	subs	r4, r2, #2
 800baa6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800baaa:	1c41      	adds	r1, r0, #1
 800baac:	4623      	mov	r3, r4
 800baae:	42ab      	cmp	r3, r5
 800bab0:	d30a      	bcc.n	800bac8 <__exponent+0x5e>
 800bab2:	f10d 0309 	add.w	r3, sp, #9
 800bab6:	1a9b      	subs	r3, r3, r2
 800bab8:	42ac      	cmp	r4, r5
 800baba:	bf88      	it	hi
 800babc:	2300      	movhi	r3, #0
 800babe:	3302      	adds	r3, #2
 800bac0:	4403      	add	r3, r0
 800bac2:	1a18      	subs	r0, r3, r0
 800bac4:	b003      	add	sp, #12
 800bac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bac8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bacc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bad0:	e7ed      	b.n	800baae <__exponent+0x44>
 800bad2:	2330      	movs	r3, #48	@ 0x30
 800bad4:	3130      	adds	r1, #48	@ 0x30
 800bad6:	7083      	strb	r3, [r0, #2]
 800bad8:	70c1      	strb	r1, [r0, #3]
 800bada:	1d03      	adds	r3, r0, #4
 800badc:	e7f1      	b.n	800bac2 <__exponent+0x58>
	...

0800bae0 <_printf_float>:
 800bae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae4:	b08d      	sub	sp, #52	@ 0x34
 800bae6:	460c      	mov	r4, r1
 800bae8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800baec:	4616      	mov	r6, r2
 800baee:	461f      	mov	r7, r3
 800baf0:	4605      	mov	r5, r0
 800baf2:	f000 fead 	bl	800c850 <_localeconv_r>
 800baf6:	6803      	ldr	r3, [r0, #0]
 800baf8:	9304      	str	r3, [sp, #16]
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7f4 fbe0 	bl	80002c0 <strlen>
 800bb00:	2300      	movs	r3, #0
 800bb02:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb04:	f8d8 3000 	ldr.w	r3, [r8]
 800bb08:	9005      	str	r0, [sp, #20]
 800bb0a:	3307      	adds	r3, #7
 800bb0c:	f023 0307 	bic.w	r3, r3, #7
 800bb10:	f103 0208 	add.w	r2, r3, #8
 800bb14:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bb18:	f8d4 b000 	ldr.w	fp, [r4]
 800bb1c:	f8c8 2000 	str.w	r2, [r8]
 800bb20:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb24:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bb28:	9307      	str	r3, [sp, #28]
 800bb2a:	f8cd 8018 	str.w	r8, [sp, #24]
 800bb2e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bb32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb36:	4b9c      	ldr	r3, [pc, #624]	@ (800bda8 <_printf_float+0x2c8>)
 800bb38:	f04f 32ff 	mov.w	r2, #4294967295
 800bb3c:	f7f5 f81e 	bl	8000b7c <__aeabi_dcmpun>
 800bb40:	bb70      	cbnz	r0, 800bba0 <_printf_float+0xc0>
 800bb42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb46:	4b98      	ldr	r3, [pc, #608]	@ (800bda8 <_printf_float+0x2c8>)
 800bb48:	f04f 32ff 	mov.w	r2, #4294967295
 800bb4c:	f7f4 fff8 	bl	8000b40 <__aeabi_dcmple>
 800bb50:	bb30      	cbnz	r0, 800bba0 <_printf_float+0xc0>
 800bb52:	2200      	movs	r2, #0
 800bb54:	2300      	movs	r3, #0
 800bb56:	4640      	mov	r0, r8
 800bb58:	4649      	mov	r1, r9
 800bb5a:	f7f4 ffe7 	bl	8000b2c <__aeabi_dcmplt>
 800bb5e:	b110      	cbz	r0, 800bb66 <_printf_float+0x86>
 800bb60:	232d      	movs	r3, #45	@ 0x2d
 800bb62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb66:	4a91      	ldr	r2, [pc, #580]	@ (800bdac <_printf_float+0x2cc>)
 800bb68:	4b91      	ldr	r3, [pc, #580]	@ (800bdb0 <_printf_float+0x2d0>)
 800bb6a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bb6e:	bf94      	ite	ls
 800bb70:	4690      	movls	r8, r2
 800bb72:	4698      	movhi	r8, r3
 800bb74:	2303      	movs	r3, #3
 800bb76:	6123      	str	r3, [r4, #16]
 800bb78:	f02b 0304 	bic.w	r3, fp, #4
 800bb7c:	6023      	str	r3, [r4, #0]
 800bb7e:	f04f 0900 	mov.w	r9, #0
 800bb82:	9700      	str	r7, [sp, #0]
 800bb84:	4633      	mov	r3, r6
 800bb86:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bb88:	4621      	mov	r1, r4
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	f000 f9d2 	bl	800bf34 <_printf_common>
 800bb90:	3001      	adds	r0, #1
 800bb92:	f040 808d 	bne.w	800bcb0 <_printf_float+0x1d0>
 800bb96:	f04f 30ff 	mov.w	r0, #4294967295
 800bb9a:	b00d      	add	sp, #52	@ 0x34
 800bb9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba0:	4642      	mov	r2, r8
 800bba2:	464b      	mov	r3, r9
 800bba4:	4640      	mov	r0, r8
 800bba6:	4649      	mov	r1, r9
 800bba8:	f7f4 ffe8 	bl	8000b7c <__aeabi_dcmpun>
 800bbac:	b140      	cbz	r0, 800bbc0 <_printf_float+0xe0>
 800bbae:	464b      	mov	r3, r9
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	bfbc      	itt	lt
 800bbb4:	232d      	movlt	r3, #45	@ 0x2d
 800bbb6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bbba:	4a7e      	ldr	r2, [pc, #504]	@ (800bdb4 <_printf_float+0x2d4>)
 800bbbc:	4b7e      	ldr	r3, [pc, #504]	@ (800bdb8 <_printf_float+0x2d8>)
 800bbbe:	e7d4      	b.n	800bb6a <_printf_float+0x8a>
 800bbc0:	6863      	ldr	r3, [r4, #4]
 800bbc2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bbc6:	9206      	str	r2, [sp, #24]
 800bbc8:	1c5a      	adds	r2, r3, #1
 800bbca:	d13b      	bne.n	800bc44 <_printf_float+0x164>
 800bbcc:	2306      	movs	r3, #6
 800bbce:	6063      	str	r3, [r4, #4]
 800bbd0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	6022      	str	r2, [r4, #0]
 800bbd8:	9303      	str	r3, [sp, #12]
 800bbda:	ab0a      	add	r3, sp, #40	@ 0x28
 800bbdc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bbe0:	ab09      	add	r3, sp, #36	@ 0x24
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	6861      	ldr	r1, [r4, #4]
 800bbe6:	ec49 8b10 	vmov	d0, r8, r9
 800bbea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bbee:	4628      	mov	r0, r5
 800bbf0:	f7ff fed6 	bl	800b9a0 <__cvt>
 800bbf4:	9b06      	ldr	r3, [sp, #24]
 800bbf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbf8:	2b47      	cmp	r3, #71	@ 0x47
 800bbfa:	4680      	mov	r8, r0
 800bbfc:	d129      	bne.n	800bc52 <_printf_float+0x172>
 800bbfe:	1cc8      	adds	r0, r1, #3
 800bc00:	db02      	blt.n	800bc08 <_printf_float+0x128>
 800bc02:	6863      	ldr	r3, [r4, #4]
 800bc04:	4299      	cmp	r1, r3
 800bc06:	dd41      	ble.n	800bc8c <_printf_float+0x1ac>
 800bc08:	f1aa 0a02 	sub.w	sl, sl, #2
 800bc0c:	fa5f fa8a 	uxtb.w	sl, sl
 800bc10:	3901      	subs	r1, #1
 800bc12:	4652      	mov	r2, sl
 800bc14:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bc18:	9109      	str	r1, [sp, #36]	@ 0x24
 800bc1a:	f7ff ff26 	bl	800ba6a <__exponent>
 800bc1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc20:	1813      	adds	r3, r2, r0
 800bc22:	2a01      	cmp	r2, #1
 800bc24:	4681      	mov	r9, r0
 800bc26:	6123      	str	r3, [r4, #16]
 800bc28:	dc02      	bgt.n	800bc30 <_printf_float+0x150>
 800bc2a:	6822      	ldr	r2, [r4, #0]
 800bc2c:	07d2      	lsls	r2, r2, #31
 800bc2e:	d501      	bpl.n	800bc34 <_printf_float+0x154>
 800bc30:	3301      	adds	r3, #1
 800bc32:	6123      	str	r3, [r4, #16]
 800bc34:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d0a2      	beq.n	800bb82 <_printf_float+0xa2>
 800bc3c:	232d      	movs	r3, #45	@ 0x2d
 800bc3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc42:	e79e      	b.n	800bb82 <_printf_float+0xa2>
 800bc44:	9a06      	ldr	r2, [sp, #24]
 800bc46:	2a47      	cmp	r2, #71	@ 0x47
 800bc48:	d1c2      	bne.n	800bbd0 <_printf_float+0xf0>
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d1c0      	bne.n	800bbd0 <_printf_float+0xf0>
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e7bd      	b.n	800bbce <_printf_float+0xee>
 800bc52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc56:	d9db      	bls.n	800bc10 <_printf_float+0x130>
 800bc58:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bc5c:	d118      	bne.n	800bc90 <_printf_float+0x1b0>
 800bc5e:	2900      	cmp	r1, #0
 800bc60:	6863      	ldr	r3, [r4, #4]
 800bc62:	dd0b      	ble.n	800bc7c <_printf_float+0x19c>
 800bc64:	6121      	str	r1, [r4, #16]
 800bc66:	b913      	cbnz	r3, 800bc6e <_printf_float+0x18e>
 800bc68:	6822      	ldr	r2, [r4, #0]
 800bc6a:	07d0      	lsls	r0, r2, #31
 800bc6c:	d502      	bpl.n	800bc74 <_printf_float+0x194>
 800bc6e:	3301      	adds	r3, #1
 800bc70:	440b      	add	r3, r1
 800bc72:	6123      	str	r3, [r4, #16]
 800bc74:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bc76:	f04f 0900 	mov.w	r9, #0
 800bc7a:	e7db      	b.n	800bc34 <_printf_float+0x154>
 800bc7c:	b913      	cbnz	r3, 800bc84 <_printf_float+0x1a4>
 800bc7e:	6822      	ldr	r2, [r4, #0]
 800bc80:	07d2      	lsls	r2, r2, #31
 800bc82:	d501      	bpl.n	800bc88 <_printf_float+0x1a8>
 800bc84:	3302      	adds	r3, #2
 800bc86:	e7f4      	b.n	800bc72 <_printf_float+0x192>
 800bc88:	2301      	movs	r3, #1
 800bc8a:	e7f2      	b.n	800bc72 <_printf_float+0x192>
 800bc8c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bc90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc92:	4299      	cmp	r1, r3
 800bc94:	db05      	blt.n	800bca2 <_printf_float+0x1c2>
 800bc96:	6823      	ldr	r3, [r4, #0]
 800bc98:	6121      	str	r1, [r4, #16]
 800bc9a:	07d8      	lsls	r0, r3, #31
 800bc9c:	d5ea      	bpl.n	800bc74 <_printf_float+0x194>
 800bc9e:	1c4b      	adds	r3, r1, #1
 800bca0:	e7e7      	b.n	800bc72 <_printf_float+0x192>
 800bca2:	2900      	cmp	r1, #0
 800bca4:	bfd4      	ite	le
 800bca6:	f1c1 0202 	rsble	r2, r1, #2
 800bcaa:	2201      	movgt	r2, #1
 800bcac:	4413      	add	r3, r2
 800bcae:	e7e0      	b.n	800bc72 <_printf_float+0x192>
 800bcb0:	6823      	ldr	r3, [r4, #0]
 800bcb2:	055a      	lsls	r2, r3, #21
 800bcb4:	d407      	bmi.n	800bcc6 <_printf_float+0x1e6>
 800bcb6:	6923      	ldr	r3, [r4, #16]
 800bcb8:	4642      	mov	r2, r8
 800bcba:	4631      	mov	r1, r6
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	47b8      	blx	r7
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	d12b      	bne.n	800bd1c <_printf_float+0x23c>
 800bcc4:	e767      	b.n	800bb96 <_printf_float+0xb6>
 800bcc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bcca:	f240 80dd 	bls.w	800be88 <_printf_float+0x3a8>
 800bcce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	f7f4 ff1f 	bl	8000b18 <__aeabi_dcmpeq>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d033      	beq.n	800bd46 <_printf_float+0x266>
 800bcde:	4a37      	ldr	r2, [pc, #220]	@ (800bdbc <_printf_float+0x2dc>)
 800bce0:	2301      	movs	r3, #1
 800bce2:	4631      	mov	r1, r6
 800bce4:	4628      	mov	r0, r5
 800bce6:	47b8      	blx	r7
 800bce8:	3001      	adds	r0, #1
 800bcea:	f43f af54 	beq.w	800bb96 <_printf_float+0xb6>
 800bcee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bcf2:	4543      	cmp	r3, r8
 800bcf4:	db02      	blt.n	800bcfc <_printf_float+0x21c>
 800bcf6:	6823      	ldr	r3, [r4, #0]
 800bcf8:	07d8      	lsls	r0, r3, #31
 800bcfa:	d50f      	bpl.n	800bd1c <_printf_float+0x23c>
 800bcfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd00:	4631      	mov	r1, r6
 800bd02:	4628      	mov	r0, r5
 800bd04:	47b8      	blx	r7
 800bd06:	3001      	adds	r0, #1
 800bd08:	f43f af45 	beq.w	800bb96 <_printf_float+0xb6>
 800bd0c:	f04f 0900 	mov.w	r9, #0
 800bd10:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd14:	f104 0a1a 	add.w	sl, r4, #26
 800bd18:	45c8      	cmp	r8, r9
 800bd1a:	dc09      	bgt.n	800bd30 <_printf_float+0x250>
 800bd1c:	6823      	ldr	r3, [r4, #0]
 800bd1e:	079b      	lsls	r3, r3, #30
 800bd20:	f100 8103 	bmi.w	800bf2a <_printf_float+0x44a>
 800bd24:	68e0      	ldr	r0, [r4, #12]
 800bd26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd28:	4298      	cmp	r0, r3
 800bd2a:	bfb8      	it	lt
 800bd2c:	4618      	movlt	r0, r3
 800bd2e:	e734      	b.n	800bb9a <_printf_float+0xba>
 800bd30:	2301      	movs	r3, #1
 800bd32:	4652      	mov	r2, sl
 800bd34:	4631      	mov	r1, r6
 800bd36:	4628      	mov	r0, r5
 800bd38:	47b8      	blx	r7
 800bd3a:	3001      	adds	r0, #1
 800bd3c:	f43f af2b 	beq.w	800bb96 <_printf_float+0xb6>
 800bd40:	f109 0901 	add.w	r9, r9, #1
 800bd44:	e7e8      	b.n	800bd18 <_printf_float+0x238>
 800bd46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	dc39      	bgt.n	800bdc0 <_printf_float+0x2e0>
 800bd4c:	4a1b      	ldr	r2, [pc, #108]	@ (800bdbc <_printf_float+0x2dc>)
 800bd4e:	2301      	movs	r3, #1
 800bd50:	4631      	mov	r1, r6
 800bd52:	4628      	mov	r0, r5
 800bd54:	47b8      	blx	r7
 800bd56:	3001      	adds	r0, #1
 800bd58:	f43f af1d 	beq.w	800bb96 <_printf_float+0xb6>
 800bd5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bd60:	ea59 0303 	orrs.w	r3, r9, r3
 800bd64:	d102      	bne.n	800bd6c <_printf_float+0x28c>
 800bd66:	6823      	ldr	r3, [r4, #0]
 800bd68:	07d9      	lsls	r1, r3, #31
 800bd6a:	d5d7      	bpl.n	800bd1c <_printf_float+0x23c>
 800bd6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd70:	4631      	mov	r1, r6
 800bd72:	4628      	mov	r0, r5
 800bd74:	47b8      	blx	r7
 800bd76:	3001      	adds	r0, #1
 800bd78:	f43f af0d 	beq.w	800bb96 <_printf_float+0xb6>
 800bd7c:	f04f 0a00 	mov.w	sl, #0
 800bd80:	f104 0b1a 	add.w	fp, r4, #26
 800bd84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd86:	425b      	negs	r3, r3
 800bd88:	4553      	cmp	r3, sl
 800bd8a:	dc01      	bgt.n	800bd90 <_printf_float+0x2b0>
 800bd8c:	464b      	mov	r3, r9
 800bd8e:	e793      	b.n	800bcb8 <_printf_float+0x1d8>
 800bd90:	2301      	movs	r3, #1
 800bd92:	465a      	mov	r2, fp
 800bd94:	4631      	mov	r1, r6
 800bd96:	4628      	mov	r0, r5
 800bd98:	47b8      	blx	r7
 800bd9a:	3001      	adds	r0, #1
 800bd9c:	f43f aefb 	beq.w	800bb96 <_printf_float+0xb6>
 800bda0:	f10a 0a01 	add.w	sl, sl, #1
 800bda4:	e7ee      	b.n	800bd84 <_printf_float+0x2a4>
 800bda6:	bf00      	nop
 800bda8:	7fefffff 	.word	0x7fefffff
 800bdac:	0800f778 	.word	0x0800f778
 800bdb0:	0800f77c 	.word	0x0800f77c
 800bdb4:	0800f780 	.word	0x0800f780
 800bdb8:	0800f784 	.word	0x0800f784
 800bdbc:	0800f788 	.word	0x0800f788
 800bdc0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bdc2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bdc6:	4553      	cmp	r3, sl
 800bdc8:	bfa8      	it	ge
 800bdca:	4653      	movge	r3, sl
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	4699      	mov	r9, r3
 800bdd0:	dc36      	bgt.n	800be40 <_printf_float+0x360>
 800bdd2:	f04f 0b00 	mov.w	fp, #0
 800bdd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bdda:	f104 021a 	add.w	r2, r4, #26
 800bdde:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bde0:	9306      	str	r3, [sp, #24]
 800bde2:	eba3 0309 	sub.w	r3, r3, r9
 800bde6:	455b      	cmp	r3, fp
 800bde8:	dc31      	bgt.n	800be4e <_printf_float+0x36e>
 800bdea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdec:	459a      	cmp	sl, r3
 800bdee:	dc3a      	bgt.n	800be66 <_printf_float+0x386>
 800bdf0:	6823      	ldr	r3, [r4, #0]
 800bdf2:	07da      	lsls	r2, r3, #31
 800bdf4:	d437      	bmi.n	800be66 <_printf_float+0x386>
 800bdf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdf8:	ebaa 0903 	sub.w	r9, sl, r3
 800bdfc:	9b06      	ldr	r3, [sp, #24]
 800bdfe:	ebaa 0303 	sub.w	r3, sl, r3
 800be02:	4599      	cmp	r9, r3
 800be04:	bfa8      	it	ge
 800be06:	4699      	movge	r9, r3
 800be08:	f1b9 0f00 	cmp.w	r9, #0
 800be0c:	dc33      	bgt.n	800be76 <_printf_float+0x396>
 800be0e:	f04f 0800 	mov.w	r8, #0
 800be12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be16:	f104 0b1a 	add.w	fp, r4, #26
 800be1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be1c:	ebaa 0303 	sub.w	r3, sl, r3
 800be20:	eba3 0309 	sub.w	r3, r3, r9
 800be24:	4543      	cmp	r3, r8
 800be26:	f77f af79 	ble.w	800bd1c <_printf_float+0x23c>
 800be2a:	2301      	movs	r3, #1
 800be2c:	465a      	mov	r2, fp
 800be2e:	4631      	mov	r1, r6
 800be30:	4628      	mov	r0, r5
 800be32:	47b8      	blx	r7
 800be34:	3001      	adds	r0, #1
 800be36:	f43f aeae 	beq.w	800bb96 <_printf_float+0xb6>
 800be3a:	f108 0801 	add.w	r8, r8, #1
 800be3e:	e7ec      	b.n	800be1a <_printf_float+0x33a>
 800be40:	4642      	mov	r2, r8
 800be42:	4631      	mov	r1, r6
 800be44:	4628      	mov	r0, r5
 800be46:	47b8      	blx	r7
 800be48:	3001      	adds	r0, #1
 800be4a:	d1c2      	bne.n	800bdd2 <_printf_float+0x2f2>
 800be4c:	e6a3      	b.n	800bb96 <_printf_float+0xb6>
 800be4e:	2301      	movs	r3, #1
 800be50:	4631      	mov	r1, r6
 800be52:	4628      	mov	r0, r5
 800be54:	9206      	str	r2, [sp, #24]
 800be56:	47b8      	blx	r7
 800be58:	3001      	adds	r0, #1
 800be5a:	f43f ae9c 	beq.w	800bb96 <_printf_float+0xb6>
 800be5e:	9a06      	ldr	r2, [sp, #24]
 800be60:	f10b 0b01 	add.w	fp, fp, #1
 800be64:	e7bb      	b.n	800bdde <_printf_float+0x2fe>
 800be66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be6a:	4631      	mov	r1, r6
 800be6c:	4628      	mov	r0, r5
 800be6e:	47b8      	blx	r7
 800be70:	3001      	adds	r0, #1
 800be72:	d1c0      	bne.n	800bdf6 <_printf_float+0x316>
 800be74:	e68f      	b.n	800bb96 <_printf_float+0xb6>
 800be76:	9a06      	ldr	r2, [sp, #24]
 800be78:	464b      	mov	r3, r9
 800be7a:	4442      	add	r2, r8
 800be7c:	4631      	mov	r1, r6
 800be7e:	4628      	mov	r0, r5
 800be80:	47b8      	blx	r7
 800be82:	3001      	adds	r0, #1
 800be84:	d1c3      	bne.n	800be0e <_printf_float+0x32e>
 800be86:	e686      	b.n	800bb96 <_printf_float+0xb6>
 800be88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800be8c:	f1ba 0f01 	cmp.w	sl, #1
 800be90:	dc01      	bgt.n	800be96 <_printf_float+0x3b6>
 800be92:	07db      	lsls	r3, r3, #31
 800be94:	d536      	bpl.n	800bf04 <_printf_float+0x424>
 800be96:	2301      	movs	r3, #1
 800be98:	4642      	mov	r2, r8
 800be9a:	4631      	mov	r1, r6
 800be9c:	4628      	mov	r0, r5
 800be9e:	47b8      	blx	r7
 800bea0:	3001      	adds	r0, #1
 800bea2:	f43f ae78 	beq.w	800bb96 <_printf_float+0xb6>
 800bea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800beaa:	4631      	mov	r1, r6
 800beac:	4628      	mov	r0, r5
 800beae:	47b8      	blx	r7
 800beb0:	3001      	adds	r0, #1
 800beb2:	f43f ae70 	beq.w	800bb96 <_printf_float+0xb6>
 800beb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800beba:	2200      	movs	r2, #0
 800bebc:	2300      	movs	r3, #0
 800bebe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bec2:	f7f4 fe29 	bl	8000b18 <__aeabi_dcmpeq>
 800bec6:	b9c0      	cbnz	r0, 800befa <_printf_float+0x41a>
 800bec8:	4653      	mov	r3, sl
 800beca:	f108 0201 	add.w	r2, r8, #1
 800bece:	4631      	mov	r1, r6
 800bed0:	4628      	mov	r0, r5
 800bed2:	47b8      	blx	r7
 800bed4:	3001      	adds	r0, #1
 800bed6:	d10c      	bne.n	800bef2 <_printf_float+0x412>
 800bed8:	e65d      	b.n	800bb96 <_printf_float+0xb6>
 800beda:	2301      	movs	r3, #1
 800bedc:	465a      	mov	r2, fp
 800bede:	4631      	mov	r1, r6
 800bee0:	4628      	mov	r0, r5
 800bee2:	47b8      	blx	r7
 800bee4:	3001      	adds	r0, #1
 800bee6:	f43f ae56 	beq.w	800bb96 <_printf_float+0xb6>
 800beea:	f108 0801 	add.w	r8, r8, #1
 800beee:	45d0      	cmp	r8, sl
 800bef0:	dbf3      	blt.n	800beda <_printf_float+0x3fa>
 800bef2:	464b      	mov	r3, r9
 800bef4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bef8:	e6df      	b.n	800bcba <_printf_float+0x1da>
 800befa:	f04f 0800 	mov.w	r8, #0
 800befe:	f104 0b1a 	add.w	fp, r4, #26
 800bf02:	e7f4      	b.n	800beee <_printf_float+0x40e>
 800bf04:	2301      	movs	r3, #1
 800bf06:	4642      	mov	r2, r8
 800bf08:	e7e1      	b.n	800bece <_printf_float+0x3ee>
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	464a      	mov	r2, r9
 800bf0e:	4631      	mov	r1, r6
 800bf10:	4628      	mov	r0, r5
 800bf12:	47b8      	blx	r7
 800bf14:	3001      	adds	r0, #1
 800bf16:	f43f ae3e 	beq.w	800bb96 <_printf_float+0xb6>
 800bf1a:	f108 0801 	add.w	r8, r8, #1
 800bf1e:	68e3      	ldr	r3, [r4, #12]
 800bf20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf22:	1a5b      	subs	r3, r3, r1
 800bf24:	4543      	cmp	r3, r8
 800bf26:	dcf0      	bgt.n	800bf0a <_printf_float+0x42a>
 800bf28:	e6fc      	b.n	800bd24 <_printf_float+0x244>
 800bf2a:	f04f 0800 	mov.w	r8, #0
 800bf2e:	f104 0919 	add.w	r9, r4, #25
 800bf32:	e7f4      	b.n	800bf1e <_printf_float+0x43e>

0800bf34 <_printf_common>:
 800bf34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf38:	4616      	mov	r6, r2
 800bf3a:	4698      	mov	r8, r3
 800bf3c:	688a      	ldr	r2, [r1, #8]
 800bf3e:	690b      	ldr	r3, [r1, #16]
 800bf40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf44:	4293      	cmp	r3, r2
 800bf46:	bfb8      	it	lt
 800bf48:	4613      	movlt	r3, r2
 800bf4a:	6033      	str	r3, [r6, #0]
 800bf4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf50:	4607      	mov	r7, r0
 800bf52:	460c      	mov	r4, r1
 800bf54:	b10a      	cbz	r2, 800bf5a <_printf_common+0x26>
 800bf56:	3301      	adds	r3, #1
 800bf58:	6033      	str	r3, [r6, #0]
 800bf5a:	6823      	ldr	r3, [r4, #0]
 800bf5c:	0699      	lsls	r1, r3, #26
 800bf5e:	bf42      	ittt	mi
 800bf60:	6833      	ldrmi	r3, [r6, #0]
 800bf62:	3302      	addmi	r3, #2
 800bf64:	6033      	strmi	r3, [r6, #0]
 800bf66:	6825      	ldr	r5, [r4, #0]
 800bf68:	f015 0506 	ands.w	r5, r5, #6
 800bf6c:	d106      	bne.n	800bf7c <_printf_common+0x48>
 800bf6e:	f104 0a19 	add.w	sl, r4, #25
 800bf72:	68e3      	ldr	r3, [r4, #12]
 800bf74:	6832      	ldr	r2, [r6, #0]
 800bf76:	1a9b      	subs	r3, r3, r2
 800bf78:	42ab      	cmp	r3, r5
 800bf7a:	dc26      	bgt.n	800bfca <_printf_common+0x96>
 800bf7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf80:	6822      	ldr	r2, [r4, #0]
 800bf82:	3b00      	subs	r3, #0
 800bf84:	bf18      	it	ne
 800bf86:	2301      	movne	r3, #1
 800bf88:	0692      	lsls	r2, r2, #26
 800bf8a:	d42b      	bmi.n	800bfe4 <_printf_common+0xb0>
 800bf8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf90:	4641      	mov	r1, r8
 800bf92:	4638      	mov	r0, r7
 800bf94:	47c8      	blx	r9
 800bf96:	3001      	adds	r0, #1
 800bf98:	d01e      	beq.n	800bfd8 <_printf_common+0xa4>
 800bf9a:	6823      	ldr	r3, [r4, #0]
 800bf9c:	6922      	ldr	r2, [r4, #16]
 800bf9e:	f003 0306 	and.w	r3, r3, #6
 800bfa2:	2b04      	cmp	r3, #4
 800bfa4:	bf02      	ittt	eq
 800bfa6:	68e5      	ldreq	r5, [r4, #12]
 800bfa8:	6833      	ldreq	r3, [r6, #0]
 800bfaa:	1aed      	subeq	r5, r5, r3
 800bfac:	68a3      	ldr	r3, [r4, #8]
 800bfae:	bf0c      	ite	eq
 800bfb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bfb4:	2500      	movne	r5, #0
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	bfc4      	itt	gt
 800bfba:	1a9b      	subgt	r3, r3, r2
 800bfbc:	18ed      	addgt	r5, r5, r3
 800bfbe:	2600      	movs	r6, #0
 800bfc0:	341a      	adds	r4, #26
 800bfc2:	42b5      	cmp	r5, r6
 800bfc4:	d11a      	bne.n	800bffc <_printf_common+0xc8>
 800bfc6:	2000      	movs	r0, #0
 800bfc8:	e008      	b.n	800bfdc <_printf_common+0xa8>
 800bfca:	2301      	movs	r3, #1
 800bfcc:	4652      	mov	r2, sl
 800bfce:	4641      	mov	r1, r8
 800bfd0:	4638      	mov	r0, r7
 800bfd2:	47c8      	blx	r9
 800bfd4:	3001      	adds	r0, #1
 800bfd6:	d103      	bne.n	800bfe0 <_printf_common+0xac>
 800bfd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfe0:	3501      	adds	r5, #1
 800bfe2:	e7c6      	b.n	800bf72 <_printf_common+0x3e>
 800bfe4:	18e1      	adds	r1, r4, r3
 800bfe6:	1c5a      	adds	r2, r3, #1
 800bfe8:	2030      	movs	r0, #48	@ 0x30
 800bfea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bfee:	4422      	add	r2, r4
 800bff0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bff4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bff8:	3302      	adds	r3, #2
 800bffa:	e7c7      	b.n	800bf8c <_printf_common+0x58>
 800bffc:	2301      	movs	r3, #1
 800bffe:	4622      	mov	r2, r4
 800c000:	4641      	mov	r1, r8
 800c002:	4638      	mov	r0, r7
 800c004:	47c8      	blx	r9
 800c006:	3001      	adds	r0, #1
 800c008:	d0e6      	beq.n	800bfd8 <_printf_common+0xa4>
 800c00a:	3601      	adds	r6, #1
 800c00c:	e7d9      	b.n	800bfc2 <_printf_common+0x8e>
	...

0800c010 <_printf_i>:
 800c010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c014:	7e0f      	ldrb	r7, [r1, #24]
 800c016:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c018:	2f78      	cmp	r7, #120	@ 0x78
 800c01a:	4691      	mov	r9, r2
 800c01c:	4680      	mov	r8, r0
 800c01e:	460c      	mov	r4, r1
 800c020:	469a      	mov	sl, r3
 800c022:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c026:	d807      	bhi.n	800c038 <_printf_i+0x28>
 800c028:	2f62      	cmp	r7, #98	@ 0x62
 800c02a:	d80a      	bhi.n	800c042 <_printf_i+0x32>
 800c02c:	2f00      	cmp	r7, #0
 800c02e:	f000 80d2 	beq.w	800c1d6 <_printf_i+0x1c6>
 800c032:	2f58      	cmp	r7, #88	@ 0x58
 800c034:	f000 80b9 	beq.w	800c1aa <_printf_i+0x19a>
 800c038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c03c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c040:	e03a      	b.n	800c0b8 <_printf_i+0xa8>
 800c042:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c046:	2b15      	cmp	r3, #21
 800c048:	d8f6      	bhi.n	800c038 <_printf_i+0x28>
 800c04a:	a101      	add	r1, pc, #4	@ (adr r1, 800c050 <_printf_i+0x40>)
 800c04c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c050:	0800c0a9 	.word	0x0800c0a9
 800c054:	0800c0bd 	.word	0x0800c0bd
 800c058:	0800c039 	.word	0x0800c039
 800c05c:	0800c039 	.word	0x0800c039
 800c060:	0800c039 	.word	0x0800c039
 800c064:	0800c039 	.word	0x0800c039
 800c068:	0800c0bd 	.word	0x0800c0bd
 800c06c:	0800c039 	.word	0x0800c039
 800c070:	0800c039 	.word	0x0800c039
 800c074:	0800c039 	.word	0x0800c039
 800c078:	0800c039 	.word	0x0800c039
 800c07c:	0800c1bd 	.word	0x0800c1bd
 800c080:	0800c0e7 	.word	0x0800c0e7
 800c084:	0800c177 	.word	0x0800c177
 800c088:	0800c039 	.word	0x0800c039
 800c08c:	0800c039 	.word	0x0800c039
 800c090:	0800c1df 	.word	0x0800c1df
 800c094:	0800c039 	.word	0x0800c039
 800c098:	0800c0e7 	.word	0x0800c0e7
 800c09c:	0800c039 	.word	0x0800c039
 800c0a0:	0800c039 	.word	0x0800c039
 800c0a4:	0800c17f 	.word	0x0800c17f
 800c0a8:	6833      	ldr	r3, [r6, #0]
 800c0aa:	1d1a      	adds	r2, r3, #4
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	6032      	str	r2, [r6, #0]
 800c0b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c0b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	e09d      	b.n	800c1f8 <_printf_i+0x1e8>
 800c0bc:	6833      	ldr	r3, [r6, #0]
 800c0be:	6820      	ldr	r0, [r4, #0]
 800c0c0:	1d19      	adds	r1, r3, #4
 800c0c2:	6031      	str	r1, [r6, #0]
 800c0c4:	0606      	lsls	r6, r0, #24
 800c0c6:	d501      	bpl.n	800c0cc <_printf_i+0xbc>
 800c0c8:	681d      	ldr	r5, [r3, #0]
 800c0ca:	e003      	b.n	800c0d4 <_printf_i+0xc4>
 800c0cc:	0645      	lsls	r5, r0, #25
 800c0ce:	d5fb      	bpl.n	800c0c8 <_printf_i+0xb8>
 800c0d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c0d4:	2d00      	cmp	r5, #0
 800c0d6:	da03      	bge.n	800c0e0 <_printf_i+0xd0>
 800c0d8:	232d      	movs	r3, #45	@ 0x2d
 800c0da:	426d      	negs	r5, r5
 800c0dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0e0:	4859      	ldr	r0, [pc, #356]	@ (800c248 <_printf_i+0x238>)
 800c0e2:	230a      	movs	r3, #10
 800c0e4:	e011      	b.n	800c10a <_printf_i+0xfa>
 800c0e6:	6821      	ldr	r1, [r4, #0]
 800c0e8:	6833      	ldr	r3, [r6, #0]
 800c0ea:	0608      	lsls	r0, r1, #24
 800c0ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800c0f0:	d402      	bmi.n	800c0f8 <_printf_i+0xe8>
 800c0f2:	0649      	lsls	r1, r1, #25
 800c0f4:	bf48      	it	mi
 800c0f6:	b2ad      	uxthmi	r5, r5
 800c0f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800c0fa:	4853      	ldr	r0, [pc, #332]	@ (800c248 <_printf_i+0x238>)
 800c0fc:	6033      	str	r3, [r6, #0]
 800c0fe:	bf14      	ite	ne
 800c100:	230a      	movne	r3, #10
 800c102:	2308      	moveq	r3, #8
 800c104:	2100      	movs	r1, #0
 800c106:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c10a:	6866      	ldr	r6, [r4, #4]
 800c10c:	60a6      	str	r6, [r4, #8]
 800c10e:	2e00      	cmp	r6, #0
 800c110:	bfa2      	ittt	ge
 800c112:	6821      	ldrge	r1, [r4, #0]
 800c114:	f021 0104 	bicge.w	r1, r1, #4
 800c118:	6021      	strge	r1, [r4, #0]
 800c11a:	b90d      	cbnz	r5, 800c120 <_printf_i+0x110>
 800c11c:	2e00      	cmp	r6, #0
 800c11e:	d04b      	beq.n	800c1b8 <_printf_i+0x1a8>
 800c120:	4616      	mov	r6, r2
 800c122:	fbb5 f1f3 	udiv	r1, r5, r3
 800c126:	fb03 5711 	mls	r7, r3, r1, r5
 800c12a:	5dc7      	ldrb	r7, [r0, r7]
 800c12c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c130:	462f      	mov	r7, r5
 800c132:	42bb      	cmp	r3, r7
 800c134:	460d      	mov	r5, r1
 800c136:	d9f4      	bls.n	800c122 <_printf_i+0x112>
 800c138:	2b08      	cmp	r3, #8
 800c13a:	d10b      	bne.n	800c154 <_printf_i+0x144>
 800c13c:	6823      	ldr	r3, [r4, #0]
 800c13e:	07df      	lsls	r7, r3, #31
 800c140:	d508      	bpl.n	800c154 <_printf_i+0x144>
 800c142:	6923      	ldr	r3, [r4, #16]
 800c144:	6861      	ldr	r1, [r4, #4]
 800c146:	4299      	cmp	r1, r3
 800c148:	bfde      	ittt	le
 800c14a:	2330      	movle	r3, #48	@ 0x30
 800c14c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c150:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c154:	1b92      	subs	r2, r2, r6
 800c156:	6122      	str	r2, [r4, #16]
 800c158:	f8cd a000 	str.w	sl, [sp]
 800c15c:	464b      	mov	r3, r9
 800c15e:	aa03      	add	r2, sp, #12
 800c160:	4621      	mov	r1, r4
 800c162:	4640      	mov	r0, r8
 800c164:	f7ff fee6 	bl	800bf34 <_printf_common>
 800c168:	3001      	adds	r0, #1
 800c16a:	d14a      	bne.n	800c202 <_printf_i+0x1f2>
 800c16c:	f04f 30ff 	mov.w	r0, #4294967295
 800c170:	b004      	add	sp, #16
 800c172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c176:	6823      	ldr	r3, [r4, #0]
 800c178:	f043 0320 	orr.w	r3, r3, #32
 800c17c:	6023      	str	r3, [r4, #0]
 800c17e:	4833      	ldr	r0, [pc, #204]	@ (800c24c <_printf_i+0x23c>)
 800c180:	2778      	movs	r7, #120	@ 0x78
 800c182:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c186:	6823      	ldr	r3, [r4, #0]
 800c188:	6831      	ldr	r1, [r6, #0]
 800c18a:	061f      	lsls	r7, r3, #24
 800c18c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c190:	d402      	bmi.n	800c198 <_printf_i+0x188>
 800c192:	065f      	lsls	r7, r3, #25
 800c194:	bf48      	it	mi
 800c196:	b2ad      	uxthmi	r5, r5
 800c198:	6031      	str	r1, [r6, #0]
 800c19a:	07d9      	lsls	r1, r3, #31
 800c19c:	bf44      	itt	mi
 800c19e:	f043 0320 	orrmi.w	r3, r3, #32
 800c1a2:	6023      	strmi	r3, [r4, #0]
 800c1a4:	b11d      	cbz	r5, 800c1ae <_printf_i+0x19e>
 800c1a6:	2310      	movs	r3, #16
 800c1a8:	e7ac      	b.n	800c104 <_printf_i+0xf4>
 800c1aa:	4827      	ldr	r0, [pc, #156]	@ (800c248 <_printf_i+0x238>)
 800c1ac:	e7e9      	b.n	800c182 <_printf_i+0x172>
 800c1ae:	6823      	ldr	r3, [r4, #0]
 800c1b0:	f023 0320 	bic.w	r3, r3, #32
 800c1b4:	6023      	str	r3, [r4, #0]
 800c1b6:	e7f6      	b.n	800c1a6 <_printf_i+0x196>
 800c1b8:	4616      	mov	r6, r2
 800c1ba:	e7bd      	b.n	800c138 <_printf_i+0x128>
 800c1bc:	6833      	ldr	r3, [r6, #0]
 800c1be:	6825      	ldr	r5, [r4, #0]
 800c1c0:	6961      	ldr	r1, [r4, #20]
 800c1c2:	1d18      	adds	r0, r3, #4
 800c1c4:	6030      	str	r0, [r6, #0]
 800c1c6:	062e      	lsls	r6, r5, #24
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	d501      	bpl.n	800c1d0 <_printf_i+0x1c0>
 800c1cc:	6019      	str	r1, [r3, #0]
 800c1ce:	e002      	b.n	800c1d6 <_printf_i+0x1c6>
 800c1d0:	0668      	lsls	r0, r5, #25
 800c1d2:	d5fb      	bpl.n	800c1cc <_printf_i+0x1bc>
 800c1d4:	8019      	strh	r1, [r3, #0]
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	6123      	str	r3, [r4, #16]
 800c1da:	4616      	mov	r6, r2
 800c1dc:	e7bc      	b.n	800c158 <_printf_i+0x148>
 800c1de:	6833      	ldr	r3, [r6, #0]
 800c1e0:	1d1a      	adds	r2, r3, #4
 800c1e2:	6032      	str	r2, [r6, #0]
 800c1e4:	681e      	ldr	r6, [r3, #0]
 800c1e6:	6862      	ldr	r2, [r4, #4]
 800c1e8:	2100      	movs	r1, #0
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	f7f4 f818 	bl	8000220 <memchr>
 800c1f0:	b108      	cbz	r0, 800c1f6 <_printf_i+0x1e6>
 800c1f2:	1b80      	subs	r0, r0, r6
 800c1f4:	6060      	str	r0, [r4, #4]
 800c1f6:	6863      	ldr	r3, [r4, #4]
 800c1f8:	6123      	str	r3, [r4, #16]
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c200:	e7aa      	b.n	800c158 <_printf_i+0x148>
 800c202:	6923      	ldr	r3, [r4, #16]
 800c204:	4632      	mov	r2, r6
 800c206:	4649      	mov	r1, r9
 800c208:	4640      	mov	r0, r8
 800c20a:	47d0      	blx	sl
 800c20c:	3001      	adds	r0, #1
 800c20e:	d0ad      	beq.n	800c16c <_printf_i+0x15c>
 800c210:	6823      	ldr	r3, [r4, #0]
 800c212:	079b      	lsls	r3, r3, #30
 800c214:	d413      	bmi.n	800c23e <_printf_i+0x22e>
 800c216:	68e0      	ldr	r0, [r4, #12]
 800c218:	9b03      	ldr	r3, [sp, #12]
 800c21a:	4298      	cmp	r0, r3
 800c21c:	bfb8      	it	lt
 800c21e:	4618      	movlt	r0, r3
 800c220:	e7a6      	b.n	800c170 <_printf_i+0x160>
 800c222:	2301      	movs	r3, #1
 800c224:	4632      	mov	r2, r6
 800c226:	4649      	mov	r1, r9
 800c228:	4640      	mov	r0, r8
 800c22a:	47d0      	blx	sl
 800c22c:	3001      	adds	r0, #1
 800c22e:	d09d      	beq.n	800c16c <_printf_i+0x15c>
 800c230:	3501      	adds	r5, #1
 800c232:	68e3      	ldr	r3, [r4, #12]
 800c234:	9903      	ldr	r1, [sp, #12]
 800c236:	1a5b      	subs	r3, r3, r1
 800c238:	42ab      	cmp	r3, r5
 800c23a:	dcf2      	bgt.n	800c222 <_printf_i+0x212>
 800c23c:	e7eb      	b.n	800c216 <_printf_i+0x206>
 800c23e:	2500      	movs	r5, #0
 800c240:	f104 0619 	add.w	r6, r4, #25
 800c244:	e7f5      	b.n	800c232 <_printf_i+0x222>
 800c246:	bf00      	nop
 800c248:	0800f78a 	.word	0x0800f78a
 800c24c:	0800f79b 	.word	0x0800f79b

0800c250 <std>:
 800c250:	2300      	movs	r3, #0
 800c252:	b510      	push	{r4, lr}
 800c254:	4604      	mov	r4, r0
 800c256:	e9c0 3300 	strd	r3, r3, [r0]
 800c25a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c25e:	6083      	str	r3, [r0, #8]
 800c260:	8181      	strh	r1, [r0, #12]
 800c262:	6643      	str	r3, [r0, #100]	@ 0x64
 800c264:	81c2      	strh	r2, [r0, #14]
 800c266:	6183      	str	r3, [r0, #24]
 800c268:	4619      	mov	r1, r3
 800c26a:	2208      	movs	r2, #8
 800c26c:	305c      	adds	r0, #92	@ 0x5c
 800c26e:	f000 fad5 	bl	800c81c <memset>
 800c272:	4b0d      	ldr	r3, [pc, #52]	@ (800c2a8 <std+0x58>)
 800c274:	6263      	str	r3, [r4, #36]	@ 0x24
 800c276:	4b0d      	ldr	r3, [pc, #52]	@ (800c2ac <std+0x5c>)
 800c278:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c27a:	4b0d      	ldr	r3, [pc, #52]	@ (800c2b0 <std+0x60>)
 800c27c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c27e:	4b0d      	ldr	r3, [pc, #52]	@ (800c2b4 <std+0x64>)
 800c280:	6323      	str	r3, [r4, #48]	@ 0x30
 800c282:	4b0d      	ldr	r3, [pc, #52]	@ (800c2b8 <std+0x68>)
 800c284:	6224      	str	r4, [r4, #32]
 800c286:	429c      	cmp	r4, r3
 800c288:	d006      	beq.n	800c298 <std+0x48>
 800c28a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c28e:	4294      	cmp	r4, r2
 800c290:	d002      	beq.n	800c298 <std+0x48>
 800c292:	33d0      	adds	r3, #208	@ 0xd0
 800c294:	429c      	cmp	r4, r3
 800c296:	d105      	bne.n	800c2a4 <std+0x54>
 800c298:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c29c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2a0:	f000 bb4a 	b.w	800c938 <__retarget_lock_init_recursive>
 800c2a4:	bd10      	pop	{r4, pc}
 800c2a6:	bf00      	nop
 800c2a8:	0800c66d 	.word	0x0800c66d
 800c2ac:	0800c68f 	.word	0x0800c68f
 800c2b0:	0800c6c7 	.word	0x0800c6c7
 800c2b4:	0800c6eb 	.word	0x0800c6eb
 800c2b8:	20002c18 	.word	0x20002c18

0800c2bc <stdio_exit_handler>:
 800c2bc:	4a02      	ldr	r2, [pc, #8]	@ (800c2c8 <stdio_exit_handler+0xc>)
 800c2be:	4903      	ldr	r1, [pc, #12]	@ (800c2cc <stdio_exit_handler+0x10>)
 800c2c0:	4803      	ldr	r0, [pc, #12]	@ (800c2d0 <stdio_exit_handler+0x14>)
 800c2c2:	f000 b869 	b.w	800c398 <_fwalk_sglue>
 800c2c6:	bf00      	nop
 800c2c8:	20000028 	.word	0x20000028
 800c2cc:	0800ee69 	.word	0x0800ee69
 800c2d0:	200001a4 	.word	0x200001a4

0800c2d4 <cleanup_stdio>:
 800c2d4:	6841      	ldr	r1, [r0, #4]
 800c2d6:	4b0c      	ldr	r3, [pc, #48]	@ (800c308 <cleanup_stdio+0x34>)
 800c2d8:	4299      	cmp	r1, r3
 800c2da:	b510      	push	{r4, lr}
 800c2dc:	4604      	mov	r4, r0
 800c2de:	d001      	beq.n	800c2e4 <cleanup_stdio+0x10>
 800c2e0:	f002 fdc2 	bl	800ee68 <_fflush_r>
 800c2e4:	68a1      	ldr	r1, [r4, #8]
 800c2e6:	4b09      	ldr	r3, [pc, #36]	@ (800c30c <cleanup_stdio+0x38>)
 800c2e8:	4299      	cmp	r1, r3
 800c2ea:	d002      	beq.n	800c2f2 <cleanup_stdio+0x1e>
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	f002 fdbb 	bl	800ee68 <_fflush_r>
 800c2f2:	68e1      	ldr	r1, [r4, #12]
 800c2f4:	4b06      	ldr	r3, [pc, #24]	@ (800c310 <cleanup_stdio+0x3c>)
 800c2f6:	4299      	cmp	r1, r3
 800c2f8:	d004      	beq.n	800c304 <cleanup_stdio+0x30>
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c300:	f002 bdb2 	b.w	800ee68 <_fflush_r>
 800c304:	bd10      	pop	{r4, pc}
 800c306:	bf00      	nop
 800c308:	20002c18 	.word	0x20002c18
 800c30c:	20002c80 	.word	0x20002c80
 800c310:	20002ce8 	.word	0x20002ce8

0800c314 <global_stdio_init.part.0>:
 800c314:	b510      	push	{r4, lr}
 800c316:	4b0b      	ldr	r3, [pc, #44]	@ (800c344 <global_stdio_init.part.0+0x30>)
 800c318:	4c0b      	ldr	r4, [pc, #44]	@ (800c348 <global_stdio_init.part.0+0x34>)
 800c31a:	4a0c      	ldr	r2, [pc, #48]	@ (800c34c <global_stdio_init.part.0+0x38>)
 800c31c:	601a      	str	r2, [r3, #0]
 800c31e:	4620      	mov	r0, r4
 800c320:	2200      	movs	r2, #0
 800c322:	2104      	movs	r1, #4
 800c324:	f7ff ff94 	bl	800c250 <std>
 800c328:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c32c:	2201      	movs	r2, #1
 800c32e:	2109      	movs	r1, #9
 800c330:	f7ff ff8e 	bl	800c250 <std>
 800c334:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c338:	2202      	movs	r2, #2
 800c33a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c33e:	2112      	movs	r1, #18
 800c340:	f7ff bf86 	b.w	800c250 <std>
 800c344:	20002d50 	.word	0x20002d50
 800c348:	20002c18 	.word	0x20002c18
 800c34c:	0800c2bd 	.word	0x0800c2bd

0800c350 <__sfp_lock_acquire>:
 800c350:	4801      	ldr	r0, [pc, #4]	@ (800c358 <__sfp_lock_acquire+0x8>)
 800c352:	f000 baf2 	b.w	800c93a <__retarget_lock_acquire_recursive>
 800c356:	bf00      	nop
 800c358:	20002d59 	.word	0x20002d59

0800c35c <__sfp_lock_release>:
 800c35c:	4801      	ldr	r0, [pc, #4]	@ (800c364 <__sfp_lock_release+0x8>)
 800c35e:	f000 baed 	b.w	800c93c <__retarget_lock_release_recursive>
 800c362:	bf00      	nop
 800c364:	20002d59 	.word	0x20002d59

0800c368 <__sinit>:
 800c368:	b510      	push	{r4, lr}
 800c36a:	4604      	mov	r4, r0
 800c36c:	f7ff fff0 	bl	800c350 <__sfp_lock_acquire>
 800c370:	6a23      	ldr	r3, [r4, #32]
 800c372:	b11b      	cbz	r3, 800c37c <__sinit+0x14>
 800c374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c378:	f7ff bff0 	b.w	800c35c <__sfp_lock_release>
 800c37c:	4b04      	ldr	r3, [pc, #16]	@ (800c390 <__sinit+0x28>)
 800c37e:	6223      	str	r3, [r4, #32]
 800c380:	4b04      	ldr	r3, [pc, #16]	@ (800c394 <__sinit+0x2c>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d1f5      	bne.n	800c374 <__sinit+0xc>
 800c388:	f7ff ffc4 	bl	800c314 <global_stdio_init.part.0>
 800c38c:	e7f2      	b.n	800c374 <__sinit+0xc>
 800c38e:	bf00      	nop
 800c390:	0800c2d5 	.word	0x0800c2d5
 800c394:	20002d50 	.word	0x20002d50

0800c398 <_fwalk_sglue>:
 800c398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c39c:	4607      	mov	r7, r0
 800c39e:	4688      	mov	r8, r1
 800c3a0:	4614      	mov	r4, r2
 800c3a2:	2600      	movs	r6, #0
 800c3a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3a8:	f1b9 0901 	subs.w	r9, r9, #1
 800c3ac:	d505      	bpl.n	800c3ba <_fwalk_sglue+0x22>
 800c3ae:	6824      	ldr	r4, [r4, #0]
 800c3b0:	2c00      	cmp	r4, #0
 800c3b2:	d1f7      	bne.n	800c3a4 <_fwalk_sglue+0xc>
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3ba:	89ab      	ldrh	r3, [r5, #12]
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d907      	bls.n	800c3d0 <_fwalk_sglue+0x38>
 800c3c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	d003      	beq.n	800c3d0 <_fwalk_sglue+0x38>
 800c3c8:	4629      	mov	r1, r5
 800c3ca:	4638      	mov	r0, r7
 800c3cc:	47c0      	blx	r8
 800c3ce:	4306      	orrs	r6, r0
 800c3d0:	3568      	adds	r5, #104	@ 0x68
 800c3d2:	e7e9      	b.n	800c3a8 <_fwalk_sglue+0x10>

0800c3d4 <iprintf>:
 800c3d4:	b40f      	push	{r0, r1, r2, r3}
 800c3d6:	b507      	push	{r0, r1, r2, lr}
 800c3d8:	4906      	ldr	r1, [pc, #24]	@ (800c3f4 <iprintf+0x20>)
 800c3da:	ab04      	add	r3, sp, #16
 800c3dc:	6808      	ldr	r0, [r1, #0]
 800c3de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3e2:	6881      	ldr	r1, [r0, #8]
 800c3e4:	9301      	str	r3, [sp, #4]
 800c3e6:	f002 fba3 	bl	800eb30 <_vfiprintf_r>
 800c3ea:	b003      	add	sp, #12
 800c3ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3f0:	b004      	add	sp, #16
 800c3f2:	4770      	bx	lr
 800c3f4:	200001a0 	.word	0x200001a0

0800c3f8 <_puts_r>:
 800c3f8:	6a03      	ldr	r3, [r0, #32]
 800c3fa:	b570      	push	{r4, r5, r6, lr}
 800c3fc:	6884      	ldr	r4, [r0, #8]
 800c3fe:	4605      	mov	r5, r0
 800c400:	460e      	mov	r6, r1
 800c402:	b90b      	cbnz	r3, 800c408 <_puts_r+0x10>
 800c404:	f7ff ffb0 	bl	800c368 <__sinit>
 800c408:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c40a:	07db      	lsls	r3, r3, #31
 800c40c:	d405      	bmi.n	800c41a <_puts_r+0x22>
 800c40e:	89a3      	ldrh	r3, [r4, #12]
 800c410:	0598      	lsls	r0, r3, #22
 800c412:	d402      	bmi.n	800c41a <_puts_r+0x22>
 800c414:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c416:	f000 fa90 	bl	800c93a <__retarget_lock_acquire_recursive>
 800c41a:	89a3      	ldrh	r3, [r4, #12]
 800c41c:	0719      	lsls	r1, r3, #28
 800c41e:	d502      	bpl.n	800c426 <_puts_r+0x2e>
 800c420:	6923      	ldr	r3, [r4, #16]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d135      	bne.n	800c492 <_puts_r+0x9a>
 800c426:	4621      	mov	r1, r4
 800c428:	4628      	mov	r0, r5
 800c42a:	f000 f9a1 	bl	800c770 <__swsetup_r>
 800c42e:	b380      	cbz	r0, 800c492 <_puts_r+0x9a>
 800c430:	f04f 35ff 	mov.w	r5, #4294967295
 800c434:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c436:	07da      	lsls	r2, r3, #31
 800c438:	d405      	bmi.n	800c446 <_puts_r+0x4e>
 800c43a:	89a3      	ldrh	r3, [r4, #12]
 800c43c:	059b      	lsls	r3, r3, #22
 800c43e:	d402      	bmi.n	800c446 <_puts_r+0x4e>
 800c440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c442:	f000 fa7b 	bl	800c93c <__retarget_lock_release_recursive>
 800c446:	4628      	mov	r0, r5
 800c448:	bd70      	pop	{r4, r5, r6, pc}
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	da04      	bge.n	800c458 <_puts_r+0x60>
 800c44e:	69a2      	ldr	r2, [r4, #24]
 800c450:	429a      	cmp	r2, r3
 800c452:	dc17      	bgt.n	800c484 <_puts_r+0x8c>
 800c454:	290a      	cmp	r1, #10
 800c456:	d015      	beq.n	800c484 <_puts_r+0x8c>
 800c458:	6823      	ldr	r3, [r4, #0]
 800c45a:	1c5a      	adds	r2, r3, #1
 800c45c:	6022      	str	r2, [r4, #0]
 800c45e:	7019      	strb	r1, [r3, #0]
 800c460:	68a3      	ldr	r3, [r4, #8]
 800c462:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c466:	3b01      	subs	r3, #1
 800c468:	60a3      	str	r3, [r4, #8]
 800c46a:	2900      	cmp	r1, #0
 800c46c:	d1ed      	bne.n	800c44a <_puts_r+0x52>
 800c46e:	2b00      	cmp	r3, #0
 800c470:	da11      	bge.n	800c496 <_puts_r+0x9e>
 800c472:	4622      	mov	r2, r4
 800c474:	210a      	movs	r1, #10
 800c476:	4628      	mov	r0, r5
 800c478:	f000 f93b 	bl	800c6f2 <__swbuf_r>
 800c47c:	3001      	adds	r0, #1
 800c47e:	d0d7      	beq.n	800c430 <_puts_r+0x38>
 800c480:	250a      	movs	r5, #10
 800c482:	e7d7      	b.n	800c434 <_puts_r+0x3c>
 800c484:	4622      	mov	r2, r4
 800c486:	4628      	mov	r0, r5
 800c488:	f000 f933 	bl	800c6f2 <__swbuf_r>
 800c48c:	3001      	adds	r0, #1
 800c48e:	d1e7      	bne.n	800c460 <_puts_r+0x68>
 800c490:	e7ce      	b.n	800c430 <_puts_r+0x38>
 800c492:	3e01      	subs	r6, #1
 800c494:	e7e4      	b.n	800c460 <_puts_r+0x68>
 800c496:	6823      	ldr	r3, [r4, #0]
 800c498:	1c5a      	adds	r2, r3, #1
 800c49a:	6022      	str	r2, [r4, #0]
 800c49c:	220a      	movs	r2, #10
 800c49e:	701a      	strb	r2, [r3, #0]
 800c4a0:	e7ee      	b.n	800c480 <_puts_r+0x88>
	...

0800c4a4 <puts>:
 800c4a4:	4b02      	ldr	r3, [pc, #8]	@ (800c4b0 <puts+0xc>)
 800c4a6:	4601      	mov	r1, r0
 800c4a8:	6818      	ldr	r0, [r3, #0]
 800c4aa:	f7ff bfa5 	b.w	800c3f8 <_puts_r>
 800c4ae:	bf00      	nop
 800c4b0:	200001a0 	.word	0x200001a0

0800c4b4 <setbuf>:
 800c4b4:	fab1 f281 	clz	r2, r1
 800c4b8:	0952      	lsrs	r2, r2, #5
 800c4ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4be:	0052      	lsls	r2, r2, #1
 800c4c0:	f000 b800 	b.w	800c4c4 <setvbuf>

0800c4c4 <setvbuf>:
 800c4c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c4c8:	461d      	mov	r5, r3
 800c4ca:	4b57      	ldr	r3, [pc, #348]	@ (800c628 <setvbuf+0x164>)
 800c4cc:	681f      	ldr	r7, [r3, #0]
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	460e      	mov	r6, r1
 800c4d2:	4690      	mov	r8, r2
 800c4d4:	b127      	cbz	r7, 800c4e0 <setvbuf+0x1c>
 800c4d6:	6a3b      	ldr	r3, [r7, #32]
 800c4d8:	b913      	cbnz	r3, 800c4e0 <setvbuf+0x1c>
 800c4da:	4638      	mov	r0, r7
 800c4dc:	f7ff ff44 	bl	800c368 <__sinit>
 800c4e0:	f1b8 0f02 	cmp.w	r8, #2
 800c4e4:	d006      	beq.n	800c4f4 <setvbuf+0x30>
 800c4e6:	f1b8 0f01 	cmp.w	r8, #1
 800c4ea:	f200 809a 	bhi.w	800c622 <setvbuf+0x15e>
 800c4ee:	2d00      	cmp	r5, #0
 800c4f0:	f2c0 8097 	blt.w	800c622 <setvbuf+0x15e>
 800c4f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c4f6:	07d9      	lsls	r1, r3, #31
 800c4f8:	d405      	bmi.n	800c506 <setvbuf+0x42>
 800c4fa:	89a3      	ldrh	r3, [r4, #12]
 800c4fc:	059a      	lsls	r2, r3, #22
 800c4fe:	d402      	bmi.n	800c506 <setvbuf+0x42>
 800c500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c502:	f000 fa1a 	bl	800c93a <__retarget_lock_acquire_recursive>
 800c506:	4621      	mov	r1, r4
 800c508:	4638      	mov	r0, r7
 800c50a:	f002 fcad 	bl	800ee68 <_fflush_r>
 800c50e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c510:	b141      	cbz	r1, 800c524 <setvbuf+0x60>
 800c512:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c516:	4299      	cmp	r1, r3
 800c518:	d002      	beq.n	800c520 <setvbuf+0x5c>
 800c51a:	4638      	mov	r0, r7
 800c51c:	f001 f87c 	bl	800d618 <_free_r>
 800c520:	2300      	movs	r3, #0
 800c522:	6363      	str	r3, [r4, #52]	@ 0x34
 800c524:	2300      	movs	r3, #0
 800c526:	61a3      	str	r3, [r4, #24]
 800c528:	6063      	str	r3, [r4, #4]
 800c52a:	89a3      	ldrh	r3, [r4, #12]
 800c52c:	061b      	lsls	r3, r3, #24
 800c52e:	d503      	bpl.n	800c538 <setvbuf+0x74>
 800c530:	6921      	ldr	r1, [r4, #16]
 800c532:	4638      	mov	r0, r7
 800c534:	f001 f870 	bl	800d618 <_free_r>
 800c538:	89a3      	ldrh	r3, [r4, #12]
 800c53a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800c53e:	f023 0303 	bic.w	r3, r3, #3
 800c542:	f1b8 0f02 	cmp.w	r8, #2
 800c546:	81a3      	strh	r3, [r4, #12]
 800c548:	d061      	beq.n	800c60e <setvbuf+0x14a>
 800c54a:	ab01      	add	r3, sp, #4
 800c54c:	466a      	mov	r2, sp
 800c54e:	4621      	mov	r1, r4
 800c550:	4638      	mov	r0, r7
 800c552:	f002 fcb1 	bl	800eeb8 <__swhatbuf_r>
 800c556:	89a3      	ldrh	r3, [r4, #12]
 800c558:	4318      	orrs	r0, r3
 800c55a:	81a0      	strh	r0, [r4, #12]
 800c55c:	bb2d      	cbnz	r5, 800c5aa <setvbuf+0xe6>
 800c55e:	9d00      	ldr	r5, [sp, #0]
 800c560:	4628      	mov	r0, r5
 800c562:	f001 fbdd 	bl	800dd20 <malloc>
 800c566:	4606      	mov	r6, r0
 800c568:	2800      	cmp	r0, #0
 800c56a:	d152      	bne.n	800c612 <setvbuf+0x14e>
 800c56c:	f8dd 9000 	ldr.w	r9, [sp]
 800c570:	45a9      	cmp	r9, r5
 800c572:	d140      	bne.n	800c5f6 <setvbuf+0x132>
 800c574:	f04f 35ff 	mov.w	r5, #4294967295
 800c578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c57c:	f043 0202 	orr.w	r2, r3, #2
 800c580:	81a2      	strh	r2, [r4, #12]
 800c582:	2200      	movs	r2, #0
 800c584:	60a2      	str	r2, [r4, #8]
 800c586:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800c58a:	6022      	str	r2, [r4, #0]
 800c58c:	6122      	str	r2, [r4, #16]
 800c58e:	2201      	movs	r2, #1
 800c590:	6162      	str	r2, [r4, #20]
 800c592:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c594:	07d6      	lsls	r6, r2, #31
 800c596:	d404      	bmi.n	800c5a2 <setvbuf+0xde>
 800c598:	0598      	lsls	r0, r3, #22
 800c59a:	d402      	bmi.n	800c5a2 <setvbuf+0xde>
 800c59c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c59e:	f000 f9cd 	bl	800c93c <__retarget_lock_release_recursive>
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	b003      	add	sp, #12
 800c5a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5aa:	2e00      	cmp	r6, #0
 800c5ac:	d0d8      	beq.n	800c560 <setvbuf+0x9c>
 800c5ae:	6a3b      	ldr	r3, [r7, #32]
 800c5b0:	b913      	cbnz	r3, 800c5b8 <setvbuf+0xf4>
 800c5b2:	4638      	mov	r0, r7
 800c5b4:	f7ff fed8 	bl	800c368 <__sinit>
 800c5b8:	f1b8 0f01 	cmp.w	r8, #1
 800c5bc:	bf08      	it	eq
 800c5be:	89a3      	ldrheq	r3, [r4, #12]
 800c5c0:	6026      	str	r6, [r4, #0]
 800c5c2:	bf04      	itt	eq
 800c5c4:	f043 0301 	orreq.w	r3, r3, #1
 800c5c8:	81a3      	strheq	r3, [r4, #12]
 800c5ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5ce:	f013 0208 	ands.w	r2, r3, #8
 800c5d2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800c5d6:	d01e      	beq.n	800c616 <setvbuf+0x152>
 800c5d8:	07d9      	lsls	r1, r3, #31
 800c5da:	bf41      	itttt	mi
 800c5dc:	2200      	movmi	r2, #0
 800c5de:	426d      	negmi	r5, r5
 800c5e0:	60a2      	strmi	r2, [r4, #8]
 800c5e2:	61a5      	strmi	r5, [r4, #24]
 800c5e4:	bf58      	it	pl
 800c5e6:	60a5      	strpl	r5, [r4, #8]
 800c5e8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c5ea:	07d2      	lsls	r2, r2, #31
 800c5ec:	d401      	bmi.n	800c5f2 <setvbuf+0x12e>
 800c5ee:	059b      	lsls	r3, r3, #22
 800c5f0:	d513      	bpl.n	800c61a <setvbuf+0x156>
 800c5f2:	2500      	movs	r5, #0
 800c5f4:	e7d5      	b.n	800c5a2 <setvbuf+0xde>
 800c5f6:	4648      	mov	r0, r9
 800c5f8:	f001 fb92 	bl	800dd20 <malloc>
 800c5fc:	4606      	mov	r6, r0
 800c5fe:	2800      	cmp	r0, #0
 800c600:	d0b8      	beq.n	800c574 <setvbuf+0xb0>
 800c602:	89a3      	ldrh	r3, [r4, #12]
 800c604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c608:	81a3      	strh	r3, [r4, #12]
 800c60a:	464d      	mov	r5, r9
 800c60c:	e7cf      	b.n	800c5ae <setvbuf+0xea>
 800c60e:	2500      	movs	r5, #0
 800c610:	e7b2      	b.n	800c578 <setvbuf+0xb4>
 800c612:	46a9      	mov	r9, r5
 800c614:	e7f5      	b.n	800c602 <setvbuf+0x13e>
 800c616:	60a2      	str	r2, [r4, #8]
 800c618:	e7e6      	b.n	800c5e8 <setvbuf+0x124>
 800c61a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c61c:	f000 f98e 	bl	800c93c <__retarget_lock_release_recursive>
 800c620:	e7e7      	b.n	800c5f2 <setvbuf+0x12e>
 800c622:	f04f 35ff 	mov.w	r5, #4294967295
 800c626:	e7bc      	b.n	800c5a2 <setvbuf+0xde>
 800c628:	200001a0 	.word	0x200001a0

0800c62c <siprintf>:
 800c62c:	b40e      	push	{r1, r2, r3}
 800c62e:	b500      	push	{lr}
 800c630:	b09c      	sub	sp, #112	@ 0x70
 800c632:	ab1d      	add	r3, sp, #116	@ 0x74
 800c634:	9002      	str	r0, [sp, #8]
 800c636:	9006      	str	r0, [sp, #24]
 800c638:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c63c:	4809      	ldr	r0, [pc, #36]	@ (800c664 <siprintf+0x38>)
 800c63e:	9107      	str	r1, [sp, #28]
 800c640:	9104      	str	r1, [sp, #16]
 800c642:	4909      	ldr	r1, [pc, #36]	@ (800c668 <siprintf+0x3c>)
 800c644:	f853 2b04 	ldr.w	r2, [r3], #4
 800c648:	9105      	str	r1, [sp, #20]
 800c64a:	6800      	ldr	r0, [r0, #0]
 800c64c:	9301      	str	r3, [sp, #4]
 800c64e:	a902      	add	r1, sp, #8
 800c650:	f002 f948 	bl	800e8e4 <_svfiprintf_r>
 800c654:	9b02      	ldr	r3, [sp, #8]
 800c656:	2200      	movs	r2, #0
 800c658:	701a      	strb	r2, [r3, #0]
 800c65a:	b01c      	add	sp, #112	@ 0x70
 800c65c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c660:	b003      	add	sp, #12
 800c662:	4770      	bx	lr
 800c664:	200001a0 	.word	0x200001a0
 800c668:	ffff0208 	.word	0xffff0208

0800c66c <__sread>:
 800c66c:	b510      	push	{r4, lr}
 800c66e:	460c      	mov	r4, r1
 800c670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c674:	f000 f912 	bl	800c89c <_read_r>
 800c678:	2800      	cmp	r0, #0
 800c67a:	bfab      	itete	ge
 800c67c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c67e:	89a3      	ldrhlt	r3, [r4, #12]
 800c680:	181b      	addge	r3, r3, r0
 800c682:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c686:	bfac      	ite	ge
 800c688:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c68a:	81a3      	strhlt	r3, [r4, #12]
 800c68c:	bd10      	pop	{r4, pc}

0800c68e <__swrite>:
 800c68e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c692:	461f      	mov	r7, r3
 800c694:	898b      	ldrh	r3, [r1, #12]
 800c696:	05db      	lsls	r3, r3, #23
 800c698:	4605      	mov	r5, r0
 800c69a:	460c      	mov	r4, r1
 800c69c:	4616      	mov	r6, r2
 800c69e:	d505      	bpl.n	800c6ac <__swrite+0x1e>
 800c6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6a4:	2302      	movs	r3, #2
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f000 f8e6 	bl	800c878 <_lseek_r>
 800c6ac:	89a3      	ldrh	r3, [r4, #12]
 800c6ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c6b6:	81a3      	strh	r3, [r4, #12]
 800c6b8:	4632      	mov	r2, r6
 800c6ba:	463b      	mov	r3, r7
 800c6bc:	4628      	mov	r0, r5
 800c6be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c2:	f000 b8fd 	b.w	800c8c0 <_write_r>

0800c6c6 <__sseek>:
 800c6c6:	b510      	push	{r4, lr}
 800c6c8:	460c      	mov	r4, r1
 800c6ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6ce:	f000 f8d3 	bl	800c878 <_lseek_r>
 800c6d2:	1c43      	adds	r3, r0, #1
 800c6d4:	89a3      	ldrh	r3, [r4, #12]
 800c6d6:	bf15      	itete	ne
 800c6d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c6da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c6de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c6e2:	81a3      	strheq	r3, [r4, #12]
 800c6e4:	bf18      	it	ne
 800c6e6:	81a3      	strhne	r3, [r4, #12]
 800c6e8:	bd10      	pop	{r4, pc}

0800c6ea <__sclose>:
 800c6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6ee:	f000 b8b3 	b.w	800c858 <_close_r>

0800c6f2 <__swbuf_r>:
 800c6f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6f4:	460e      	mov	r6, r1
 800c6f6:	4614      	mov	r4, r2
 800c6f8:	4605      	mov	r5, r0
 800c6fa:	b118      	cbz	r0, 800c704 <__swbuf_r+0x12>
 800c6fc:	6a03      	ldr	r3, [r0, #32]
 800c6fe:	b90b      	cbnz	r3, 800c704 <__swbuf_r+0x12>
 800c700:	f7ff fe32 	bl	800c368 <__sinit>
 800c704:	69a3      	ldr	r3, [r4, #24]
 800c706:	60a3      	str	r3, [r4, #8]
 800c708:	89a3      	ldrh	r3, [r4, #12]
 800c70a:	071a      	lsls	r2, r3, #28
 800c70c:	d501      	bpl.n	800c712 <__swbuf_r+0x20>
 800c70e:	6923      	ldr	r3, [r4, #16]
 800c710:	b943      	cbnz	r3, 800c724 <__swbuf_r+0x32>
 800c712:	4621      	mov	r1, r4
 800c714:	4628      	mov	r0, r5
 800c716:	f000 f82b 	bl	800c770 <__swsetup_r>
 800c71a:	b118      	cbz	r0, 800c724 <__swbuf_r+0x32>
 800c71c:	f04f 37ff 	mov.w	r7, #4294967295
 800c720:	4638      	mov	r0, r7
 800c722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c724:	6823      	ldr	r3, [r4, #0]
 800c726:	6922      	ldr	r2, [r4, #16]
 800c728:	1a98      	subs	r0, r3, r2
 800c72a:	6963      	ldr	r3, [r4, #20]
 800c72c:	b2f6      	uxtb	r6, r6
 800c72e:	4283      	cmp	r3, r0
 800c730:	4637      	mov	r7, r6
 800c732:	dc05      	bgt.n	800c740 <__swbuf_r+0x4e>
 800c734:	4621      	mov	r1, r4
 800c736:	4628      	mov	r0, r5
 800c738:	f002 fb96 	bl	800ee68 <_fflush_r>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d1ed      	bne.n	800c71c <__swbuf_r+0x2a>
 800c740:	68a3      	ldr	r3, [r4, #8]
 800c742:	3b01      	subs	r3, #1
 800c744:	60a3      	str	r3, [r4, #8]
 800c746:	6823      	ldr	r3, [r4, #0]
 800c748:	1c5a      	adds	r2, r3, #1
 800c74a:	6022      	str	r2, [r4, #0]
 800c74c:	701e      	strb	r6, [r3, #0]
 800c74e:	6962      	ldr	r2, [r4, #20]
 800c750:	1c43      	adds	r3, r0, #1
 800c752:	429a      	cmp	r2, r3
 800c754:	d004      	beq.n	800c760 <__swbuf_r+0x6e>
 800c756:	89a3      	ldrh	r3, [r4, #12]
 800c758:	07db      	lsls	r3, r3, #31
 800c75a:	d5e1      	bpl.n	800c720 <__swbuf_r+0x2e>
 800c75c:	2e0a      	cmp	r6, #10
 800c75e:	d1df      	bne.n	800c720 <__swbuf_r+0x2e>
 800c760:	4621      	mov	r1, r4
 800c762:	4628      	mov	r0, r5
 800c764:	f002 fb80 	bl	800ee68 <_fflush_r>
 800c768:	2800      	cmp	r0, #0
 800c76a:	d0d9      	beq.n	800c720 <__swbuf_r+0x2e>
 800c76c:	e7d6      	b.n	800c71c <__swbuf_r+0x2a>
	...

0800c770 <__swsetup_r>:
 800c770:	b538      	push	{r3, r4, r5, lr}
 800c772:	4b29      	ldr	r3, [pc, #164]	@ (800c818 <__swsetup_r+0xa8>)
 800c774:	4605      	mov	r5, r0
 800c776:	6818      	ldr	r0, [r3, #0]
 800c778:	460c      	mov	r4, r1
 800c77a:	b118      	cbz	r0, 800c784 <__swsetup_r+0x14>
 800c77c:	6a03      	ldr	r3, [r0, #32]
 800c77e:	b90b      	cbnz	r3, 800c784 <__swsetup_r+0x14>
 800c780:	f7ff fdf2 	bl	800c368 <__sinit>
 800c784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c788:	0719      	lsls	r1, r3, #28
 800c78a:	d422      	bmi.n	800c7d2 <__swsetup_r+0x62>
 800c78c:	06da      	lsls	r2, r3, #27
 800c78e:	d407      	bmi.n	800c7a0 <__swsetup_r+0x30>
 800c790:	2209      	movs	r2, #9
 800c792:	602a      	str	r2, [r5, #0]
 800c794:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c798:	81a3      	strh	r3, [r4, #12]
 800c79a:	f04f 30ff 	mov.w	r0, #4294967295
 800c79e:	e033      	b.n	800c808 <__swsetup_r+0x98>
 800c7a0:	0758      	lsls	r0, r3, #29
 800c7a2:	d512      	bpl.n	800c7ca <__swsetup_r+0x5a>
 800c7a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c7a6:	b141      	cbz	r1, 800c7ba <__swsetup_r+0x4a>
 800c7a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c7ac:	4299      	cmp	r1, r3
 800c7ae:	d002      	beq.n	800c7b6 <__swsetup_r+0x46>
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	f000 ff31 	bl	800d618 <_free_r>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c7ba:	89a3      	ldrh	r3, [r4, #12]
 800c7bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c7c0:	81a3      	strh	r3, [r4, #12]
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	6063      	str	r3, [r4, #4]
 800c7c6:	6923      	ldr	r3, [r4, #16]
 800c7c8:	6023      	str	r3, [r4, #0]
 800c7ca:	89a3      	ldrh	r3, [r4, #12]
 800c7cc:	f043 0308 	orr.w	r3, r3, #8
 800c7d0:	81a3      	strh	r3, [r4, #12]
 800c7d2:	6923      	ldr	r3, [r4, #16]
 800c7d4:	b94b      	cbnz	r3, 800c7ea <__swsetup_r+0x7a>
 800c7d6:	89a3      	ldrh	r3, [r4, #12]
 800c7d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c7dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c7e0:	d003      	beq.n	800c7ea <__swsetup_r+0x7a>
 800c7e2:	4621      	mov	r1, r4
 800c7e4:	4628      	mov	r0, r5
 800c7e6:	f002 fb8d 	bl	800ef04 <__smakebuf_r>
 800c7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7ee:	f013 0201 	ands.w	r2, r3, #1
 800c7f2:	d00a      	beq.n	800c80a <__swsetup_r+0x9a>
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	60a2      	str	r2, [r4, #8]
 800c7f8:	6962      	ldr	r2, [r4, #20]
 800c7fa:	4252      	negs	r2, r2
 800c7fc:	61a2      	str	r2, [r4, #24]
 800c7fe:	6922      	ldr	r2, [r4, #16]
 800c800:	b942      	cbnz	r2, 800c814 <__swsetup_r+0xa4>
 800c802:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c806:	d1c5      	bne.n	800c794 <__swsetup_r+0x24>
 800c808:	bd38      	pop	{r3, r4, r5, pc}
 800c80a:	0799      	lsls	r1, r3, #30
 800c80c:	bf58      	it	pl
 800c80e:	6962      	ldrpl	r2, [r4, #20]
 800c810:	60a2      	str	r2, [r4, #8]
 800c812:	e7f4      	b.n	800c7fe <__swsetup_r+0x8e>
 800c814:	2000      	movs	r0, #0
 800c816:	e7f7      	b.n	800c808 <__swsetup_r+0x98>
 800c818:	200001a0 	.word	0x200001a0

0800c81c <memset>:
 800c81c:	4402      	add	r2, r0
 800c81e:	4603      	mov	r3, r0
 800c820:	4293      	cmp	r3, r2
 800c822:	d100      	bne.n	800c826 <memset+0xa>
 800c824:	4770      	bx	lr
 800c826:	f803 1b01 	strb.w	r1, [r3], #1
 800c82a:	e7f9      	b.n	800c820 <memset+0x4>

0800c82c <strncmp>:
 800c82c:	b510      	push	{r4, lr}
 800c82e:	b16a      	cbz	r2, 800c84c <strncmp+0x20>
 800c830:	3901      	subs	r1, #1
 800c832:	1884      	adds	r4, r0, r2
 800c834:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c838:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d103      	bne.n	800c848 <strncmp+0x1c>
 800c840:	42a0      	cmp	r0, r4
 800c842:	d001      	beq.n	800c848 <strncmp+0x1c>
 800c844:	2a00      	cmp	r2, #0
 800c846:	d1f5      	bne.n	800c834 <strncmp+0x8>
 800c848:	1ad0      	subs	r0, r2, r3
 800c84a:	bd10      	pop	{r4, pc}
 800c84c:	4610      	mov	r0, r2
 800c84e:	e7fc      	b.n	800c84a <strncmp+0x1e>

0800c850 <_localeconv_r>:
 800c850:	4800      	ldr	r0, [pc, #0]	@ (800c854 <_localeconv_r+0x4>)
 800c852:	4770      	bx	lr
 800c854:	20000124 	.word	0x20000124

0800c858 <_close_r>:
 800c858:	b538      	push	{r3, r4, r5, lr}
 800c85a:	4d06      	ldr	r5, [pc, #24]	@ (800c874 <_close_r+0x1c>)
 800c85c:	2300      	movs	r3, #0
 800c85e:	4604      	mov	r4, r0
 800c860:	4608      	mov	r0, r1
 800c862:	602b      	str	r3, [r5, #0]
 800c864:	f7f5 ff10 	bl	8002688 <_close>
 800c868:	1c43      	adds	r3, r0, #1
 800c86a:	d102      	bne.n	800c872 <_close_r+0x1a>
 800c86c:	682b      	ldr	r3, [r5, #0]
 800c86e:	b103      	cbz	r3, 800c872 <_close_r+0x1a>
 800c870:	6023      	str	r3, [r4, #0]
 800c872:	bd38      	pop	{r3, r4, r5, pc}
 800c874:	20002d54 	.word	0x20002d54

0800c878 <_lseek_r>:
 800c878:	b538      	push	{r3, r4, r5, lr}
 800c87a:	4d07      	ldr	r5, [pc, #28]	@ (800c898 <_lseek_r+0x20>)
 800c87c:	4604      	mov	r4, r0
 800c87e:	4608      	mov	r0, r1
 800c880:	4611      	mov	r1, r2
 800c882:	2200      	movs	r2, #0
 800c884:	602a      	str	r2, [r5, #0]
 800c886:	461a      	mov	r2, r3
 800c888:	f7f5 ff25 	bl	80026d6 <_lseek>
 800c88c:	1c43      	adds	r3, r0, #1
 800c88e:	d102      	bne.n	800c896 <_lseek_r+0x1e>
 800c890:	682b      	ldr	r3, [r5, #0]
 800c892:	b103      	cbz	r3, 800c896 <_lseek_r+0x1e>
 800c894:	6023      	str	r3, [r4, #0]
 800c896:	bd38      	pop	{r3, r4, r5, pc}
 800c898:	20002d54 	.word	0x20002d54

0800c89c <_read_r>:
 800c89c:	b538      	push	{r3, r4, r5, lr}
 800c89e:	4d07      	ldr	r5, [pc, #28]	@ (800c8bc <_read_r+0x20>)
 800c8a0:	4604      	mov	r4, r0
 800c8a2:	4608      	mov	r0, r1
 800c8a4:	4611      	mov	r1, r2
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	602a      	str	r2, [r5, #0]
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	f7f5 fecf 	bl	800264e <_read>
 800c8b0:	1c43      	adds	r3, r0, #1
 800c8b2:	d102      	bne.n	800c8ba <_read_r+0x1e>
 800c8b4:	682b      	ldr	r3, [r5, #0]
 800c8b6:	b103      	cbz	r3, 800c8ba <_read_r+0x1e>
 800c8b8:	6023      	str	r3, [r4, #0]
 800c8ba:	bd38      	pop	{r3, r4, r5, pc}
 800c8bc:	20002d54 	.word	0x20002d54

0800c8c0 <_write_r>:
 800c8c0:	b538      	push	{r3, r4, r5, lr}
 800c8c2:	4d07      	ldr	r5, [pc, #28]	@ (800c8e0 <_write_r+0x20>)
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	4608      	mov	r0, r1
 800c8c8:	4611      	mov	r1, r2
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	602a      	str	r2, [r5, #0]
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	f7f5 f962 	bl	8001b98 <_write>
 800c8d4:	1c43      	adds	r3, r0, #1
 800c8d6:	d102      	bne.n	800c8de <_write_r+0x1e>
 800c8d8:	682b      	ldr	r3, [r5, #0]
 800c8da:	b103      	cbz	r3, 800c8de <_write_r+0x1e>
 800c8dc:	6023      	str	r3, [r4, #0]
 800c8de:	bd38      	pop	{r3, r4, r5, pc}
 800c8e0:	20002d54 	.word	0x20002d54

0800c8e4 <__errno>:
 800c8e4:	4b01      	ldr	r3, [pc, #4]	@ (800c8ec <__errno+0x8>)
 800c8e6:	6818      	ldr	r0, [r3, #0]
 800c8e8:	4770      	bx	lr
 800c8ea:	bf00      	nop
 800c8ec:	200001a0 	.word	0x200001a0

0800c8f0 <__libc_init_array>:
 800c8f0:	b570      	push	{r4, r5, r6, lr}
 800c8f2:	4d0d      	ldr	r5, [pc, #52]	@ (800c928 <__libc_init_array+0x38>)
 800c8f4:	4c0d      	ldr	r4, [pc, #52]	@ (800c92c <__libc_init_array+0x3c>)
 800c8f6:	1b64      	subs	r4, r4, r5
 800c8f8:	10a4      	asrs	r4, r4, #2
 800c8fa:	2600      	movs	r6, #0
 800c8fc:	42a6      	cmp	r6, r4
 800c8fe:	d109      	bne.n	800c914 <__libc_init_array+0x24>
 800c900:	4d0b      	ldr	r5, [pc, #44]	@ (800c930 <__libc_init_array+0x40>)
 800c902:	4c0c      	ldr	r4, [pc, #48]	@ (800c934 <__libc_init_array+0x44>)
 800c904:	f002 fc4c 	bl	800f1a0 <_init>
 800c908:	1b64      	subs	r4, r4, r5
 800c90a:	10a4      	asrs	r4, r4, #2
 800c90c:	2600      	movs	r6, #0
 800c90e:	42a6      	cmp	r6, r4
 800c910:	d105      	bne.n	800c91e <__libc_init_array+0x2e>
 800c912:	bd70      	pop	{r4, r5, r6, pc}
 800c914:	f855 3b04 	ldr.w	r3, [r5], #4
 800c918:	4798      	blx	r3
 800c91a:	3601      	adds	r6, #1
 800c91c:	e7ee      	b.n	800c8fc <__libc_init_array+0xc>
 800c91e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c922:	4798      	blx	r3
 800c924:	3601      	adds	r6, #1
 800c926:	e7f2      	b.n	800c90e <__libc_init_array+0x1e>
 800c928:	0800fb50 	.word	0x0800fb50
 800c92c:	0800fb50 	.word	0x0800fb50
 800c930:	0800fb50 	.word	0x0800fb50
 800c934:	0800fb54 	.word	0x0800fb54

0800c938 <__retarget_lock_init_recursive>:
 800c938:	4770      	bx	lr

0800c93a <__retarget_lock_acquire_recursive>:
 800c93a:	4770      	bx	lr

0800c93c <__retarget_lock_release_recursive>:
 800c93c:	4770      	bx	lr

0800c93e <memcpy>:
 800c93e:	440a      	add	r2, r1
 800c940:	4291      	cmp	r1, r2
 800c942:	f100 33ff 	add.w	r3, r0, #4294967295
 800c946:	d100      	bne.n	800c94a <memcpy+0xc>
 800c948:	4770      	bx	lr
 800c94a:	b510      	push	{r4, lr}
 800c94c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c950:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c954:	4291      	cmp	r1, r2
 800c956:	d1f9      	bne.n	800c94c <memcpy+0xe>
 800c958:	bd10      	pop	{r4, pc}
 800c95a:	0000      	movs	r0, r0
 800c95c:	0000      	movs	r0, r0
	...

0800c960 <nan>:
 800c960:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c968 <nan+0x8>
 800c964:	4770      	bx	lr
 800c966:	bf00      	nop
 800c968:	00000000 	.word	0x00000000
 800c96c:	7ff80000 	.word	0x7ff80000

0800c970 <nanf>:
 800c970:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c978 <nanf+0x8>
 800c974:	4770      	bx	lr
 800c976:	bf00      	nop
 800c978:	7fc00000 	.word	0x7fc00000

0800c97c <quorem>:
 800c97c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c980:	6903      	ldr	r3, [r0, #16]
 800c982:	690c      	ldr	r4, [r1, #16]
 800c984:	42a3      	cmp	r3, r4
 800c986:	4607      	mov	r7, r0
 800c988:	db7e      	blt.n	800ca88 <quorem+0x10c>
 800c98a:	3c01      	subs	r4, #1
 800c98c:	f101 0814 	add.w	r8, r1, #20
 800c990:	00a3      	lsls	r3, r4, #2
 800c992:	f100 0514 	add.w	r5, r0, #20
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c99c:	9301      	str	r3, [sp, #4]
 800c99e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c9a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c9ae:	fbb2 f6f3 	udiv	r6, r2, r3
 800c9b2:	d32e      	bcc.n	800ca12 <quorem+0x96>
 800c9b4:	f04f 0a00 	mov.w	sl, #0
 800c9b8:	46c4      	mov	ip, r8
 800c9ba:	46ae      	mov	lr, r5
 800c9bc:	46d3      	mov	fp, sl
 800c9be:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c9c2:	b298      	uxth	r0, r3
 800c9c4:	fb06 a000 	mla	r0, r6, r0, sl
 800c9c8:	0c02      	lsrs	r2, r0, #16
 800c9ca:	0c1b      	lsrs	r3, r3, #16
 800c9cc:	fb06 2303 	mla	r3, r6, r3, r2
 800c9d0:	f8de 2000 	ldr.w	r2, [lr]
 800c9d4:	b280      	uxth	r0, r0
 800c9d6:	b292      	uxth	r2, r2
 800c9d8:	1a12      	subs	r2, r2, r0
 800c9da:	445a      	add	r2, fp
 800c9dc:	f8de 0000 	ldr.w	r0, [lr]
 800c9e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c9ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c9ee:	b292      	uxth	r2, r2
 800c9f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c9f4:	45e1      	cmp	r9, ip
 800c9f6:	f84e 2b04 	str.w	r2, [lr], #4
 800c9fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c9fe:	d2de      	bcs.n	800c9be <quorem+0x42>
 800ca00:	9b00      	ldr	r3, [sp, #0]
 800ca02:	58eb      	ldr	r3, [r5, r3]
 800ca04:	b92b      	cbnz	r3, 800ca12 <quorem+0x96>
 800ca06:	9b01      	ldr	r3, [sp, #4]
 800ca08:	3b04      	subs	r3, #4
 800ca0a:	429d      	cmp	r5, r3
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	d32f      	bcc.n	800ca70 <quorem+0xf4>
 800ca10:	613c      	str	r4, [r7, #16]
 800ca12:	4638      	mov	r0, r7
 800ca14:	f001 fd10 	bl	800e438 <__mcmp>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	db25      	blt.n	800ca68 <quorem+0xec>
 800ca1c:	4629      	mov	r1, r5
 800ca1e:	2000      	movs	r0, #0
 800ca20:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca24:	f8d1 c000 	ldr.w	ip, [r1]
 800ca28:	fa1f fe82 	uxth.w	lr, r2
 800ca2c:	fa1f f38c 	uxth.w	r3, ip
 800ca30:	eba3 030e 	sub.w	r3, r3, lr
 800ca34:	4403      	add	r3, r0
 800ca36:	0c12      	lsrs	r2, r2, #16
 800ca38:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ca3c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca46:	45c1      	cmp	r9, r8
 800ca48:	f841 3b04 	str.w	r3, [r1], #4
 800ca4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ca50:	d2e6      	bcs.n	800ca20 <quorem+0xa4>
 800ca52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca5a:	b922      	cbnz	r2, 800ca66 <quorem+0xea>
 800ca5c:	3b04      	subs	r3, #4
 800ca5e:	429d      	cmp	r5, r3
 800ca60:	461a      	mov	r2, r3
 800ca62:	d30b      	bcc.n	800ca7c <quorem+0x100>
 800ca64:	613c      	str	r4, [r7, #16]
 800ca66:	3601      	adds	r6, #1
 800ca68:	4630      	mov	r0, r6
 800ca6a:	b003      	add	sp, #12
 800ca6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca70:	6812      	ldr	r2, [r2, #0]
 800ca72:	3b04      	subs	r3, #4
 800ca74:	2a00      	cmp	r2, #0
 800ca76:	d1cb      	bne.n	800ca10 <quorem+0x94>
 800ca78:	3c01      	subs	r4, #1
 800ca7a:	e7c6      	b.n	800ca0a <quorem+0x8e>
 800ca7c:	6812      	ldr	r2, [r2, #0]
 800ca7e:	3b04      	subs	r3, #4
 800ca80:	2a00      	cmp	r2, #0
 800ca82:	d1ef      	bne.n	800ca64 <quorem+0xe8>
 800ca84:	3c01      	subs	r4, #1
 800ca86:	e7ea      	b.n	800ca5e <quorem+0xe2>
 800ca88:	2000      	movs	r0, #0
 800ca8a:	e7ee      	b.n	800ca6a <quorem+0xee>
 800ca8c:	0000      	movs	r0, r0
	...

0800ca90 <_dtoa_r>:
 800ca90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca94:	69c7      	ldr	r7, [r0, #28]
 800ca96:	b099      	sub	sp, #100	@ 0x64
 800ca98:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ca9c:	ec55 4b10 	vmov	r4, r5, d0
 800caa0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800caa2:	9109      	str	r1, [sp, #36]	@ 0x24
 800caa4:	4683      	mov	fp, r0
 800caa6:	920e      	str	r2, [sp, #56]	@ 0x38
 800caa8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800caaa:	b97f      	cbnz	r7, 800cacc <_dtoa_r+0x3c>
 800caac:	2010      	movs	r0, #16
 800caae:	f001 f937 	bl	800dd20 <malloc>
 800cab2:	4602      	mov	r2, r0
 800cab4:	f8cb 001c 	str.w	r0, [fp, #28]
 800cab8:	b920      	cbnz	r0, 800cac4 <_dtoa_r+0x34>
 800caba:	4ba7      	ldr	r3, [pc, #668]	@ (800cd58 <_dtoa_r+0x2c8>)
 800cabc:	21ef      	movs	r1, #239	@ 0xef
 800cabe:	48a7      	ldr	r0, [pc, #668]	@ (800cd5c <_dtoa_r+0x2cc>)
 800cac0:	f002 faa8 	bl	800f014 <__assert_func>
 800cac4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cac8:	6007      	str	r7, [r0, #0]
 800caca:	60c7      	str	r7, [r0, #12]
 800cacc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cad0:	6819      	ldr	r1, [r3, #0]
 800cad2:	b159      	cbz	r1, 800caec <_dtoa_r+0x5c>
 800cad4:	685a      	ldr	r2, [r3, #4]
 800cad6:	604a      	str	r2, [r1, #4]
 800cad8:	2301      	movs	r3, #1
 800cada:	4093      	lsls	r3, r2
 800cadc:	608b      	str	r3, [r1, #8]
 800cade:	4658      	mov	r0, fp
 800cae0:	f001 fa26 	bl	800df30 <_Bfree>
 800cae4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cae8:	2200      	movs	r2, #0
 800caea:	601a      	str	r2, [r3, #0]
 800caec:	1e2b      	subs	r3, r5, #0
 800caee:	bfb9      	ittee	lt
 800caf0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800caf4:	9303      	strlt	r3, [sp, #12]
 800caf6:	2300      	movge	r3, #0
 800caf8:	6033      	strge	r3, [r6, #0]
 800cafa:	9f03      	ldr	r7, [sp, #12]
 800cafc:	4b98      	ldr	r3, [pc, #608]	@ (800cd60 <_dtoa_r+0x2d0>)
 800cafe:	bfbc      	itt	lt
 800cb00:	2201      	movlt	r2, #1
 800cb02:	6032      	strlt	r2, [r6, #0]
 800cb04:	43bb      	bics	r3, r7
 800cb06:	d112      	bne.n	800cb2e <_dtoa_r+0x9e>
 800cb08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cb0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cb0e:	6013      	str	r3, [r2, #0]
 800cb10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cb14:	4323      	orrs	r3, r4
 800cb16:	f000 854d 	beq.w	800d5b4 <_dtoa_r+0xb24>
 800cb1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cd74 <_dtoa_r+0x2e4>
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f000 854f 	beq.w	800d5c4 <_dtoa_r+0xb34>
 800cb26:	f10a 0303 	add.w	r3, sl, #3
 800cb2a:	f000 bd49 	b.w	800d5c0 <_dtoa_r+0xb30>
 800cb2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb32:	2200      	movs	r2, #0
 800cb34:	ec51 0b17 	vmov	r0, r1, d7
 800cb38:	2300      	movs	r3, #0
 800cb3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cb3e:	f7f3 ffeb 	bl	8000b18 <__aeabi_dcmpeq>
 800cb42:	4680      	mov	r8, r0
 800cb44:	b158      	cbz	r0, 800cb5e <_dtoa_r+0xce>
 800cb46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cb48:	2301      	movs	r3, #1
 800cb4a:	6013      	str	r3, [r2, #0]
 800cb4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb4e:	b113      	cbz	r3, 800cb56 <_dtoa_r+0xc6>
 800cb50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cb52:	4b84      	ldr	r3, [pc, #528]	@ (800cd64 <_dtoa_r+0x2d4>)
 800cb54:	6013      	str	r3, [r2, #0]
 800cb56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cd78 <_dtoa_r+0x2e8>
 800cb5a:	f000 bd33 	b.w	800d5c4 <_dtoa_r+0xb34>
 800cb5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cb62:	aa16      	add	r2, sp, #88	@ 0x58
 800cb64:	a917      	add	r1, sp, #92	@ 0x5c
 800cb66:	4658      	mov	r0, fp
 800cb68:	f001 fd86 	bl	800e678 <__d2b>
 800cb6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cb70:	4681      	mov	r9, r0
 800cb72:	2e00      	cmp	r6, #0
 800cb74:	d077      	beq.n	800cc66 <_dtoa_r+0x1d6>
 800cb76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cb7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cb88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cb8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cb90:	4619      	mov	r1, r3
 800cb92:	2200      	movs	r2, #0
 800cb94:	4b74      	ldr	r3, [pc, #464]	@ (800cd68 <_dtoa_r+0x2d8>)
 800cb96:	f7f3 fb9f 	bl	80002d8 <__aeabi_dsub>
 800cb9a:	a369      	add	r3, pc, #420	@ (adr r3, 800cd40 <_dtoa_r+0x2b0>)
 800cb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba0:	f7f3 fd52 	bl	8000648 <__aeabi_dmul>
 800cba4:	a368      	add	r3, pc, #416	@ (adr r3, 800cd48 <_dtoa_r+0x2b8>)
 800cba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbaa:	f7f3 fb97 	bl	80002dc <__adddf3>
 800cbae:	4604      	mov	r4, r0
 800cbb0:	4630      	mov	r0, r6
 800cbb2:	460d      	mov	r5, r1
 800cbb4:	f7f3 fcde 	bl	8000574 <__aeabi_i2d>
 800cbb8:	a365      	add	r3, pc, #404	@ (adr r3, 800cd50 <_dtoa_r+0x2c0>)
 800cbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbbe:	f7f3 fd43 	bl	8000648 <__aeabi_dmul>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	4629      	mov	r1, r5
 800cbca:	f7f3 fb87 	bl	80002dc <__adddf3>
 800cbce:	4604      	mov	r4, r0
 800cbd0:	460d      	mov	r5, r1
 800cbd2:	f7f3 ffe9 	bl	8000ba8 <__aeabi_d2iz>
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	4607      	mov	r7, r0
 800cbda:	2300      	movs	r3, #0
 800cbdc:	4620      	mov	r0, r4
 800cbde:	4629      	mov	r1, r5
 800cbe0:	f7f3 ffa4 	bl	8000b2c <__aeabi_dcmplt>
 800cbe4:	b140      	cbz	r0, 800cbf8 <_dtoa_r+0x168>
 800cbe6:	4638      	mov	r0, r7
 800cbe8:	f7f3 fcc4 	bl	8000574 <__aeabi_i2d>
 800cbec:	4622      	mov	r2, r4
 800cbee:	462b      	mov	r3, r5
 800cbf0:	f7f3 ff92 	bl	8000b18 <__aeabi_dcmpeq>
 800cbf4:	b900      	cbnz	r0, 800cbf8 <_dtoa_r+0x168>
 800cbf6:	3f01      	subs	r7, #1
 800cbf8:	2f16      	cmp	r7, #22
 800cbfa:	d851      	bhi.n	800cca0 <_dtoa_r+0x210>
 800cbfc:	4b5b      	ldr	r3, [pc, #364]	@ (800cd6c <_dtoa_r+0x2dc>)
 800cbfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc0a:	f7f3 ff8f 	bl	8000b2c <__aeabi_dcmplt>
 800cc0e:	2800      	cmp	r0, #0
 800cc10:	d048      	beq.n	800cca4 <_dtoa_r+0x214>
 800cc12:	3f01      	subs	r7, #1
 800cc14:	2300      	movs	r3, #0
 800cc16:	9312      	str	r3, [sp, #72]	@ 0x48
 800cc18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cc1a:	1b9b      	subs	r3, r3, r6
 800cc1c:	1e5a      	subs	r2, r3, #1
 800cc1e:	bf44      	itt	mi
 800cc20:	f1c3 0801 	rsbmi	r8, r3, #1
 800cc24:	2300      	movmi	r3, #0
 800cc26:	9208      	str	r2, [sp, #32]
 800cc28:	bf54      	ite	pl
 800cc2a:	f04f 0800 	movpl.w	r8, #0
 800cc2e:	9308      	strmi	r3, [sp, #32]
 800cc30:	2f00      	cmp	r7, #0
 800cc32:	db39      	blt.n	800cca8 <_dtoa_r+0x218>
 800cc34:	9b08      	ldr	r3, [sp, #32]
 800cc36:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cc38:	443b      	add	r3, r7
 800cc3a:	9308      	str	r3, [sp, #32]
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc42:	2b09      	cmp	r3, #9
 800cc44:	d864      	bhi.n	800cd10 <_dtoa_r+0x280>
 800cc46:	2b05      	cmp	r3, #5
 800cc48:	bfc4      	itt	gt
 800cc4a:	3b04      	subgt	r3, #4
 800cc4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cc4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc50:	f1a3 0302 	sub.w	r3, r3, #2
 800cc54:	bfcc      	ite	gt
 800cc56:	2400      	movgt	r4, #0
 800cc58:	2401      	movle	r4, #1
 800cc5a:	2b03      	cmp	r3, #3
 800cc5c:	d863      	bhi.n	800cd26 <_dtoa_r+0x296>
 800cc5e:	e8df f003 	tbb	[pc, r3]
 800cc62:	372a      	.short	0x372a
 800cc64:	5535      	.short	0x5535
 800cc66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cc6a:	441e      	add	r6, r3
 800cc6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cc70:	2b20      	cmp	r3, #32
 800cc72:	bfc1      	itttt	gt
 800cc74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cc78:	409f      	lslgt	r7, r3
 800cc7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cc7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cc82:	bfd6      	itet	le
 800cc84:	f1c3 0320 	rsble	r3, r3, #32
 800cc88:	ea47 0003 	orrgt.w	r0, r7, r3
 800cc8c:	fa04 f003 	lslle.w	r0, r4, r3
 800cc90:	f7f3 fc60 	bl	8000554 <__aeabi_ui2d>
 800cc94:	2201      	movs	r2, #1
 800cc96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cc9a:	3e01      	subs	r6, #1
 800cc9c:	9214      	str	r2, [sp, #80]	@ 0x50
 800cc9e:	e777      	b.n	800cb90 <_dtoa_r+0x100>
 800cca0:	2301      	movs	r3, #1
 800cca2:	e7b8      	b.n	800cc16 <_dtoa_r+0x186>
 800cca4:	9012      	str	r0, [sp, #72]	@ 0x48
 800cca6:	e7b7      	b.n	800cc18 <_dtoa_r+0x188>
 800cca8:	427b      	negs	r3, r7
 800ccaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccac:	2300      	movs	r3, #0
 800ccae:	eba8 0807 	sub.w	r8, r8, r7
 800ccb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ccb4:	e7c4      	b.n	800cc40 <_dtoa_r+0x1b0>
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	dc35      	bgt.n	800cd2c <_dtoa_r+0x29c>
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	9300      	str	r3, [sp, #0]
 800ccc4:	9307      	str	r3, [sp, #28]
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	920e      	str	r2, [sp, #56]	@ 0x38
 800ccca:	e00b      	b.n	800cce4 <_dtoa_r+0x254>
 800cccc:	2301      	movs	r3, #1
 800ccce:	e7f3      	b.n	800ccb8 <_dtoa_r+0x228>
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccd6:	18fb      	adds	r3, r7, r3
 800ccd8:	9300      	str	r3, [sp, #0]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	9307      	str	r3, [sp, #28]
 800cce0:	bfb8      	it	lt
 800cce2:	2301      	movlt	r3, #1
 800cce4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cce8:	2100      	movs	r1, #0
 800ccea:	2204      	movs	r2, #4
 800ccec:	f102 0514 	add.w	r5, r2, #20
 800ccf0:	429d      	cmp	r5, r3
 800ccf2:	d91f      	bls.n	800cd34 <_dtoa_r+0x2a4>
 800ccf4:	6041      	str	r1, [r0, #4]
 800ccf6:	4658      	mov	r0, fp
 800ccf8:	f001 f8da 	bl	800deb0 <_Balloc>
 800ccfc:	4682      	mov	sl, r0
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	d13c      	bne.n	800cd7c <_dtoa_r+0x2ec>
 800cd02:	4b1b      	ldr	r3, [pc, #108]	@ (800cd70 <_dtoa_r+0x2e0>)
 800cd04:	4602      	mov	r2, r0
 800cd06:	f240 11af 	movw	r1, #431	@ 0x1af
 800cd0a:	e6d8      	b.n	800cabe <_dtoa_r+0x2e>
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	e7e0      	b.n	800ccd2 <_dtoa_r+0x242>
 800cd10:	2401      	movs	r4, #1
 800cd12:	2300      	movs	r3, #0
 800cd14:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd16:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cd18:	f04f 33ff 	mov.w	r3, #4294967295
 800cd1c:	9300      	str	r3, [sp, #0]
 800cd1e:	9307      	str	r3, [sp, #28]
 800cd20:	2200      	movs	r2, #0
 800cd22:	2312      	movs	r3, #18
 800cd24:	e7d0      	b.n	800ccc8 <_dtoa_r+0x238>
 800cd26:	2301      	movs	r3, #1
 800cd28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd2a:	e7f5      	b.n	800cd18 <_dtoa_r+0x288>
 800cd2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd2e:	9300      	str	r3, [sp, #0]
 800cd30:	9307      	str	r3, [sp, #28]
 800cd32:	e7d7      	b.n	800cce4 <_dtoa_r+0x254>
 800cd34:	3101      	adds	r1, #1
 800cd36:	0052      	lsls	r2, r2, #1
 800cd38:	e7d8      	b.n	800ccec <_dtoa_r+0x25c>
 800cd3a:	bf00      	nop
 800cd3c:	f3af 8000 	nop.w
 800cd40:	636f4361 	.word	0x636f4361
 800cd44:	3fd287a7 	.word	0x3fd287a7
 800cd48:	8b60c8b3 	.word	0x8b60c8b3
 800cd4c:	3fc68a28 	.word	0x3fc68a28
 800cd50:	509f79fb 	.word	0x509f79fb
 800cd54:	3fd34413 	.word	0x3fd34413
 800cd58:	0800f7c1 	.word	0x0800f7c1
 800cd5c:	0800f7d8 	.word	0x0800f7d8
 800cd60:	7ff00000 	.word	0x7ff00000
 800cd64:	0800f789 	.word	0x0800f789
 800cd68:	3ff80000 	.word	0x3ff80000
 800cd6c:	0800f930 	.word	0x0800f930
 800cd70:	0800f830 	.word	0x0800f830
 800cd74:	0800f7bd 	.word	0x0800f7bd
 800cd78:	0800f788 	.word	0x0800f788
 800cd7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cd80:	6018      	str	r0, [r3, #0]
 800cd82:	9b07      	ldr	r3, [sp, #28]
 800cd84:	2b0e      	cmp	r3, #14
 800cd86:	f200 80a4 	bhi.w	800ced2 <_dtoa_r+0x442>
 800cd8a:	2c00      	cmp	r4, #0
 800cd8c:	f000 80a1 	beq.w	800ced2 <_dtoa_r+0x442>
 800cd90:	2f00      	cmp	r7, #0
 800cd92:	dd33      	ble.n	800cdfc <_dtoa_r+0x36c>
 800cd94:	4bad      	ldr	r3, [pc, #692]	@ (800d04c <_dtoa_r+0x5bc>)
 800cd96:	f007 020f 	and.w	r2, r7, #15
 800cd9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd9e:	ed93 7b00 	vldr	d7, [r3]
 800cda2:	05f8      	lsls	r0, r7, #23
 800cda4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cda8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cdac:	d516      	bpl.n	800cddc <_dtoa_r+0x34c>
 800cdae:	4ba8      	ldr	r3, [pc, #672]	@ (800d050 <_dtoa_r+0x5c0>)
 800cdb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cdb8:	f7f3 fd70 	bl	800089c <__aeabi_ddiv>
 800cdbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdc0:	f004 040f 	and.w	r4, r4, #15
 800cdc4:	2603      	movs	r6, #3
 800cdc6:	4da2      	ldr	r5, [pc, #648]	@ (800d050 <_dtoa_r+0x5c0>)
 800cdc8:	b954      	cbnz	r4, 800cde0 <_dtoa_r+0x350>
 800cdca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdd2:	f7f3 fd63 	bl	800089c <__aeabi_ddiv>
 800cdd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdda:	e028      	b.n	800ce2e <_dtoa_r+0x39e>
 800cddc:	2602      	movs	r6, #2
 800cdde:	e7f2      	b.n	800cdc6 <_dtoa_r+0x336>
 800cde0:	07e1      	lsls	r1, r4, #31
 800cde2:	d508      	bpl.n	800cdf6 <_dtoa_r+0x366>
 800cde4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cde8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cdec:	f7f3 fc2c 	bl	8000648 <__aeabi_dmul>
 800cdf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cdf4:	3601      	adds	r6, #1
 800cdf6:	1064      	asrs	r4, r4, #1
 800cdf8:	3508      	adds	r5, #8
 800cdfa:	e7e5      	b.n	800cdc8 <_dtoa_r+0x338>
 800cdfc:	f000 80d2 	beq.w	800cfa4 <_dtoa_r+0x514>
 800ce00:	427c      	negs	r4, r7
 800ce02:	4b92      	ldr	r3, [pc, #584]	@ (800d04c <_dtoa_r+0x5bc>)
 800ce04:	4d92      	ldr	r5, [pc, #584]	@ (800d050 <_dtoa_r+0x5c0>)
 800ce06:	f004 020f 	and.w	r2, r4, #15
 800ce0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce16:	f7f3 fc17 	bl	8000648 <__aeabi_dmul>
 800ce1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce1e:	1124      	asrs	r4, r4, #4
 800ce20:	2300      	movs	r3, #0
 800ce22:	2602      	movs	r6, #2
 800ce24:	2c00      	cmp	r4, #0
 800ce26:	f040 80b2 	bne.w	800cf8e <_dtoa_r+0x4fe>
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d1d3      	bne.n	800cdd6 <_dtoa_r+0x346>
 800ce2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ce30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f000 80b7 	beq.w	800cfa8 <_dtoa_r+0x518>
 800ce3a:	4b86      	ldr	r3, [pc, #536]	@ (800d054 <_dtoa_r+0x5c4>)
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	4620      	mov	r0, r4
 800ce40:	4629      	mov	r1, r5
 800ce42:	f7f3 fe73 	bl	8000b2c <__aeabi_dcmplt>
 800ce46:	2800      	cmp	r0, #0
 800ce48:	f000 80ae 	beq.w	800cfa8 <_dtoa_r+0x518>
 800ce4c:	9b07      	ldr	r3, [sp, #28]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f000 80aa 	beq.w	800cfa8 <_dtoa_r+0x518>
 800ce54:	9b00      	ldr	r3, [sp, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	dd37      	ble.n	800ceca <_dtoa_r+0x43a>
 800ce5a:	1e7b      	subs	r3, r7, #1
 800ce5c:	9304      	str	r3, [sp, #16]
 800ce5e:	4620      	mov	r0, r4
 800ce60:	4b7d      	ldr	r3, [pc, #500]	@ (800d058 <_dtoa_r+0x5c8>)
 800ce62:	2200      	movs	r2, #0
 800ce64:	4629      	mov	r1, r5
 800ce66:	f7f3 fbef 	bl	8000648 <__aeabi_dmul>
 800ce6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce6e:	9c00      	ldr	r4, [sp, #0]
 800ce70:	3601      	adds	r6, #1
 800ce72:	4630      	mov	r0, r6
 800ce74:	f7f3 fb7e 	bl	8000574 <__aeabi_i2d>
 800ce78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce7c:	f7f3 fbe4 	bl	8000648 <__aeabi_dmul>
 800ce80:	4b76      	ldr	r3, [pc, #472]	@ (800d05c <_dtoa_r+0x5cc>)
 800ce82:	2200      	movs	r2, #0
 800ce84:	f7f3 fa2a 	bl	80002dc <__adddf3>
 800ce88:	4605      	mov	r5, r0
 800ce8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ce8e:	2c00      	cmp	r4, #0
 800ce90:	f040 808d 	bne.w	800cfae <_dtoa_r+0x51e>
 800ce94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce98:	4b71      	ldr	r3, [pc, #452]	@ (800d060 <_dtoa_r+0x5d0>)
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f7f3 fa1c 	bl	80002d8 <__aeabi_dsub>
 800cea0:	4602      	mov	r2, r0
 800cea2:	460b      	mov	r3, r1
 800cea4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cea8:	462a      	mov	r2, r5
 800ceaa:	4633      	mov	r3, r6
 800ceac:	f7f3 fe5c 	bl	8000b68 <__aeabi_dcmpgt>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	f040 828b 	bne.w	800d3cc <_dtoa_r+0x93c>
 800ceb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ceba:	462a      	mov	r2, r5
 800cebc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cec0:	f7f3 fe34 	bl	8000b2c <__aeabi_dcmplt>
 800cec4:	2800      	cmp	r0, #0
 800cec6:	f040 8128 	bne.w	800d11a <_dtoa_r+0x68a>
 800ceca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cece:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ced2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	f2c0 815a 	blt.w	800d18e <_dtoa_r+0x6fe>
 800ceda:	2f0e      	cmp	r7, #14
 800cedc:	f300 8157 	bgt.w	800d18e <_dtoa_r+0x6fe>
 800cee0:	4b5a      	ldr	r3, [pc, #360]	@ (800d04c <_dtoa_r+0x5bc>)
 800cee2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cee6:	ed93 7b00 	vldr	d7, [r3]
 800ceea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	ed8d 7b00 	vstr	d7, [sp]
 800cef2:	da03      	bge.n	800cefc <_dtoa_r+0x46c>
 800cef4:	9b07      	ldr	r3, [sp, #28]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	f340 8101 	ble.w	800d0fe <_dtoa_r+0x66e>
 800cefc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cf00:	4656      	mov	r6, sl
 800cf02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf06:	4620      	mov	r0, r4
 800cf08:	4629      	mov	r1, r5
 800cf0a:	f7f3 fcc7 	bl	800089c <__aeabi_ddiv>
 800cf0e:	f7f3 fe4b 	bl	8000ba8 <__aeabi_d2iz>
 800cf12:	4680      	mov	r8, r0
 800cf14:	f7f3 fb2e 	bl	8000574 <__aeabi_i2d>
 800cf18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf1c:	f7f3 fb94 	bl	8000648 <__aeabi_dmul>
 800cf20:	4602      	mov	r2, r0
 800cf22:	460b      	mov	r3, r1
 800cf24:	4620      	mov	r0, r4
 800cf26:	4629      	mov	r1, r5
 800cf28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cf2c:	f7f3 f9d4 	bl	80002d8 <__aeabi_dsub>
 800cf30:	f806 4b01 	strb.w	r4, [r6], #1
 800cf34:	9d07      	ldr	r5, [sp, #28]
 800cf36:	eba6 040a 	sub.w	r4, r6, sl
 800cf3a:	42a5      	cmp	r5, r4
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	460b      	mov	r3, r1
 800cf40:	f040 8117 	bne.w	800d172 <_dtoa_r+0x6e2>
 800cf44:	f7f3 f9ca 	bl	80002dc <__adddf3>
 800cf48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf4c:	4604      	mov	r4, r0
 800cf4e:	460d      	mov	r5, r1
 800cf50:	f7f3 fe0a 	bl	8000b68 <__aeabi_dcmpgt>
 800cf54:	2800      	cmp	r0, #0
 800cf56:	f040 80f9 	bne.w	800d14c <_dtoa_r+0x6bc>
 800cf5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf5e:	4620      	mov	r0, r4
 800cf60:	4629      	mov	r1, r5
 800cf62:	f7f3 fdd9 	bl	8000b18 <__aeabi_dcmpeq>
 800cf66:	b118      	cbz	r0, 800cf70 <_dtoa_r+0x4e0>
 800cf68:	f018 0f01 	tst.w	r8, #1
 800cf6c:	f040 80ee 	bne.w	800d14c <_dtoa_r+0x6bc>
 800cf70:	4649      	mov	r1, r9
 800cf72:	4658      	mov	r0, fp
 800cf74:	f000 ffdc 	bl	800df30 <_Bfree>
 800cf78:	2300      	movs	r3, #0
 800cf7a:	7033      	strb	r3, [r6, #0]
 800cf7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cf7e:	3701      	adds	r7, #1
 800cf80:	601f      	str	r7, [r3, #0]
 800cf82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	f000 831d 	beq.w	800d5c4 <_dtoa_r+0xb34>
 800cf8a:	601e      	str	r6, [r3, #0]
 800cf8c:	e31a      	b.n	800d5c4 <_dtoa_r+0xb34>
 800cf8e:	07e2      	lsls	r2, r4, #31
 800cf90:	d505      	bpl.n	800cf9e <_dtoa_r+0x50e>
 800cf92:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cf96:	f7f3 fb57 	bl	8000648 <__aeabi_dmul>
 800cf9a:	3601      	adds	r6, #1
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	1064      	asrs	r4, r4, #1
 800cfa0:	3508      	adds	r5, #8
 800cfa2:	e73f      	b.n	800ce24 <_dtoa_r+0x394>
 800cfa4:	2602      	movs	r6, #2
 800cfa6:	e742      	b.n	800ce2e <_dtoa_r+0x39e>
 800cfa8:	9c07      	ldr	r4, [sp, #28]
 800cfaa:	9704      	str	r7, [sp, #16]
 800cfac:	e761      	b.n	800ce72 <_dtoa_r+0x3e2>
 800cfae:	4b27      	ldr	r3, [pc, #156]	@ (800d04c <_dtoa_r+0x5bc>)
 800cfb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cfb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cfb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cfba:	4454      	add	r4, sl
 800cfbc:	2900      	cmp	r1, #0
 800cfbe:	d053      	beq.n	800d068 <_dtoa_r+0x5d8>
 800cfc0:	4928      	ldr	r1, [pc, #160]	@ (800d064 <_dtoa_r+0x5d4>)
 800cfc2:	2000      	movs	r0, #0
 800cfc4:	f7f3 fc6a 	bl	800089c <__aeabi_ddiv>
 800cfc8:	4633      	mov	r3, r6
 800cfca:	462a      	mov	r2, r5
 800cfcc:	f7f3 f984 	bl	80002d8 <__aeabi_dsub>
 800cfd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cfd4:	4656      	mov	r6, sl
 800cfd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfda:	f7f3 fde5 	bl	8000ba8 <__aeabi_d2iz>
 800cfde:	4605      	mov	r5, r0
 800cfe0:	f7f3 fac8 	bl	8000574 <__aeabi_i2d>
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	460b      	mov	r3, r1
 800cfe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfec:	f7f3 f974 	bl	80002d8 <__aeabi_dsub>
 800cff0:	3530      	adds	r5, #48	@ 0x30
 800cff2:	4602      	mov	r2, r0
 800cff4:	460b      	mov	r3, r1
 800cff6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cffa:	f806 5b01 	strb.w	r5, [r6], #1
 800cffe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d002:	f7f3 fd93 	bl	8000b2c <__aeabi_dcmplt>
 800d006:	2800      	cmp	r0, #0
 800d008:	d171      	bne.n	800d0ee <_dtoa_r+0x65e>
 800d00a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d00e:	4911      	ldr	r1, [pc, #68]	@ (800d054 <_dtoa_r+0x5c4>)
 800d010:	2000      	movs	r0, #0
 800d012:	f7f3 f961 	bl	80002d8 <__aeabi_dsub>
 800d016:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d01a:	f7f3 fd87 	bl	8000b2c <__aeabi_dcmplt>
 800d01e:	2800      	cmp	r0, #0
 800d020:	f040 8095 	bne.w	800d14e <_dtoa_r+0x6be>
 800d024:	42a6      	cmp	r6, r4
 800d026:	f43f af50 	beq.w	800ceca <_dtoa_r+0x43a>
 800d02a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d02e:	4b0a      	ldr	r3, [pc, #40]	@ (800d058 <_dtoa_r+0x5c8>)
 800d030:	2200      	movs	r2, #0
 800d032:	f7f3 fb09 	bl	8000648 <__aeabi_dmul>
 800d036:	4b08      	ldr	r3, [pc, #32]	@ (800d058 <_dtoa_r+0x5c8>)
 800d038:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d03c:	2200      	movs	r2, #0
 800d03e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d042:	f7f3 fb01 	bl	8000648 <__aeabi_dmul>
 800d046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d04a:	e7c4      	b.n	800cfd6 <_dtoa_r+0x546>
 800d04c:	0800f930 	.word	0x0800f930
 800d050:	0800f908 	.word	0x0800f908
 800d054:	3ff00000 	.word	0x3ff00000
 800d058:	40240000 	.word	0x40240000
 800d05c:	401c0000 	.word	0x401c0000
 800d060:	40140000 	.word	0x40140000
 800d064:	3fe00000 	.word	0x3fe00000
 800d068:	4631      	mov	r1, r6
 800d06a:	4628      	mov	r0, r5
 800d06c:	f7f3 faec 	bl	8000648 <__aeabi_dmul>
 800d070:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d074:	9415      	str	r4, [sp, #84]	@ 0x54
 800d076:	4656      	mov	r6, sl
 800d078:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d07c:	f7f3 fd94 	bl	8000ba8 <__aeabi_d2iz>
 800d080:	4605      	mov	r5, r0
 800d082:	f7f3 fa77 	bl	8000574 <__aeabi_i2d>
 800d086:	4602      	mov	r2, r0
 800d088:	460b      	mov	r3, r1
 800d08a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d08e:	f7f3 f923 	bl	80002d8 <__aeabi_dsub>
 800d092:	3530      	adds	r5, #48	@ 0x30
 800d094:	f806 5b01 	strb.w	r5, [r6], #1
 800d098:	4602      	mov	r2, r0
 800d09a:	460b      	mov	r3, r1
 800d09c:	42a6      	cmp	r6, r4
 800d09e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d0a2:	f04f 0200 	mov.w	r2, #0
 800d0a6:	d124      	bne.n	800d0f2 <_dtoa_r+0x662>
 800d0a8:	4bac      	ldr	r3, [pc, #688]	@ (800d35c <_dtoa_r+0x8cc>)
 800d0aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d0ae:	f7f3 f915 	bl	80002dc <__adddf3>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0ba:	f7f3 fd55 	bl	8000b68 <__aeabi_dcmpgt>
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d145      	bne.n	800d14e <_dtoa_r+0x6be>
 800d0c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d0c6:	49a5      	ldr	r1, [pc, #660]	@ (800d35c <_dtoa_r+0x8cc>)
 800d0c8:	2000      	movs	r0, #0
 800d0ca:	f7f3 f905 	bl	80002d8 <__aeabi_dsub>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0d6:	f7f3 fd29 	bl	8000b2c <__aeabi_dcmplt>
 800d0da:	2800      	cmp	r0, #0
 800d0dc:	f43f aef5 	beq.w	800ceca <_dtoa_r+0x43a>
 800d0e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d0e2:	1e73      	subs	r3, r6, #1
 800d0e4:	9315      	str	r3, [sp, #84]	@ 0x54
 800d0e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d0ea:	2b30      	cmp	r3, #48	@ 0x30
 800d0ec:	d0f8      	beq.n	800d0e0 <_dtoa_r+0x650>
 800d0ee:	9f04      	ldr	r7, [sp, #16]
 800d0f0:	e73e      	b.n	800cf70 <_dtoa_r+0x4e0>
 800d0f2:	4b9b      	ldr	r3, [pc, #620]	@ (800d360 <_dtoa_r+0x8d0>)
 800d0f4:	f7f3 faa8 	bl	8000648 <__aeabi_dmul>
 800d0f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0fc:	e7bc      	b.n	800d078 <_dtoa_r+0x5e8>
 800d0fe:	d10c      	bne.n	800d11a <_dtoa_r+0x68a>
 800d100:	4b98      	ldr	r3, [pc, #608]	@ (800d364 <_dtoa_r+0x8d4>)
 800d102:	2200      	movs	r2, #0
 800d104:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d108:	f7f3 fa9e 	bl	8000648 <__aeabi_dmul>
 800d10c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d110:	f7f3 fd20 	bl	8000b54 <__aeabi_dcmpge>
 800d114:	2800      	cmp	r0, #0
 800d116:	f000 8157 	beq.w	800d3c8 <_dtoa_r+0x938>
 800d11a:	2400      	movs	r4, #0
 800d11c:	4625      	mov	r5, r4
 800d11e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d120:	43db      	mvns	r3, r3
 800d122:	9304      	str	r3, [sp, #16]
 800d124:	4656      	mov	r6, sl
 800d126:	2700      	movs	r7, #0
 800d128:	4621      	mov	r1, r4
 800d12a:	4658      	mov	r0, fp
 800d12c:	f000 ff00 	bl	800df30 <_Bfree>
 800d130:	2d00      	cmp	r5, #0
 800d132:	d0dc      	beq.n	800d0ee <_dtoa_r+0x65e>
 800d134:	b12f      	cbz	r7, 800d142 <_dtoa_r+0x6b2>
 800d136:	42af      	cmp	r7, r5
 800d138:	d003      	beq.n	800d142 <_dtoa_r+0x6b2>
 800d13a:	4639      	mov	r1, r7
 800d13c:	4658      	mov	r0, fp
 800d13e:	f000 fef7 	bl	800df30 <_Bfree>
 800d142:	4629      	mov	r1, r5
 800d144:	4658      	mov	r0, fp
 800d146:	f000 fef3 	bl	800df30 <_Bfree>
 800d14a:	e7d0      	b.n	800d0ee <_dtoa_r+0x65e>
 800d14c:	9704      	str	r7, [sp, #16]
 800d14e:	4633      	mov	r3, r6
 800d150:	461e      	mov	r6, r3
 800d152:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d156:	2a39      	cmp	r2, #57	@ 0x39
 800d158:	d107      	bne.n	800d16a <_dtoa_r+0x6da>
 800d15a:	459a      	cmp	sl, r3
 800d15c:	d1f8      	bne.n	800d150 <_dtoa_r+0x6c0>
 800d15e:	9a04      	ldr	r2, [sp, #16]
 800d160:	3201      	adds	r2, #1
 800d162:	9204      	str	r2, [sp, #16]
 800d164:	2230      	movs	r2, #48	@ 0x30
 800d166:	f88a 2000 	strb.w	r2, [sl]
 800d16a:	781a      	ldrb	r2, [r3, #0]
 800d16c:	3201      	adds	r2, #1
 800d16e:	701a      	strb	r2, [r3, #0]
 800d170:	e7bd      	b.n	800d0ee <_dtoa_r+0x65e>
 800d172:	4b7b      	ldr	r3, [pc, #492]	@ (800d360 <_dtoa_r+0x8d0>)
 800d174:	2200      	movs	r2, #0
 800d176:	f7f3 fa67 	bl	8000648 <__aeabi_dmul>
 800d17a:	2200      	movs	r2, #0
 800d17c:	2300      	movs	r3, #0
 800d17e:	4604      	mov	r4, r0
 800d180:	460d      	mov	r5, r1
 800d182:	f7f3 fcc9 	bl	8000b18 <__aeabi_dcmpeq>
 800d186:	2800      	cmp	r0, #0
 800d188:	f43f aebb 	beq.w	800cf02 <_dtoa_r+0x472>
 800d18c:	e6f0      	b.n	800cf70 <_dtoa_r+0x4e0>
 800d18e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d190:	2a00      	cmp	r2, #0
 800d192:	f000 80db 	beq.w	800d34c <_dtoa_r+0x8bc>
 800d196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d198:	2a01      	cmp	r2, #1
 800d19a:	f300 80bf 	bgt.w	800d31c <_dtoa_r+0x88c>
 800d19e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d1a0:	2a00      	cmp	r2, #0
 800d1a2:	f000 80b7 	beq.w	800d314 <_dtoa_r+0x884>
 800d1a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d1aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d1ac:	4646      	mov	r6, r8
 800d1ae:	9a08      	ldr	r2, [sp, #32]
 800d1b0:	2101      	movs	r1, #1
 800d1b2:	441a      	add	r2, r3
 800d1b4:	4658      	mov	r0, fp
 800d1b6:	4498      	add	r8, r3
 800d1b8:	9208      	str	r2, [sp, #32]
 800d1ba:	f000 ffb7 	bl	800e12c <__i2b>
 800d1be:	4605      	mov	r5, r0
 800d1c0:	b15e      	cbz	r6, 800d1da <_dtoa_r+0x74a>
 800d1c2:	9b08      	ldr	r3, [sp, #32]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	dd08      	ble.n	800d1da <_dtoa_r+0x74a>
 800d1c8:	42b3      	cmp	r3, r6
 800d1ca:	9a08      	ldr	r2, [sp, #32]
 800d1cc:	bfa8      	it	ge
 800d1ce:	4633      	movge	r3, r6
 800d1d0:	eba8 0803 	sub.w	r8, r8, r3
 800d1d4:	1af6      	subs	r6, r6, r3
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	9308      	str	r3, [sp, #32]
 800d1da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1dc:	b1f3      	cbz	r3, 800d21c <_dtoa_r+0x78c>
 800d1de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	f000 80b7 	beq.w	800d354 <_dtoa_r+0x8c4>
 800d1e6:	b18c      	cbz	r4, 800d20c <_dtoa_r+0x77c>
 800d1e8:	4629      	mov	r1, r5
 800d1ea:	4622      	mov	r2, r4
 800d1ec:	4658      	mov	r0, fp
 800d1ee:	f001 f85d 	bl	800e2ac <__pow5mult>
 800d1f2:	464a      	mov	r2, r9
 800d1f4:	4601      	mov	r1, r0
 800d1f6:	4605      	mov	r5, r0
 800d1f8:	4658      	mov	r0, fp
 800d1fa:	f000 ffad 	bl	800e158 <__multiply>
 800d1fe:	4649      	mov	r1, r9
 800d200:	9004      	str	r0, [sp, #16]
 800d202:	4658      	mov	r0, fp
 800d204:	f000 fe94 	bl	800df30 <_Bfree>
 800d208:	9b04      	ldr	r3, [sp, #16]
 800d20a:	4699      	mov	r9, r3
 800d20c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d20e:	1b1a      	subs	r2, r3, r4
 800d210:	d004      	beq.n	800d21c <_dtoa_r+0x78c>
 800d212:	4649      	mov	r1, r9
 800d214:	4658      	mov	r0, fp
 800d216:	f001 f849 	bl	800e2ac <__pow5mult>
 800d21a:	4681      	mov	r9, r0
 800d21c:	2101      	movs	r1, #1
 800d21e:	4658      	mov	r0, fp
 800d220:	f000 ff84 	bl	800e12c <__i2b>
 800d224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d226:	4604      	mov	r4, r0
 800d228:	2b00      	cmp	r3, #0
 800d22a:	f000 81cf 	beq.w	800d5cc <_dtoa_r+0xb3c>
 800d22e:	461a      	mov	r2, r3
 800d230:	4601      	mov	r1, r0
 800d232:	4658      	mov	r0, fp
 800d234:	f001 f83a 	bl	800e2ac <__pow5mult>
 800d238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	4604      	mov	r4, r0
 800d23e:	f300 8095 	bgt.w	800d36c <_dtoa_r+0x8dc>
 800d242:	9b02      	ldr	r3, [sp, #8]
 800d244:	2b00      	cmp	r3, #0
 800d246:	f040 8087 	bne.w	800d358 <_dtoa_r+0x8c8>
 800d24a:	9b03      	ldr	r3, [sp, #12]
 800d24c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d250:	2b00      	cmp	r3, #0
 800d252:	f040 8089 	bne.w	800d368 <_dtoa_r+0x8d8>
 800d256:	9b03      	ldr	r3, [sp, #12]
 800d258:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d25c:	0d1b      	lsrs	r3, r3, #20
 800d25e:	051b      	lsls	r3, r3, #20
 800d260:	b12b      	cbz	r3, 800d26e <_dtoa_r+0x7de>
 800d262:	9b08      	ldr	r3, [sp, #32]
 800d264:	3301      	adds	r3, #1
 800d266:	9308      	str	r3, [sp, #32]
 800d268:	f108 0801 	add.w	r8, r8, #1
 800d26c:	2301      	movs	r3, #1
 800d26e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d270:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d272:	2b00      	cmp	r3, #0
 800d274:	f000 81b0 	beq.w	800d5d8 <_dtoa_r+0xb48>
 800d278:	6923      	ldr	r3, [r4, #16]
 800d27a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d27e:	6918      	ldr	r0, [r3, #16]
 800d280:	f000 ff08 	bl	800e094 <__hi0bits>
 800d284:	f1c0 0020 	rsb	r0, r0, #32
 800d288:	9b08      	ldr	r3, [sp, #32]
 800d28a:	4418      	add	r0, r3
 800d28c:	f010 001f 	ands.w	r0, r0, #31
 800d290:	d077      	beq.n	800d382 <_dtoa_r+0x8f2>
 800d292:	f1c0 0320 	rsb	r3, r0, #32
 800d296:	2b04      	cmp	r3, #4
 800d298:	dd6b      	ble.n	800d372 <_dtoa_r+0x8e2>
 800d29a:	9b08      	ldr	r3, [sp, #32]
 800d29c:	f1c0 001c 	rsb	r0, r0, #28
 800d2a0:	4403      	add	r3, r0
 800d2a2:	4480      	add	r8, r0
 800d2a4:	4406      	add	r6, r0
 800d2a6:	9308      	str	r3, [sp, #32]
 800d2a8:	f1b8 0f00 	cmp.w	r8, #0
 800d2ac:	dd05      	ble.n	800d2ba <_dtoa_r+0x82a>
 800d2ae:	4649      	mov	r1, r9
 800d2b0:	4642      	mov	r2, r8
 800d2b2:	4658      	mov	r0, fp
 800d2b4:	f001 f854 	bl	800e360 <__lshift>
 800d2b8:	4681      	mov	r9, r0
 800d2ba:	9b08      	ldr	r3, [sp, #32]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	dd05      	ble.n	800d2cc <_dtoa_r+0x83c>
 800d2c0:	4621      	mov	r1, r4
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	4658      	mov	r0, fp
 800d2c6:	f001 f84b 	bl	800e360 <__lshift>
 800d2ca:	4604      	mov	r4, r0
 800d2cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d059      	beq.n	800d386 <_dtoa_r+0x8f6>
 800d2d2:	4621      	mov	r1, r4
 800d2d4:	4648      	mov	r0, r9
 800d2d6:	f001 f8af 	bl	800e438 <__mcmp>
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	da53      	bge.n	800d386 <_dtoa_r+0x8f6>
 800d2de:	1e7b      	subs	r3, r7, #1
 800d2e0:	9304      	str	r3, [sp, #16]
 800d2e2:	4649      	mov	r1, r9
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	220a      	movs	r2, #10
 800d2e8:	4658      	mov	r0, fp
 800d2ea:	f000 fe43 	bl	800df74 <__multadd>
 800d2ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2f0:	4681      	mov	r9, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	f000 8172 	beq.w	800d5dc <_dtoa_r+0xb4c>
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	4629      	mov	r1, r5
 800d2fc:	220a      	movs	r2, #10
 800d2fe:	4658      	mov	r0, fp
 800d300:	f000 fe38 	bl	800df74 <__multadd>
 800d304:	9b00      	ldr	r3, [sp, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	4605      	mov	r5, r0
 800d30a:	dc67      	bgt.n	800d3dc <_dtoa_r+0x94c>
 800d30c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d30e:	2b02      	cmp	r3, #2
 800d310:	dc41      	bgt.n	800d396 <_dtoa_r+0x906>
 800d312:	e063      	b.n	800d3dc <_dtoa_r+0x94c>
 800d314:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d316:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d31a:	e746      	b.n	800d1aa <_dtoa_r+0x71a>
 800d31c:	9b07      	ldr	r3, [sp, #28]
 800d31e:	1e5c      	subs	r4, r3, #1
 800d320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d322:	42a3      	cmp	r3, r4
 800d324:	bfbf      	itttt	lt
 800d326:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d328:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d32a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d32c:	1ae3      	sublt	r3, r4, r3
 800d32e:	bfb4      	ite	lt
 800d330:	18d2      	addlt	r2, r2, r3
 800d332:	1b1c      	subge	r4, r3, r4
 800d334:	9b07      	ldr	r3, [sp, #28]
 800d336:	bfbc      	itt	lt
 800d338:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d33a:	2400      	movlt	r4, #0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	bfb5      	itete	lt
 800d340:	eba8 0603 	sublt.w	r6, r8, r3
 800d344:	9b07      	ldrge	r3, [sp, #28]
 800d346:	2300      	movlt	r3, #0
 800d348:	4646      	movge	r6, r8
 800d34a:	e730      	b.n	800d1ae <_dtoa_r+0x71e>
 800d34c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d34e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d350:	4646      	mov	r6, r8
 800d352:	e735      	b.n	800d1c0 <_dtoa_r+0x730>
 800d354:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d356:	e75c      	b.n	800d212 <_dtoa_r+0x782>
 800d358:	2300      	movs	r3, #0
 800d35a:	e788      	b.n	800d26e <_dtoa_r+0x7de>
 800d35c:	3fe00000 	.word	0x3fe00000
 800d360:	40240000 	.word	0x40240000
 800d364:	40140000 	.word	0x40140000
 800d368:	9b02      	ldr	r3, [sp, #8]
 800d36a:	e780      	b.n	800d26e <_dtoa_r+0x7de>
 800d36c:	2300      	movs	r3, #0
 800d36e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d370:	e782      	b.n	800d278 <_dtoa_r+0x7e8>
 800d372:	d099      	beq.n	800d2a8 <_dtoa_r+0x818>
 800d374:	9a08      	ldr	r2, [sp, #32]
 800d376:	331c      	adds	r3, #28
 800d378:	441a      	add	r2, r3
 800d37a:	4498      	add	r8, r3
 800d37c:	441e      	add	r6, r3
 800d37e:	9208      	str	r2, [sp, #32]
 800d380:	e792      	b.n	800d2a8 <_dtoa_r+0x818>
 800d382:	4603      	mov	r3, r0
 800d384:	e7f6      	b.n	800d374 <_dtoa_r+0x8e4>
 800d386:	9b07      	ldr	r3, [sp, #28]
 800d388:	9704      	str	r7, [sp, #16]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	dc20      	bgt.n	800d3d0 <_dtoa_r+0x940>
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d392:	2b02      	cmp	r3, #2
 800d394:	dd1e      	ble.n	800d3d4 <_dtoa_r+0x944>
 800d396:	9b00      	ldr	r3, [sp, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	f47f aec0 	bne.w	800d11e <_dtoa_r+0x68e>
 800d39e:	4621      	mov	r1, r4
 800d3a0:	2205      	movs	r2, #5
 800d3a2:	4658      	mov	r0, fp
 800d3a4:	f000 fde6 	bl	800df74 <__multadd>
 800d3a8:	4601      	mov	r1, r0
 800d3aa:	4604      	mov	r4, r0
 800d3ac:	4648      	mov	r0, r9
 800d3ae:	f001 f843 	bl	800e438 <__mcmp>
 800d3b2:	2800      	cmp	r0, #0
 800d3b4:	f77f aeb3 	ble.w	800d11e <_dtoa_r+0x68e>
 800d3b8:	4656      	mov	r6, sl
 800d3ba:	2331      	movs	r3, #49	@ 0x31
 800d3bc:	f806 3b01 	strb.w	r3, [r6], #1
 800d3c0:	9b04      	ldr	r3, [sp, #16]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	9304      	str	r3, [sp, #16]
 800d3c6:	e6ae      	b.n	800d126 <_dtoa_r+0x696>
 800d3c8:	9c07      	ldr	r4, [sp, #28]
 800d3ca:	9704      	str	r7, [sp, #16]
 800d3cc:	4625      	mov	r5, r4
 800d3ce:	e7f3      	b.n	800d3b8 <_dtoa_r+0x928>
 800d3d0:	9b07      	ldr	r3, [sp, #28]
 800d3d2:	9300      	str	r3, [sp, #0]
 800d3d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f000 8104 	beq.w	800d5e4 <_dtoa_r+0xb54>
 800d3dc:	2e00      	cmp	r6, #0
 800d3de:	dd05      	ble.n	800d3ec <_dtoa_r+0x95c>
 800d3e0:	4629      	mov	r1, r5
 800d3e2:	4632      	mov	r2, r6
 800d3e4:	4658      	mov	r0, fp
 800d3e6:	f000 ffbb 	bl	800e360 <__lshift>
 800d3ea:	4605      	mov	r5, r0
 800d3ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d05a      	beq.n	800d4a8 <_dtoa_r+0xa18>
 800d3f2:	6869      	ldr	r1, [r5, #4]
 800d3f4:	4658      	mov	r0, fp
 800d3f6:	f000 fd5b 	bl	800deb0 <_Balloc>
 800d3fa:	4606      	mov	r6, r0
 800d3fc:	b928      	cbnz	r0, 800d40a <_dtoa_r+0x97a>
 800d3fe:	4b84      	ldr	r3, [pc, #528]	@ (800d610 <_dtoa_r+0xb80>)
 800d400:	4602      	mov	r2, r0
 800d402:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d406:	f7ff bb5a 	b.w	800cabe <_dtoa_r+0x2e>
 800d40a:	692a      	ldr	r2, [r5, #16]
 800d40c:	3202      	adds	r2, #2
 800d40e:	0092      	lsls	r2, r2, #2
 800d410:	f105 010c 	add.w	r1, r5, #12
 800d414:	300c      	adds	r0, #12
 800d416:	f7ff fa92 	bl	800c93e <memcpy>
 800d41a:	2201      	movs	r2, #1
 800d41c:	4631      	mov	r1, r6
 800d41e:	4658      	mov	r0, fp
 800d420:	f000 ff9e 	bl	800e360 <__lshift>
 800d424:	f10a 0301 	add.w	r3, sl, #1
 800d428:	9307      	str	r3, [sp, #28]
 800d42a:	9b00      	ldr	r3, [sp, #0]
 800d42c:	4453      	add	r3, sl
 800d42e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d430:	9b02      	ldr	r3, [sp, #8]
 800d432:	f003 0301 	and.w	r3, r3, #1
 800d436:	462f      	mov	r7, r5
 800d438:	930a      	str	r3, [sp, #40]	@ 0x28
 800d43a:	4605      	mov	r5, r0
 800d43c:	9b07      	ldr	r3, [sp, #28]
 800d43e:	4621      	mov	r1, r4
 800d440:	3b01      	subs	r3, #1
 800d442:	4648      	mov	r0, r9
 800d444:	9300      	str	r3, [sp, #0]
 800d446:	f7ff fa99 	bl	800c97c <quorem>
 800d44a:	4639      	mov	r1, r7
 800d44c:	9002      	str	r0, [sp, #8]
 800d44e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d452:	4648      	mov	r0, r9
 800d454:	f000 fff0 	bl	800e438 <__mcmp>
 800d458:	462a      	mov	r2, r5
 800d45a:	9008      	str	r0, [sp, #32]
 800d45c:	4621      	mov	r1, r4
 800d45e:	4658      	mov	r0, fp
 800d460:	f001 f806 	bl	800e470 <__mdiff>
 800d464:	68c2      	ldr	r2, [r0, #12]
 800d466:	4606      	mov	r6, r0
 800d468:	bb02      	cbnz	r2, 800d4ac <_dtoa_r+0xa1c>
 800d46a:	4601      	mov	r1, r0
 800d46c:	4648      	mov	r0, r9
 800d46e:	f000 ffe3 	bl	800e438 <__mcmp>
 800d472:	4602      	mov	r2, r0
 800d474:	4631      	mov	r1, r6
 800d476:	4658      	mov	r0, fp
 800d478:	920e      	str	r2, [sp, #56]	@ 0x38
 800d47a:	f000 fd59 	bl	800df30 <_Bfree>
 800d47e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d480:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d482:	9e07      	ldr	r6, [sp, #28]
 800d484:	ea43 0102 	orr.w	r1, r3, r2
 800d488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d48a:	4319      	orrs	r1, r3
 800d48c:	d110      	bne.n	800d4b0 <_dtoa_r+0xa20>
 800d48e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d492:	d029      	beq.n	800d4e8 <_dtoa_r+0xa58>
 800d494:	9b08      	ldr	r3, [sp, #32]
 800d496:	2b00      	cmp	r3, #0
 800d498:	dd02      	ble.n	800d4a0 <_dtoa_r+0xa10>
 800d49a:	9b02      	ldr	r3, [sp, #8]
 800d49c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d4a0:	9b00      	ldr	r3, [sp, #0]
 800d4a2:	f883 8000 	strb.w	r8, [r3]
 800d4a6:	e63f      	b.n	800d128 <_dtoa_r+0x698>
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	e7bb      	b.n	800d424 <_dtoa_r+0x994>
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	e7e1      	b.n	800d474 <_dtoa_r+0x9e4>
 800d4b0:	9b08      	ldr	r3, [sp, #32]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	db04      	blt.n	800d4c0 <_dtoa_r+0xa30>
 800d4b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d4b8:	430b      	orrs	r3, r1
 800d4ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4bc:	430b      	orrs	r3, r1
 800d4be:	d120      	bne.n	800d502 <_dtoa_r+0xa72>
 800d4c0:	2a00      	cmp	r2, #0
 800d4c2:	dded      	ble.n	800d4a0 <_dtoa_r+0xa10>
 800d4c4:	4649      	mov	r1, r9
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	4658      	mov	r0, fp
 800d4ca:	f000 ff49 	bl	800e360 <__lshift>
 800d4ce:	4621      	mov	r1, r4
 800d4d0:	4681      	mov	r9, r0
 800d4d2:	f000 ffb1 	bl	800e438 <__mcmp>
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	dc03      	bgt.n	800d4e2 <_dtoa_r+0xa52>
 800d4da:	d1e1      	bne.n	800d4a0 <_dtoa_r+0xa10>
 800d4dc:	f018 0f01 	tst.w	r8, #1
 800d4e0:	d0de      	beq.n	800d4a0 <_dtoa_r+0xa10>
 800d4e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d4e6:	d1d8      	bne.n	800d49a <_dtoa_r+0xa0a>
 800d4e8:	9a00      	ldr	r2, [sp, #0]
 800d4ea:	2339      	movs	r3, #57	@ 0x39
 800d4ec:	7013      	strb	r3, [r2, #0]
 800d4ee:	4633      	mov	r3, r6
 800d4f0:	461e      	mov	r6, r3
 800d4f2:	3b01      	subs	r3, #1
 800d4f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d4f8:	2a39      	cmp	r2, #57	@ 0x39
 800d4fa:	d052      	beq.n	800d5a2 <_dtoa_r+0xb12>
 800d4fc:	3201      	adds	r2, #1
 800d4fe:	701a      	strb	r2, [r3, #0]
 800d500:	e612      	b.n	800d128 <_dtoa_r+0x698>
 800d502:	2a00      	cmp	r2, #0
 800d504:	dd07      	ble.n	800d516 <_dtoa_r+0xa86>
 800d506:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d50a:	d0ed      	beq.n	800d4e8 <_dtoa_r+0xa58>
 800d50c:	9a00      	ldr	r2, [sp, #0]
 800d50e:	f108 0301 	add.w	r3, r8, #1
 800d512:	7013      	strb	r3, [r2, #0]
 800d514:	e608      	b.n	800d128 <_dtoa_r+0x698>
 800d516:	9b07      	ldr	r3, [sp, #28]
 800d518:	9a07      	ldr	r2, [sp, #28]
 800d51a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d51e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d520:	4293      	cmp	r3, r2
 800d522:	d028      	beq.n	800d576 <_dtoa_r+0xae6>
 800d524:	4649      	mov	r1, r9
 800d526:	2300      	movs	r3, #0
 800d528:	220a      	movs	r2, #10
 800d52a:	4658      	mov	r0, fp
 800d52c:	f000 fd22 	bl	800df74 <__multadd>
 800d530:	42af      	cmp	r7, r5
 800d532:	4681      	mov	r9, r0
 800d534:	f04f 0300 	mov.w	r3, #0
 800d538:	f04f 020a 	mov.w	r2, #10
 800d53c:	4639      	mov	r1, r7
 800d53e:	4658      	mov	r0, fp
 800d540:	d107      	bne.n	800d552 <_dtoa_r+0xac2>
 800d542:	f000 fd17 	bl	800df74 <__multadd>
 800d546:	4607      	mov	r7, r0
 800d548:	4605      	mov	r5, r0
 800d54a:	9b07      	ldr	r3, [sp, #28]
 800d54c:	3301      	adds	r3, #1
 800d54e:	9307      	str	r3, [sp, #28]
 800d550:	e774      	b.n	800d43c <_dtoa_r+0x9ac>
 800d552:	f000 fd0f 	bl	800df74 <__multadd>
 800d556:	4629      	mov	r1, r5
 800d558:	4607      	mov	r7, r0
 800d55a:	2300      	movs	r3, #0
 800d55c:	220a      	movs	r2, #10
 800d55e:	4658      	mov	r0, fp
 800d560:	f000 fd08 	bl	800df74 <__multadd>
 800d564:	4605      	mov	r5, r0
 800d566:	e7f0      	b.n	800d54a <_dtoa_r+0xaba>
 800d568:	9b00      	ldr	r3, [sp, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	bfcc      	ite	gt
 800d56e:	461e      	movgt	r6, r3
 800d570:	2601      	movle	r6, #1
 800d572:	4456      	add	r6, sl
 800d574:	2700      	movs	r7, #0
 800d576:	4649      	mov	r1, r9
 800d578:	2201      	movs	r2, #1
 800d57a:	4658      	mov	r0, fp
 800d57c:	f000 fef0 	bl	800e360 <__lshift>
 800d580:	4621      	mov	r1, r4
 800d582:	4681      	mov	r9, r0
 800d584:	f000 ff58 	bl	800e438 <__mcmp>
 800d588:	2800      	cmp	r0, #0
 800d58a:	dcb0      	bgt.n	800d4ee <_dtoa_r+0xa5e>
 800d58c:	d102      	bne.n	800d594 <_dtoa_r+0xb04>
 800d58e:	f018 0f01 	tst.w	r8, #1
 800d592:	d1ac      	bne.n	800d4ee <_dtoa_r+0xa5e>
 800d594:	4633      	mov	r3, r6
 800d596:	461e      	mov	r6, r3
 800d598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d59c:	2a30      	cmp	r2, #48	@ 0x30
 800d59e:	d0fa      	beq.n	800d596 <_dtoa_r+0xb06>
 800d5a0:	e5c2      	b.n	800d128 <_dtoa_r+0x698>
 800d5a2:	459a      	cmp	sl, r3
 800d5a4:	d1a4      	bne.n	800d4f0 <_dtoa_r+0xa60>
 800d5a6:	9b04      	ldr	r3, [sp, #16]
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	9304      	str	r3, [sp, #16]
 800d5ac:	2331      	movs	r3, #49	@ 0x31
 800d5ae:	f88a 3000 	strb.w	r3, [sl]
 800d5b2:	e5b9      	b.n	800d128 <_dtoa_r+0x698>
 800d5b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d5b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d614 <_dtoa_r+0xb84>
 800d5ba:	b11b      	cbz	r3, 800d5c4 <_dtoa_r+0xb34>
 800d5bc:	f10a 0308 	add.w	r3, sl, #8
 800d5c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d5c2:	6013      	str	r3, [r2, #0]
 800d5c4:	4650      	mov	r0, sl
 800d5c6:	b019      	add	sp, #100	@ 0x64
 800d5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	f77f ae37 	ble.w	800d242 <_dtoa_r+0x7b2>
 800d5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5d8:	2001      	movs	r0, #1
 800d5da:	e655      	b.n	800d288 <_dtoa_r+0x7f8>
 800d5dc:	9b00      	ldr	r3, [sp, #0]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	f77f aed6 	ble.w	800d390 <_dtoa_r+0x900>
 800d5e4:	4656      	mov	r6, sl
 800d5e6:	4621      	mov	r1, r4
 800d5e8:	4648      	mov	r0, r9
 800d5ea:	f7ff f9c7 	bl	800c97c <quorem>
 800d5ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d5f2:	f806 8b01 	strb.w	r8, [r6], #1
 800d5f6:	9b00      	ldr	r3, [sp, #0]
 800d5f8:	eba6 020a 	sub.w	r2, r6, sl
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	ddb3      	ble.n	800d568 <_dtoa_r+0xad8>
 800d600:	4649      	mov	r1, r9
 800d602:	2300      	movs	r3, #0
 800d604:	220a      	movs	r2, #10
 800d606:	4658      	mov	r0, fp
 800d608:	f000 fcb4 	bl	800df74 <__multadd>
 800d60c:	4681      	mov	r9, r0
 800d60e:	e7ea      	b.n	800d5e6 <_dtoa_r+0xb56>
 800d610:	0800f830 	.word	0x0800f830
 800d614:	0800f7b4 	.word	0x0800f7b4

0800d618 <_free_r>:
 800d618:	b538      	push	{r3, r4, r5, lr}
 800d61a:	4605      	mov	r5, r0
 800d61c:	2900      	cmp	r1, #0
 800d61e:	d041      	beq.n	800d6a4 <_free_r+0x8c>
 800d620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d624:	1f0c      	subs	r4, r1, #4
 800d626:	2b00      	cmp	r3, #0
 800d628:	bfb8      	it	lt
 800d62a:	18e4      	addlt	r4, r4, r3
 800d62c:	f000 fc34 	bl	800de98 <__malloc_lock>
 800d630:	4a1d      	ldr	r2, [pc, #116]	@ (800d6a8 <_free_r+0x90>)
 800d632:	6813      	ldr	r3, [r2, #0]
 800d634:	b933      	cbnz	r3, 800d644 <_free_r+0x2c>
 800d636:	6063      	str	r3, [r4, #4]
 800d638:	6014      	str	r4, [r2, #0]
 800d63a:	4628      	mov	r0, r5
 800d63c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d640:	f000 bc30 	b.w	800dea4 <__malloc_unlock>
 800d644:	42a3      	cmp	r3, r4
 800d646:	d908      	bls.n	800d65a <_free_r+0x42>
 800d648:	6820      	ldr	r0, [r4, #0]
 800d64a:	1821      	adds	r1, r4, r0
 800d64c:	428b      	cmp	r3, r1
 800d64e:	bf01      	itttt	eq
 800d650:	6819      	ldreq	r1, [r3, #0]
 800d652:	685b      	ldreq	r3, [r3, #4]
 800d654:	1809      	addeq	r1, r1, r0
 800d656:	6021      	streq	r1, [r4, #0]
 800d658:	e7ed      	b.n	800d636 <_free_r+0x1e>
 800d65a:	461a      	mov	r2, r3
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	b10b      	cbz	r3, 800d664 <_free_r+0x4c>
 800d660:	42a3      	cmp	r3, r4
 800d662:	d9fa      	bls.n	800d65a <_free_r+0x42>
 800d664:	6811      	ldr	r1, [r2, #0]
 800d666:	1850      	adds	r0, r2, r1
 800d668:	42a0      	cmp	r0, r4
 800d66a:	d10b      	bne.n	800d684 <_free_r+0x6c>
 800d66c:	6820      	ldr	r0, [r4, #0]
 800d66e:	4401      	add	r1, r0
 800d670:	1850      	adds	r0, r2, r1
 800d672:	4283      	cmp	r3, r0
 800d674:	6011      	str	r1, [r2, #0]
 800d676:	d1e0      	bne.n	800d63a <_free_r+0x22>
 800d678:	6818      	ldr	r0, [r3, #0]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	6053      	str	r3, [r2, #4]
 800d67e:	4408      	add	r0, r1
 800d680:	6010      	str	r0, [r2, #0]
 800d682:	e7da      	b.n	800d63a <_free_r+0x22>
 800d684:	d902      	bls.n	800d68c <_free_r+0x74>
 800d686:	230c      	movs	r3, #12
 800d688:	602b      	str	r3, [r5, #0]
 800d68a:	e7d6      	b.n	800d63a <_free_r+0x22>
 800d68c:	6820      	ldr	r0, [r4, #0]
 800d68e:	1821      	adds	r1, r4, r0
 800d690:	428b      	cmp	r3, r1
 800d692:	bf04      	itt	eq
 800d694:	6819      	ldreq	r1, [r3, #0]
 800d696:	685b      	ldreq	r3, [r3, #4]
 800d698:	6063      	str	r3, [r4, #4]
 800d69a:	bf04      	itt	eq
 800d69c:	1809      	addeq	r1, r1, r0
 800d69e:	6021      	streq	r1, [r4, #0]
 800d6a0:	6054      	str	r4, [r2, #4]
 800d6a2:	e7ca      	b.n	800d63a <_free_r+0x22>
 800d6a4:	bd38      	pop	{r3, r4, r5, pc}
 800d6a6:	bf00      	nop
 800d6a8:	20002d60 	.word	0x20002d60

0800d6ac <rshift>:
 800d6ac:	6903      	ldr	r3, [r0, #16]
 800d6ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d6b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d6ba:	f100 0414 	add.w	r4, r0, #20
 800d6be:	dd45      	ble.n	800d74c <rshift+0xa0>
 800d6c0:	f011 011f 	ands.w	r1, r1, #31
 800d6c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d6c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d6cc:	d10c      	bne.n	800d6e8 <rshift+0x3c>
 800d6ce:	f100 0710 	add.w	r7, r0, #16
 800d6d2:	4629      	mov	r1, r5
 800d6d4:	42b1      	cmp	r1, r6
 800d6d6:	d334      	bcc.n	800d742 <rshift+0x96>
 800d6d8:	1a9b      	subs	r3, r3, r2
 800d6da:	009b      	lsls	r3, r3, #2
 800d6dc:	1eea      	subs	r2, r5, #3
 800d6de:	4296      	cmp	r6, r2
 800d6e0:	bf38      	it	cc
 800d6e2:	2300      	movcc	r3, #0
 800d6e4:	4423      	add	r3, r4
 800d6e6:	e015      	b.n	800d714 <rshift+0x68>
 800d6e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d6ec:	f1c1 0820 	rsb	r8, r1, #32
 800d6f0:	40cf      	lsrs	r7, r1
 800d6f2:	f105 0e04 	add.w	lr, r5, #4
 800d6f6:	46a1      	mov	r9, r4
 800d6f8:	4576      	cmp	r6, lr
 800d6fa:	46f4      	mov	ip, lr
 800d6fc:	d815      	bhi.n	800d72a <rshift+0x7e>
 800d6fe:	1a9a      	subs	r2, r3, r2
 800d700:	0092      	lsls	r2, r2, #2
 800d702:	3a04      	subs	r2, #4
 800d704:	3501      	adds	r5, #1
 800d706:	42ae      	cmp	r6, r5
 800d708:	bf38      	it	cc
 800d70a:	2200      	movcc	r2, #0
 800d70c:	18a3      	adds	r3, r4, r2
 800d70e:	50a7      	str	r7, [r4, r2]
 800d710:	b107      	cbz	r7, 800d714 <rshift+0x68>
 800d712:	3304      	adds	r3, #4
 800d714:	1b1a      	subs	r2, r3, r4
 800d716:	42a3      	cmp	r3, r4
 800d718:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d71c:	bf08      	it	eq
 800d71e:	2300      	moveq	r3, #0
 800d720:	6102      	str	r2, [r0, #16]
 800d722:	bf08      	it	eq
 800d724:	6143      	streq	r3, [r0, #20]
 800d726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d72a:	f8dc c000 	ldr.w	ip, [ip]
 800d72e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d732:	ea4c 0707 	orr.w	r7, ip, r7
 800d736:	f849 7b04 	str.w	r7, [r9], #4
 800d73a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d73e:	40cf      	lsrs	r7, r1
 800d740:	e7da      	b.n	800d6f8 <rshift+0x4c>
 800d742:	f851 cb04 	ldr.w	ip, [r1], #4
 800d746:	f847 cf04 	str.w	ip, [r7, #4]!
 800d74a:	e7c3      	b.n	800d6d4 <rshift+0x28>
 800d74c:	4623      	mov	r3, r4
 800d74e:	e7e1      	b.n	800d714 <rshift+0x68>

0800d750 <__hexdig_fun>:
 800d750:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d754:	2b09      	cmp	r3, #9
 800d756:	d802      	bhi.n	800d75e <__hexdig_fun+0xe>
 800d758:	3820      	subs	r0, #32
 800d75a:	b2c0      	uxtb	r0, r0
 800d75c:	4770      	bx	lr
 800d75e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d762:	2b05      	cmp	r3, #5
 800d764:	d801      	bhi.n	800d76a <__hexdig_fun+0x1a>
 800d766:	3847      	subs	r0, #71	@ 0x47
 800d768:	e7f7      	b.n	800d75a <__hexdig_fun+0xa>
 800d76a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d76e:	2b05      	cmp	r3, #5
 800d770:	d801      	bhi.n	800d776 <__hexdig_fun+0x26>
 800d772:	3827      	subs	r0, #39	@ 0x27
 800d774:	e7f1      	b.n	800d75a <__hexdig_fun+0xa>
 800d776:	2000      	movs	r0, #0
 800d778:	4770      	bx	lr
	...

0800d77c <__gethex>:
 800d77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d780:	b085      	sub	sp, #20
 800d782:	468a      	mov	sl, r1
 800d784:	9302      	str	r3, [sp, #8]
 800d786:	680b      	ldr	r3, [r1, #0]
 800d788:	9001      	str	r0, [sp, #4]
 800d78a:	4690      	mov	r8, r2
 800d78c:	1c9c      	adds	r4, r3, #2
 800d78e:	46a1      	mov	r9, r4
 800d790:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d794:	2830      	cmp	r0, #48	@ 0x30
 800d796:	d0fa      	beq.n	800d78e <__gethex+0x12>
 800d798:	eba9 0303 	sub.w	r3, r9, r3
 800d79c:	f1a3 0b02 	sub.w	fp, r3, #2
 800d7a0:	f7ff ffd6 	bl	800d750 <__hexdig_fun>
 800d7a4:	4605      	mov	r5, r0
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	d168      	bne.n	800d87c <__gethex+0x100>
 800d7aa:	49a0      	ldr	r1, [pc, #640]	@ (800da2c <__gethex+0x2b0>)
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	4648      	mov	r0, r9
 800d7b0:	f7ff f83c 	bl	800c82c <strncmp>
 800d7b4:	4607      	mov	r7, r0
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	d167      	bne.n	800d88a <__gethex+0x10e>
 800d7ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d7be:	4626      	mov	r6, r4
 800d7c0:	f7ff ffc6 	bl	800d750 <__hexdig_fun>
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	d062      	beq.n	800d88e <__gethex+0x112>
 800d7c8:	4623      	mov	r3, r4
 800d7ca:	7818      	ldrb	r0, [r3, #0]
 800d7cc:	2830      	cmp	r0, #48	@ 0x30
 800d7ce:	4699      	mov	r9, r3
 800d7d0:	f103 0301 	add.w	r3, r3, #1
 800d7d4:	d0f9      	beq.n	800d7ca <__gethex+0x4e>
 800d7d6:	f7ff ffbb 	bl	800d750 <__hexdig_fun>
 800d7da:	fab0 f580 	clz	r5, r0
 800d7de:	096d      	lsrs	r5, r5, #5
 800d7e0:	f04f 0b01 	mov.w	fp, #1
 800d7e4:	464a      	mov	r2, r9
 800d7e6:	4616      	mov	r6, r2
 800d7e8:	3201      	adds	r2, #1
 800d7ea:	7830      	ldrb	r0, [r6, #0]
 800d7ec:	f7ff ffb0 	bl	800d750 <__hexdig_fun>
 800d7f0:	2800      	cmp	r0, #0
 800d7f2:	d1f8      	bne.n	800d7e6 <__gethex+0x6a>
 800d7f4:	498d      	ldr	r1, [pc, #564]	@ (800da2c <__gethex+0x2b0>)
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	f7ff f817 	bl	800c82c <strncmp>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d13f      	bne.n	800d882 <__gethex+0x106>
 800d802:	b944      	cbnz	r4, 800d816 <__gethex+0x9a>
 800d804:	1c74      	adds	r4, r6, #1
 800d806:	4622      	mov	r2, r4
 800d808:	4616      	mov	r6, r2
 800d80a:	3201      	adds	r2, #1
 800d80c:	7830      	ldrb	r0, [r6, #0]
 800d80e:	f7ff ff9f 	bl	800d750 <__hexdig_fun>
 800d812:	2800      	cmp	r0, #0
 800d814:	d1f8      	bne.n	800d808 <__gethex+0x8c>
 800d816:	1ba4      	subs	r4, r4, r6
 800d818:	00a7      	lsls	r7, r4, #2
 800d81a:	7833      	ldrb	r3, [r6, #0]
 800d81c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d820:	2b50      	cmp	r3, #80	@ 0x50
 800d822:	d13e      	bne.n	800d8a2 <__gethex+0x126>
 800d824:	7873      	ldrb	r3, [r6, #1]
 800d826:	2b2b      	cmp	r3, #43	@ 0x2b
 800d828:	d033      	beq.n	800d892 <__gethex+0x116>
 800d82a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d82c:	d034      	beq.n	800d898 <__gethex+0x11c>
 800d82e:	1c71      	adds	r1, r6, #1
 800d830:	2400      	movs	r4, #0
 800d832:	7808      	ldrb	r0, [r1, #0]
 800d834:	f7ff ff8c 	bl	800d750 <__hexdig_fun>
 800d838:	1e43      	subs	r3, r0, #1
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	2b18      	cmp	r3, #24
 800d83e:	d830      	bhi.n	800d8a2 <__gethex+0x126>
 800d840:	f1a0 0210 	sub.w	r2, r0, #16
 800d844:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d848:	f7ff ff82 	bl	800d750 <__hexdig_fun>
 800d84c:	f100 3cff 	add.w	ip, r0, #4294967295
 800d850:	fa5f fc8c 	uxtb.w	ip, ip
 800d854:	f1bc 0f18 	cmp.w	ip, #24
 800d858:	f04f 030a 	mov.w	r3, #10
 800d85c:	d91e      	bls.n	800d89c <__gethex+0x120>
 800d85e:	b104      	cbz	r4, 800d862 <__gethex+0xe6>
 800d860:	4252      	negs	r2, r2
 800d862:	4417      	add	r7, r2
 800d864:	f8ca 1000 	str.w	r1, [sl]
 800d868:	b1ed      	cbz	r5, 800d8a6 <__gethex+0x12a>
 800d86a:	f1bb 0f00 	cmp.w	fp, #0
 800d86e:	bf0c      	ite	eq
 800d870:	2506      	moveq	r5, #6
 800d872:	2500      	movne	r5, #0
 800d874:	4628      	mov	r0, r5
 800d876:	b005      	add	sp, #20
 800d878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d87c:	2500      	movs	r5, #0
 800d87e:	462c      	mov	r4, r5
 800d880:	e7b0      	b.n	800d7e4 <__gethex+0x68>
 800d882:	2c00      	cmp	r4, #0
 800d884:	d1c7      	bne.n	800d816 <__gethex+0x9a>
 800d886:	4627      	mov	r7, r4
 800d888:	e7c7      	b.n	800d81a <__gethex+0x9e>
 800d88a:	464e      	mov	r6, r9
 800d88c:	462f      	mov	r7, r5
 800d88e:	2501      	movs	r5, #1
 800d890:	e7c3      	b.n	800d81a <__gethex+0x9e>
 800d892:	2400      	movs	r4, #0
 800d894:	1cb1      	adds	r1, r6, #2
 800d896:	e7cc      	b.n	800d832 <__gethex+0xb6>
 800d898:	2401      	movs	r4, #1
 800d89a:	e7fb      	b.n	800d894 <__gethex+0x118>
 800d89c:	fb03 0002 	mla	r0, r3, r2, r0
 800d8a0:	e7ce      	b.n	800d840 <__gethex+0xc4>
 800d8a2:	4631      	mov	r1, r6
 800d8a4:	e7de      	b.n	800d864 <__gethex+0xe8>
 800d8a6:	eba6 0309 	sub.w	r3, r6, r9
 800d8aa:	3b01      	subs	r3, #1
 800d8ac:	4629      	mov	r1, r5
 800d8ae:	2b07      	cmp	r3, #7
 800d8b0:	dc0a      	bgt.n	800d8c8 <__gethex+0x14c>
 800d8b2:	9801      	ldr	r0, [sp, #4]
 800d8b4:	f000 fafc 	bl	800deb0 <_Balloc>
 800d8b8:	4604      	mov	r4, r0
 800d8ba:	b940      	cbnz	r0, 800d8ce <__gethex+0x152>
 800d8bc:	4b5c      	ldr	r3, [pc, #368]	@ (800da30 <__gethex+0x2b4>)
 800d8be:	4602      	mov	r2, r0
 800d8c0:	21e4      	movs	r1, #228	@ 0xe4
 800d8c2:	485c      	ldr	r0, [pc, #368]	@ (800da34 <__gethex+0x2b8>)
 800d8c4:	f001 fba6 	bl	800f014 <__assert_func>
 800d8c8:	3101      	adds	r1, #1
 800d8ca:	105b      	asrs	r3, r3, #1
 800d8cc:	e7ef      	b.n	800d8ae <__gethex+0x132>
 800d8ce:	f100 0a14 	add.w	sl, r0, #20
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	4655      	mov	r5, sl
 800d8d6:	469b      	mov	fp, r3
 800d8d8:	45b1      	cmp	r9, r6
 800d8da:	d337      	bcc.n	800d94c <__gethex+0x1d0>
 800d8dc:	f845 bb04 	str.w	fp, [r5], #4
 800d8e0:	eba5 050a 	sub.w	r5, r5, sl
 800d8e4:	10ad      	asrs	r5, r5, #2
 800d8e6:	6125      	str	r5, [r4, #16]
 800d8e8:	4658      	mov	r0, fp
 800d8ea:	f000 fbd3 	bl	800e094 <__hi0bits>
 800d8ee:	016d      	lsls	r5, r5, #5
 800d8f0:	f8d8 6000 	ldr.w	r6, [r8]
 800d8f4:	1a2d      	subs	r5, r5, r0
 800d8f6:	42b5      	cmp	r5, r6
 800d8f8:	dd54      	ble.n	800d9a4 <__gethex+0x228>
 800d8fa:	1bad      	subs	r5, r5, r6
 800d8fc:	4629      	mov	r1, r5
 800d8fe:	4620      	mov	r0, r4
 800d900:	f000 ff67 	bl	800e7d2 <__any_on>
 800d904:	4681      	mov	r9, r0
 800d906:	b178      	cbz	r0, 800d928 <__gethex+0x1ac>
 800d908:	1e6b      	subs	r3, r5, #1
 800d90a:	1159      	asrs	r1, r3, #5
 800d90c:	f003 021f 	and.w	r2, r3, #31
 800d910:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d914:	f04f 0901 	mov.w	r9, #1
 800d918:	fa09 f202 	lsl.w	r2, r9, r2
 800d91c:	420a      	tst	r2, r1
 800d91e:	d003      	beq.n	800d928 <__gethex+0x1ac>
 800d920:	454b      	cmp	r3, r9
 800d922:	dc36      	bgt.n	800d992 <__gethex+0x216>
 800d924:	f04f 0902 	mov.w	r9, #2
 800d928:	4629      	mov	r1, r5
 800d92a:	4620      	mov	r0, r4
 800d92c:	f7ff febe 	bl	800d6ac <rshift>
 800d930:	442f      	add	r7, r5
 800d932:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d936:	42bb      	cmp	r3, r7
 800d938:	da42      	bge.n	800d9c0 <__gethex+0x244>
 800d93a:	9801      	ldr	r0, [sp, #4]
 800d93c:	4621      	mov	r1, r4
 800d93e:	f000 faf7 	bl	800df30 <_Bfree>
 800d942:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d944:	2300      	movs	r3, #0
 800d946:	6013      	str	r3, [r2, #0]
 800d948:	25a3      	movs	r5, #163	@ 0xa3
 800d94a:	e793      	b.n	800d874 <__gethex+0xf8>
 800d94c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d950:	2a2e      	cmp	r2, #46	@ 0x2e
 800d952:	d012      	beq.n	800d97a <__gethex+0x1fe>
 800d954:	2b20      	cmp	r3, #32
 800d956:	d104      	bne.n	800d962 <__gethex+0x1e6>
 800d958:	f845 bb04 	str.w	fp, [r5], #4
 800d95c:	f04f 0b00 	mov.w	fp, #0
 800d960:	465b      	mov	r3, fp
 800d962:	7830      	ldrb	r0, [r6, #0]
 800d964:	9303      	str	r3, [sp, #12]
 800d966:	f7ff fef3 	bl	800d750 <__hexdig_fun>
 800d96a:	9b03      	ldr	r3, [sp, #12]
 800d96c:	f000 000f 	and.w	r0, r0, #15
 800d970:	4098      	lsls	r0, r3
 800d972:	ea4b 0b00 	orr.w	fp, fp, r0
 800d976:	3304      	adds	r3, #4
 800d978:	e7ae      	b.n	800d8d8 <__gethex+0x15c>
 800d97a:	45b1      	cmp	r9, r6
 800d97c:	d8ea      	bhi.n	800d954 <__gethex+0x1d8>
 800d97e:	492b      	ldr	r1, [pc, #172]	@ (800da2c <__gethex+0x2b0>)
 800d980:	9303      	str	r3, [sp, #12]
 800d982:	2201      	movs	r2, #1
 800d984:	4630      	mov	r0, r6
 800d986:	f7fe ff51 	bl	800c82c <strncmp>
 800d98a:	9b03      	ldr	r3, [sp, #12]
 800d98c:	2800      	cmp	r0, #0
 800d98e:	d1e1      	bne.n	800d954 <__gethex+0x1d8>
 800d990:	e7a2      	b.n	800d8d8 <__gethex+0x15c>
 800d992:	1ea9      	subs	r1, r5, #2
 800d994:	4620      	mov	r0, r4
 800d996:	f000 ff1c 	bl	800e7d2 <__any_on>
 800d99a:	2800      	cmp	r0, #0
 800d99c:	d0c2      	beq.n	800d924 <__gethex+0x1a8>
 800d99e:	f04f 0903 	mov.w	r9, #3
 800d9a2:	e7c1      	b.n	800d928 <__gethex+0x1ac>
 800d9a4:	da09      	bge.n	800d9ba <__gethex+0x23e>
 800d9a6:	1b75      	subs	r5, r6, r5
 800d9a8:	4621      	mov	r1, r4
 800d9aa:	9801      	ldr	r0, [sp, #4]
 800d9ac:	462a      	mov	r2, r5
 800d9ae:	f000 fcd7 	bl	800e360 <__lshift>
 800d9b2:	1b7f      	subs	r7, r7, r5
 800d9b4:	4604      	mov	r4, r0
 800d9b6:	f100 0a14 	add.w	sl, r0, #20
 800d9ba:	f04f 0900 	mov.w	r9, #0
 800d9be:	e7b8      	b.n	800d932 <__gethex+0x1b6>
 800d9c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d9c4:	42bd      	cmp	r5, r7
 800d9c6:	dd6f      	ble.n	800daa8 <__gethex+0x32c>
 800d9c8:	1bed      	subs	r5, r5, r7
 800d9ca:	42ae      	cmp	r6, r5
 800d9cc:	dc34      	bgt.n	800da38 <__gethex+0x2bc>
 800d9ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d9d2:	2b02      	cmp	r3, #2
 800d9d4:	d022      	beq.n	800da1c <__gethex+0x2a0>
 800d9d6:	2b03      	cmp	r3, #3
 800d9d8:	d024      	beq.n	800da24 <__gethex+0x2a8>
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d115      	bne.n	800da0a <__gethex+0x28e>
 800d9de:	42ae      	cmp	r6, r5
 800d9e0:	d113      	bne.n	800da0a <__gethex+0x28e>
 800d9e2:	2e01      	cmp	r6, #1
 800d9e4:	d10b      	bne.n	800d9fe <__gethex+0x282>
 800d9e6:	9a02      	ldr	r2, [sp, #8]
 800d9e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d9ec:	6013      	str	r3, [r2, #0]
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	6123      	str	r3, [r4, #16]
 800d9f2:	f8ca 3000 	str.w	r3, [sl]
 800d9f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9f8:	2562      	movs	r5, #98	@ 0x62
 800d9fa:	601c      	str	r4, [r3, #0]
 800d9fc:	e73a      	b.n	800d874 <__gethex+0xf8>
 800d9fe:	1e71      	subs	r1, r6, #1
 800da00:	4620      	mov	r0, r4
 800da02:	f000 fee6 	bl	800e7d2 <__any_on>
 800da06:	2800      	cmp	r0, #0
 800da08:	d1ed      	bne.n	800d9e6 <__gethex+0x26a>
 800da0a:	9801      	ldr	r0, [sp, #4]
 800da0c:	4621      	mov	r1, r4
 800da0e:	f000 fa8f 	bl	800df30 <_Bfree>
 800da12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da14:	2300      	movs	r3, #0
 800da16:	6013      	str	r3, [r2, #0]
 800da18:	2550      	movs	r5, #80	@ 0x50
 800da1a:	e72b      	b.n	800d874 <__gethex+0xf8>
 800da1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d1f3      	bne.n	800da0a <__gethex+0x28e>
 800da22:	e7e0      	b.n	800d9e6 <__gethex+0x26a>
 800da24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da26:	2b00      	cmp	r3, #0
 800da28:	d1dd      	bne.n	800d9e6 <__gethex+0x26a>
 800da2a:	e7ee      	b.n	800da0a <__gethex+0x28e>
 800da2c:	0800f720 	.word	0x0800f720
 800da30:	0800f830 	.word	0x0800f830
 800da34:	0800f841 	.word	0x0800f841
 800da38:	1e6f      	subs	r7, r5, #1
 800da3a:	f1b9 0f00 	cmp.w	r9, #0
 800da3e:	d130      	bne.n	800daa2 <__gethex+0x326>
 800da40:	b127      	cbz	r7, 800da4c <__gethex+0x2d0>
 800da42:	4639      	mov	r1, r7
 800da44:	4620      	mov	r0, r4
 800da46:	f000 fec4 	bl	800e7d2 <__any_on>
 800da4a:	4681      	mov	r9, r0
 800da4c:	117a      	asrs	r2, r7, #5
 800da4e:	2301      	movs	r3, #1
 800da50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800da54:	f007 071f 	and.w	r7, r7, #31
 800da58:	40bb      	lsls	r3, r7
 800da5a:	4213      	tst	r3, r2
 800da5c:	4629      	mov	r1, r5
 800da5e:	4620      	mov	r0, r4
 800da60:	bf18      	it	ne
 800da62:	f049 0902 	orrne.w	r9, r9, #2
 800da66:	f7ff fe21 	bl	800d6ac <rshift>
 800da6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800da6e:	1b76      	subs	r6, r6, r5
 800da70:	2502      	movs	r5, #2
 800da72:	f1b9 0f00 	cmp.w	r9, #0
 800da76:	d047      	beq.n	800db08 <__gethex+0x38c>
 800da78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da7c:	2b02      	cmp	r3, #2
 800da7e:	d015      	beq.n	800daac <__gethex+0x330>
 800da80:	2b03      	cmp	r3, #3
 800da82:	d017      	beq.n	800dab4 <__gethex+0x338>
 800da84:	2b01      	cmp	r3, #1
 800da86:	d109      	bne.n	800da9c <__gethex+0x320>
 800da88:	f019 0f02 	tst.w	r9, #2
 800da8c:	d006      	beq.n	800da9c <__gethex+0x320>
 800da8e:	f8da 3000 	ldr.w	r3, [sl]
 800da92:	ea49 0903 	orr.w	r9, r9, r3
 800da96:	f019 0f01 	tst.w	r9, #1
 800da9a:	d10e      	bne.n	800daba <__gethex+0x33e>
 800da9c:	f045 0510 	orr.w	r5, r5, #16
 800daa0:	e032      	b.n	800db08 <__gethex+0x38c>
 800daa2:	f04f 0901 	mov.w	r9, #1
 800daa6:	e7d1      	b.n	800da4c <__gethex+0x2d0>
 800daa8:	2501      	movs	r5, #1
 800daaa:	e7e2      	b.n	800da72 <__gethex+0x2f6>
 800daac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800daae:	f1c3 0301 	rsb	r3, r3, #1
 800dab2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d0f0      	beq.n	800da9c <__gethex+0x320>
 800daba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dabe:	f104 0314 	add.w	r3, r4, #20
 800dac2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dac6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800daca:	f04f 0c00 	mov.w	ip, #0
 800dace:	4618      	mov	r0, r3
 800dad0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dad4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dad8:	d01b      	beq.n	800db12 <__gethex+0x396>
 800dada:	3201      	adds	r2, #1
 800dadc:	6002      	str	r2, [r0, #0]
 800dade:	2d02      	cmp	r5, #2
 800dae0:	f104 0314 	add.w	r3, r4, #20
 800dae4:	d13c      	bne.n	800db60 <__gethex+0x3e4>
 800dae6:	f8d8 2000 	ldr.w	r2, [r8]
 800daea:	3a01      	subs	r2, #1
 800daec:	42b2      	cmp	r2, r6
 800daee:	d109      	bne.n	800db04 <__gethex+0x388>
 800daf0:	1171      	asrs	r1, r6, #5
 800daf2:	2201      	movs	r2, #1
 800daf4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800daf8:	f006 061f 	and.w	r6, r6, #31
 800dafc:	fa02 f606 	lsl.w	r6, r2, r6
 800db00:	421e      	tst	r6, r3
 800db02:	d13a      	bne.n	800db7a <__gethex+0x3fe>
 800db04:	f045 0520 	orr.w	r5, r5, #32
 800db08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db0a:	601c      	str	r4, [r3, #0]
 800db0c:	9b02      	ldr	r3, [sp, #8]
 800db0e:	601f      	str	r7, [r3, #0]
 800db10:	e6b0      	b.n	800d874 <__gethex+0xf8>
 800db12:	4299      	cmp	r1, r3
 800db14:	f843 cc04 	str.w	ip, [r3, #-4]
 800db18:	d8d9      	bhi.n	800dace <__gethex+0x352>
 800db1a:	68a3      	ldr	r3, [r4, #8]
 800db1c:	459b      	cmp	fp, r3
 800db1e:	db17      	blt.n	800db50 <__gethex+0x3d4>
 800db20:	6861      	ldr	r1, [r4, #4]
 800db22:	9801      	ldr	r0, [sp, #4]
 800db24:	3101      	adds	r1, #1
 800db26:	f000 f9c3 	bl	800deb0 <_Balloc>
 800db2a:	4681      	mov	r9, r0
 800db2c:	b918      	cbnz	r0, 800db36 <__gethex+0x3ba>
 800db2e:	4b1a      	ldr	r3, [pc, #104]	@ (800db98 <__gethex+0x41c>)
 800db30:	4602      	mov	r2, r0
 800db32:	2184      	movs	r1, #132	@ 0x84
 800db34:	e6c5      	b.n	800d8c2 <__gethex+0x146>
 800db36:	6922      	ldr	r2, [r4, #16]
 800db38:	3202      	adds	r2, #2
 800db3a:	f104 010c 	add.w	r1, r4, #12
 800db3e:	0092      	lsls	r2, r2, #2
 800db40:	300c      	adds	r0, #12
 800db42:	f7fe fefc 	bl	800c93e <memcpy>
 800db46:	4621      	mov	r1, r4
 800db48:	9801      	ldr	r0, [sp, #4]
 800db4a:	f000 f9f1 	bl	800df30 <_Bfree>
 800db4e:	464c      	mov	r4, r9
 800db50:	6923      	ldr	r3, [r4, #16]
 800db52:	1c5a      	adds	r2, r3, #1
 800db54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db58:	6122      	str	r2, [r4, #16]
 800db5a:	2201      	movs	r2, #1
 800db5c:	615a      	str	r2, [r3, #20]
 800db5e:	e7be      	b.n	800dade <__gethex+0x362>
 800db60:	6922      	ldr	r2, [r4, #16]
 800db62:	455a      	cmp	r2, fp
 800db64:	dd0b      	ble.n	800db7e <__gethex+0x402>
 800db66:	2101      	movs	r1, #1
 800db68:	4620      	mov	r0, r4
 800db6a:	f7ff fd9f 	bl	800d6ac <rshift>
 800db6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db72:	3701      	adds	r7, #1
 800db74:	42bb      	cmp	r3, r7
 800db76:	f6ff aee0 	blt.w	800d93a <__gethex+0x1be>
 800db7a:	2501      	movs	r5, #1
 800db7c:	e7c2      	b.n	800db04 <__gethex+0x388>
 800db7e:	f016 061f 	ands.w	r6, r6, #31
 800db82:	d0fa      	beq.n	800db7a <__gethex+0x3fe>
 800db84:	4453      	add	r3, sl
 800db86:	f1c6 0620 	rsb	r6, r6, #32
 800db8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800db8e:	f000 fa81 	bl	800e094 <__hi0bits>
 800db92:	42b0      	cmp	r0, r6
 800db94:	dbe7      	blt.n	800db66 <__gethex+0x3ea>
 800db96:	e7f0      	b.n	800db7a <__gethex+0x3fe>
 800db98:	0800f830 	.word	0x0800f830

0800db9c <L_shift>:
 800db9c:	f1c2 0208 	rsb	r2, r2, #8
 800dba0:	0092      	lsls	r2, r2, #2
 800dba2:	b570      	push	{r4, r5, r6, lr}
 800dba4:	f1c2 0620 	rsb	r6, r2, #32
 800dba8:	6843      	ldr	r3, [r0, #4]
 800dbaa:	6804      	ldr	r4, [r0, #0]
 800dbac:	fa03 f506 	lsl.w	r5, r3, r6
 800dbb0:	432c      	orrs	r4, r5
 800dbb2:	40d3      	lsrs	r3, r2
 800dbb4:	6004      	str	r4, [r0, #0]
 800dbb6:	f840 3f04 	str.w	r3, [r0, #4]!
 800dbba:	4288      	cmp	r0, r1
 800dbbc:	d3f4      	bcc.n	800dba8 <L_shift+0xc>
 800dbbe:	bd70      	pop	{r4, r5, r6, pc}

0800dbc0 <__match>:
 800dbc0:	b530      	push	{r4, r5, lr}
 800dbc2:	6803      	ldr	r3, [r0, #0]
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbca:	b914      	cbnz	r4, 800dbd2 <__match+0x12>
 800dbcc:	6003      	str	r3, [r0, #0]
 800dbce:	2001      	movs	r0, #1
 800dbd0:	bd30      	pop	{r4, r5, pc}
 800dbd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbd6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dbda:	2d19      	cmp	r5, #25
 800dbdc:	bf98      	it	ls
 800dbde:	3220      	addls	r2, #32
 800dbe0:	42a2      	cmp	r2, r4
 800dbe2:	d0f0      	beq.n	800dbc6 <__match+0x6>
 800dbe4:	2000      	movs	r0, #0
 800dbe6:	e7f3      	b.n	800dbd0 <__match+0x10>

0800dbe8 <__hexnan>:
 800dbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbec:	680b      	ldr	r3, [r1, #0]
 800dbee:	6801      	ldr	r1, [r0, #0]
 800dbf0:	115e      	asrs	r6, r3, #5
 800dbf2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dbf6:	f013 031f 	ands.w	r3, r3, #31
 800dbfa:	b087      	sub	sp, #28
 800dbfc:	bf18      	it	ne
 800dbfe:	3604      	addne	r6, #4
 800dc00:	2500      	movs	r5, #0
 800dc02:	1f37      	subs	r7, r6, #4
 800dc04:	4682      	mov	sl, r0
 800dc06:	4690      	mov	r8, r2
 800dc08:	9301      	str	r3, [sp, #4]
 800dc0a:	f846 5c04 	str.w	r5, [r6, #-4]
 800dc0e:	46b9      	mov	r9, r7
 800dc10:	463c      	mov	r4, r7
 800dc12:	9502      	str	r5, [sp, #8]
 800dc14:	46ab      	mov	fp, r5
 800dc16:	784a      	ldrb	r2, [r1, #1]
 800dc18:	1c4b      	adds	r3, r1, #1
 800dc1a:	9303      	str	r3, [sp, #12]
 800dc1c:	b342      	cbz	r2, 800dc70 <__hexnan+0x88>
 800dc1e:	4610      	mov	r0, r2
 800dc20:	9105      	str	r1, [sp, #20]
 800dc22:	9204      	str	r2, [sp, #16]
 800dc24:	f7ff fd94 	bl	800d750 <__hexdig_fun>
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	d151      	bne.n	800dcd0 <__hexnan+0xe8>
 800dc2c:	9a04      	ldr	r2, [sp, #16]
 800dc2e:	9905      	ldr	r1, [sp, #20]
 800dc30:	2a20      	cmp	r2, #32
 800dc32:	d818      	bhi.n	800dc66 <__hexnan+0x7e>
 800dc34:	9b02      	ldr	r3, [sp, #8]
 800dc36:	459b      	cmp	fp, r3
 800dc38:	dd13      	ble.n	800dc62 <__hexnan+0x7a>
 800dc3a:	454c      	cmp	r4, r9
 800dc3c:	d206      	bcs.n	800dc4c <__hexnan+0x64>
 800dc3e:	2d07      	cmp	r5, #7
 800dc40:	dc04      	bgt.n	800dc4c <__hexnan+0x64>
 800dc42:	462a      	mov	r2, r5
 800dc44:	4649      	mov	r1, r9
 800dc46:	4620      	mov	r0, r4
 800dc48:	f7ff ffa8 	bl	800db9c <L_shift>
 800dc4c:	4544      	cmp	r4, r8
 800dc4e:	d952      	bls.n	800dcf6 <__hexnan+0x10e>
 800dc50:	2300      	movs	r3, #0
 800dc52:	f1a4 0904 	sub.w	r9, r4, #4
 800dc56:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc5a:	f8cd b008 	str.w	fp, [sp, #8]
 800dc5e:	464c      	mov	r4, r9
 800dc60:	461d      	mov	r5, r3
 800dc62:	9903      	ldr	r1, [sp, #12]
 800dc64:	e7d7      	b.n	800dc16 <__hexnan+0x2e>
 800dc66:	2a29      	cmp	r2, #41	@ 0x29
 800dc68:	d157      	bne.n	800dd1a <__hexnan+0x132>
 800dc6a:	3102      	adds	r1, #2
 800dc6c:	f8ca 1000 	str.w	r1, [sl]
 800dc70:	f1bb 0f00 	cmp.w	fp, #0
 800dc74:	d051      	beq.n	800dd1a <__hexnan+0x132>
 800dc76:	454c      	cmp	r4, r9
 800dc78:	d206      	bcs.n	800dc88 <__hexnan+0xa0>
 800dc7a:	2d07      	cmp	r5, #7
 800dc7c:	dc04      	bgt.n	800dc88 <__hexnan+0xa0>
 800dc7e:	462a      	mov	r2, r5
 800dc80:	4649      	mov	r1, r9
 800dc82:	4620      	mov	r0, r4
 800dc84:	f7ff ff8a 	bl	800db9c <L_shift>
 800dc88:	4544      	cmp	r4, r8
 800dc8a:	d936      	bls.n	800dcfa <__hexnan+0x112>
 800dc8c:	f1a8 0204 	sub.w	r2, r8, #4
 800dc90:	4623      	mov	r3, r4
 800dc92:	f853 1b04 	ldr.w	r1, [r3], #4
 800dc96:	f842 1f04 	str.w	r1, [r2, #4]!
 800dc9a:	429f      	cmp	r7, r3
 800dc9c:	d2f9      	bcs.n	800dc92 <__hexnan+0xaa>
 800dc9e:	1b3b      	subs	r3, r7, r4
 800dca0:	f023 0303 	bic.w	r3, r3, #3
 800dca4:	3304      	adds	r3, #4
 800dca6:	3401      	adds	r4, #1
 800dca8:	3e03      	subs	r6, #3
 800dcaa:	42b4      	cmp	r4, r6
 800dcac:	bf88      	it	hi
 800dcae:	2304      	movhi	r3, #4
 800dcb0:	4443      	add	r3, r8
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f843 2b04 	str.w	r2, [r3], #4
 800dcb8:	429f      	cmp	r7, r3
 800dcba:	d2fb      	bcs.n	800dcb4 <__hexnan+0xcc>
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	b91b      	cbnz	r3, 800dcc8 <__hexnan+0xe0>
 800dcc0:	4547      	cmp	r7, r8
 800dcc2:	d128      	bne.n	800dd16 <__hexnan+0x12e>
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	603b      	str	r3, [r7, #0]
 800dcc8:	2005      	movs	r0, #5
 800dcca:	b007      	add	sp, #28
 800dccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd0:	3501      	adds	r5, #1
 800dcd2:	2d08      	cmp	r5, #8
 800dcd4:	f10b 0b01 	add.w	fp, fp, #1
 800dcd8:	dd06      	ble.n	800dce8 <__hexnan+0x100>
 800dcda:	4544      	cmp	r4, r8
 800dcdc:	d9c1      	bls.n	800dc62 <__hexnan+0x7a>
 800dcde:	2300      	movs	r3, #0
 800dce0:	f844 3c04 	str.w	r3, [r4, #-4]
 800dce4:	2501      	movs	r5, #1
 800dce6:	3c04      	subs	r4, #4
 800dce8:	6822      	ldr	r2, [r4, #0]
 800dcea:	f000 000f 	and.w	r0, r0, #15
 800dcee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dcf2:	6020      	str	r0, [r4, #0]
 800dcf4:	e7b5      	b.n	800dc62 <__hexnan+0x7a>
 800dcf6:	2508      	movs	r5, #8
 800dcf8:	e7b3      	b.n	800dc62 <__hexnan+0x7a>
 800dcfa:	9b01      	ldr	r3, [sp, #4]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d0dd      	beq.n	800dcbc <__hexnan+0xd4>
 800dd00:	f1c3 0320 	rsb	r3, r3, #32
 800dd04:	f04f 32ff 	mov.w	r2, #4294967295
 800dd08:	40da      	lsrs	r2, r3
 800dd0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dd0e:	4013      	ands	r3, r2
 800dd10:	f846 3c04 	str.w	r3, [r6, #-4]
 800dd14:	e7d2      	b.n	800dcbc <__hexnan+0xd4>
 800dd16:	3f04      	subs	r7, #4
 800dd18:	e7d0      	b.n	800dcbc <__hexnan+0xd4>
 800dd1a:	2004      	movs	r0, #4
 800dd1c:	e7d5      	b.n	800dcca <__hexnan+0xe2>
	...

0800dd20 <malloc>:
 800dd20:	4b02      	ldr	r3, [pc, #8]	@ (800dd2c <malloc+0xc>)
 800dd22:	4601      	mov	r1, r0
 800dd24:	6818      	ldr	r0, [r3, #0]
 800dd26:	f000 b825 	b.w	800dd74 <_malloc_r>
 800dd2a:	bf00      	nop
 800dd2c:	200001a0 	.word	0x200001a0

0800dd30 <sbrk_aligned>:
 800dd30:	b570      	push	{r4, r5, r6, lr}
 800dd32:	4e0f      	ldr	r6, [pc, #60]	@ (800dd70 <sbrk_aligned+0x40>)
 800dd34:	460c      	mov	r4, r1
 800dd36:	6831      	ldr	r1, [r6, #0]
 800dd38:	4605      	mov	r5, r0
 800dd3a:	b911      	cbnz	r1, 800dd42 <sbrk_aligned+0x12>
 800dd3c:	f001 f95a 	bl	800eff4 <_sbrk_r>
 800dd40:	6030      	str	r0, [r6, #0]
 800dd42:	4621      	mov	r1, r4
 800dd44:	4628      	mov	r0, r5
 800dd46:	f001 f955 	bl	800eff4 <_sbrk_r>
 800dd4a:	1c43      	adds	r3, r0, #1
 800dd4c:	d103      	bne.n	800dd56 <sbrk_aligned+0x26>
 800dd4e:	f04f 34ff 	mov.w	r4, #4294967295
 800dd52:	4620      	mov	r0, r4
 800dd54:	bd70      	pop	{r4, r5, r6, pc}
 800dd56:	1cc4      	adds	r4, r0, #3
 800dd58:	f024 0403 	bic.w	r4, r4, #3
 800dd5c:	42a0      	cmp	r0, r4
 800dd5e:	d0f8      	beq.n	800dd52 <sbrk_aligned+0x22>
 800dd60:	1a21      	subs	r1, r4, r0
 800dd62:	4628      	mov	r0, r5
 800dd64:	f001 f946 	bl	800eff4 <_sbrk_r>
 800dd68:	3001      	adds	r0, #1
 800dd6a:	d1f2      	bne.n	800dd52 <sbrk_aligned+0x22>
 800dd6c:	e7ef      	b.n	800dd4e <sbrk_aligned+0x1e>
 800dd6e:	bf00      	nop
 800dd70:	20002d5c 	.word	0x20002d5c

0800dd74 <_malloc_r>:
 800dd74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd78:	1ccd      	adds	r5, r1, #3
 800dd7a:	f025 0503 	bic.w	r5, r5, #3
 800dd7e:	3508      	adds	r5, #8
 800dd80:	2d0c      	cmp	r5, #12
 800dd82:	bf38      	it	cc
 800dd84:	250c      	movcc	r5, #12
 800dd86:	2d00      	cmp	r5, #0
 800dd88:	4606      	mov	r6, r0
 800dd8a:	db01      	blt.n	800dd90 <_malloc_r+0x1c>
 800dd8c:	42a9      	cmp	r1, r5
 800dd8e:	d904      	bls.n	800dd9a <_malloc_r+0x26>
 800dd90:	230c      	movs	r3, #12
 800dd92:	6033      	str	r3, [r6, #0]
 800dd94:	2000      	movs	r0, #0
 800dd96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800de70 <_malloc_r+0xfc>
 800dd9e:	f000 f87b 	bl	800de98 <__malloc_lock>
 800dda2:	f8d8 3000 	ldr.w	r3, [r8]
 800dda6:	461c      	mov	r4, r3
 800dda8:	bb44      	cbnz	r4, 800ddfc <_malloc_r+0x88>
 800ddaa:	4629      	mov	r1, r5
 800ddac:	4630      	mov	r0, r6
 800ddae:	f7ff ffbf 	bl	800dd30 <sbrk_aligned>
 800ddb2:	1c43      	adds	r3, r0, #1
 800ddb4:	4604      	mov	r4, r0
 800ddb6:	d158      	bne.n	800de6a <_malloc_r+0xf6>
 800ddb8:	f8d8 4000 	ldr.w	r4, [r8]
 800ddbc:	4627      	mov	r7, r4
 800ddbe:	2f00      	cmp	r7, #0
 800ddc0:	d143      	bne.n	800de4a <_malloc_r+0xd6>
 800ddc2:	2c00      	cmp	r4, #0
 800ddc4:	d04b      	beq.n	800de5e <_malloc_r+0xea>
 800ddc6:	6823      	ldr	r3, [r4, #0]
 800ddc8:	4639      	mov	r1, r7
 800ddca:	4630      	mov	r0, r6
 800ddcc:	eb04 0903 	add.w	r9, r4, r3
 800ddd0:	f001 f910 	bl	800eff4 <_sbrk_r>
 800ddd4:	4581      	cmp	r9, r0
 800ddd6:	d142      	bne.n	800de5e <_malloc_r+0xea>
 800ddd8:	6821      	ldr	r1, [r4, #0]
 800ddda:	1a6d      	subs	r5, r5, r1
 800dddc:	4629      	mov	r1, r5
 800ddde:	4630      	mov	r0, r6
 800dde0:	f7ff ffa6 	bl	800dd30 <sbrk_aligned>
 800dde4:	3001      	adds	r0, #1
 800dde6:	d03a      	beq.n	800de5e <_malloc_r+0xea>
 800dde8:	6823      	ldr	r3, [r4, #0]
 800ddea:	442b      	add	r3, r5
 800ddec:	6023      	str	r3, [r4, #0]
 800ddee:	f8d8 3000 	ldr.w	r3, [r8]
 800ddf2:	685a      	ldr	r2, [r3, #4]
 800ddf4:	bb62      	cbnz	r2, 800de50 <_malloc_r+0xdc>
 800ddf6:	f8c8 7000 	str.w	r7, [r8]
 800ddfa:	e00f      	b.n	800de1c <_malloc_r+0xa8>
 800ddfc:	6822      	ldr	r2, [r4, #0]
 800ddfe:	1b52      	subs	r2, r2, r5
 800de00:	d420      	bmi.n	800de44 <_malloc_r+0xd0>
 800de02:	2a0b      	cmp	r2, #11
 800de04:	d917      	bls.n	800de36 <_malloc_r+0xc2>
 800de06:	1961      	adds	r1, r4, r5
 800de08:	42a3      	cmp	r3, r4
 800de0a:	6025      	str	r5, [r4, #0]
 800de0c:	bf18      	it	ne
 800de0e:	6059      	strne	r1, [r3, #4]
 800de10:	6863      	ldr	r3, [r4, #4]
 800de12:	bf08      	it	eq
 800de14:	f8c8 1000 	streq.w	r1, [r8]
 800de18:	5162      	str	r2, [r4, r5]
 800de1a:	604b      	str	r3, [r1, #4]
 800de1c:	4630      	mov	r0, r6
 800de1e:	f000 f841 	bl	800dea4 <__malloc_unlock>
 800de22:	f104 000b 	add.w	r0, r4, #11
 800de26:	1d23      	adds	r3, r4, #4
 800de28:	f020 0007 	bic.w	r0, r0, #7
 800de2c:	1ac2      	subs	r2, r0, r3
 800de2e:	bf1c      	itt	ne
 800de30:	1a1b      	subne	r3, r3, r0
 800de32:	50a3      	strne	r3, [r4, r2]
 800de34:	e7af      	b.n	800dd96 <_malloc_r+0x22>
 800de36:	6862      	ldr	r2, [r4, #4]
 800de38:	42a3      	cmp	r3, r4
 800de3a:	bf0c      	ite	eq
 800de3c:	f8c8 2000 	streq.w	r2, [r8]
 800de40:	605a      	strne	r2, [r3, #4]
 800de42:	e7eb      	b.n	800de1c <_malloc_r+0xa8>
 800de44:	4623      	mov	r3, r4
 800de46:	6864      	ldr	r4, [r4, #4]
 800de48:	e7ae      	b.n	800dda8 <_malloc_r+0x34>
 800de4a:	463c      	mov	r4, r7
 800de4c:	687f      	ldr	r7, [r7, #4]
 800de4e:	e7b6      	b.n	800ddbe <_malloc_r+0x4a>
 800de50:	461a      	mov	r2, r3
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	42a3      	cmp	r3, r4
 800de56:	d1fb      	bne.n	800de50 <_malloc_r+0xdc>
 800de58:	2300      	movs	r3, #0
 800de5a:	6053      	str	r3, [r2, #4]
 800de5c:	e7de      	b.n	800de1c <_malloc_r+0xa8>
 800de5e:	230c      	movs	r3, #12
 800de60:	6033      	str	r3, [r6, #0]
 800de62:	4630      	mov	r0, r6
 800de64:	f000 f81e 	bl	800dea4 <__malloc_unlock>
 800de68:	e794      	b.n	800dd94 <_malloc_r+0x20>
 800de6a:	6005      	str	r5, [r0, #0]
 800de6c:	e7d6      	b.n	800de1c <_malloc_r+0xa8>
 800de6e:	bf00      	nop
 800de70:	20002d60 	.word	0x20002d60

0800de74 <__ascii_mbtowc>:
 800de74:	b082      	sub	sp, #8
 800de76:	b901      	cbnz	r1, 800de7a <__ascii_mbtowc+0x6>
 800de78:	a901      	add	r1, sp, #4
 800de7a:	b142      	cbz	r2, 800de8e <__ascii_mbtowc+0x1a>
 800de7c:	b14b      	cbz	r3, 800de92 <__ascii_mbtowc+0x1e>
 800de7e:	7813      	ldrb	r3, [r2, #0]
 800de80:	600b      	str	r3, [r1, #0]
 800de82:	7812      	ldrb	r2, [r2, #0]
 800de84:	1e10      	subs	r0, r2, #0
 800de86:	bf18      	it	ne
 800de88:	2001      	movne	r0, #1
 800de8a:	b002      	add	sp, #8
 800de8c:	4770      	bx	lr
 800de8e:	4610      	mov	r0, r2
 800de90:	e7fb      	b.n	800de8a <__ascii_mbtowc+0x16>
 800de92:	f06f 0001 	mvn.w	r0, #1
 800de96:	e7f8      	b.n	800de8a <__ascii_mbtowc+0x16>

0800de98 <__malloc_lock>:
 800de98:	4801      	ldr	r0, [pc, #4]	@ (800dea0 <__malloc_lock+0x8>)
 800de9a:	f7fe bd4e 	b.w	800c93a <__retarget_lock_acquire_recursive>
 800de9e:	bf00      	nop
 800dea0:	20002d58 	.word	0x20002d58

0800dea4 <__malloc_unlock>:
 800dea4:	4801      	ldr	r0, [pc, #4]	@ (800deac <__malloc_unlock+0x8>)
 800dea6:	f7fe bd49 	b.w	800c93c <__retarget_lock_release_recursive>
 800deaa:	bf00      	nop
 800deac:	20002d58 	.word	0x20002d58

0800deb0 <_Balloc>:
 800deb0:	b570      	push	{r4, r5, r6, lr}
 800deb2:	69c6      	ldr	r6, [r0, #28]
 800deb4:	4604      	mov	r4, r0
 800deb6:	460d      	mov	r5, r1
 800deb8:	b976      	cbnz	r6, 800ded8 <_Balloc+0x28>
 800deba:	2010      	movs	r0, #16
 800debc:	f7ff ff30 	bl	800dd20 <malloc>
 800dec0:	4602      	mov	r2, r0
 800dec2:	61e0      	str	r0, [r4, #28]
 800dec4:	b920      	cbnz	r0, 800ded0 <_Balloc+0x20>
 800dec6:	4b18      	ldr	r3, [pc, #96]	@ (800df28 <_Balloc+0x78>)
 800dec8:	4818      	ldr	r0, [pc, #96]	@ (800df2c <_Balloc+0x7c>)
 800deca:	216b      	movs	r1, #107	@ 0x6b
 800decc:	f001 f8a2 	bl	800f014 <__assert_func>
 800ded0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ded4:	6006      	str	r6, [r0, #0]
 800ded6:	60c6      	str	r6, [r0, #12]
 800ded8:	69e6      	ldr	r6, [r4, #28]
 800deda:	68f3      	ldr	r3, [r6, #12]
 800dedc:	b183      	cbz	r3, 800df00 <_Balloc+0x50>
 800dede:	69e3      	ldr	r3, [r4, #28]
 800dee0:	68db      	ldr	r3, [r3, #12]
 800dee2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dee6:	b9b8      	cbnz	r0, 800df18 <_Balloc+0x68>
 800dee8:	2101      	movs	r1, #1
 800deea:	fa01 f605 	lsl.w	r6, r1, r5
 800deee:	1d72      	adds	r2, r6, #5
 800def0:	0092      	lsls	r2, r2, #2
 800def2:	4620      	mov	r0, r4
 800def4:	f001 f8ac 	bl	800f050 <_calloc_r>
 800def8:	b160      	cbz	r0, 800df14 <_Balloc+0x64>
 800defa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800defe:	e00e      	b.n	800df1e <_Balloc+0x6e>
 800df00:	2221      	movs	r2, #33	@ 0x21
 800df02:	2104      	movs	r1, #4
 800df04:	4620      	mov	r0, r4
 800df06:	f001 f8a3 	bl	800f050 <_calloc_r>
 800df0a:	69e3      	ldr	r3, [r4, #28]
 800df0c:	60f0      	str	r0, [r6, #12]
 800df0e:	68db      	ldr	r3, [r3, #12]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d1e4      	bne.n	800dede <_Balloc+0x2e>
 800df14:	2000      	movs	r0, #0
 800df16:	bd70      	pop	{r4, r5, r6, pc}
 800df18:	6802      	ldr	r2, [r0, #0]
 800df1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df1e:	2300      	movs	r3, #0
 800df20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800df24:	e7f7      	b.n	800df16 <_Balloc+0x66>
 800df26:	bf00      	nop
 800df28:	0800f7c1 	.word	0x0800f7c1
 800df2c:	0800f8a1 	.word	0x0800f8a1

0800df30 <_Bfree>:
 800df30:	b570      	push	{r4, r5, r6, lr}
 800df32:	69c6      	ldr	r6, [r0, #28]
 800df34:	4605      	mov	r5, r0
 800df36:	460c      	mov	r4, r1
 800df38:	b976      	cbnz	r6, 800df58 <_Bfree+0x28>
 800df3a:	2010      	movs	r0, #16
 800df3c:	f7ff fef0 	bl	800dd20 <malloc>
 800df40:	4602      	mov	r2, r0
 800df42:	61e8      	str	r0, [r5, #28]
 800df44:	b920      	cbnz	r0, 800df50 <_Bfree+0x20>
 800df46:	4b09      	ldr	r3, [pc, #36]	@ (800df6c <_Bfree+0x3c>)
 800df48:	4809      	ldr	r0, [pc, #36]	@ (800df70 <_Bfree+0x40>)
 800df4a:	218f      	movs	r1, #143	@ 0x8f
 800df4c:	f001 f862 	bl	800f014 <__assert_func>
 800df50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df54:	6006      	str	r6, [r0, #0]
 800df56:	60c6      	str	r6, [r0, #12]
 800df58:	b13c      	cbz	r4, 800df6a <_Bfree+0x3a>
 800df5a:	69eb      	ldr	r3, [r5, #28]
 800df5c:	6862      	ldr	r2, [r4, #4]
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df64:	6021      	str	r1, [r4, #0]
 800df66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df6a:	bd70      	pop	{r4, r5, r6, pc}
 800df6c:	0800f7c1 	.word	0x0800f7c1
 800df70:	0800f8a1 	.word	0x0800f8a1

0800df74 <__multadd>:
 800df74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df78:	690d      	ldr	r5, [r1, #16]
 800df7a:	4607      	mov	r7, r0
 800df7c:	460c      	mov	r4, r1
 800df7e:	461e      	mov	r6, r3
 800df80:	f101 0c14 	add.w	ip, r1, #20
 800df84:	2000      	movs	r0, #0
 800df86:	f8dc 3000 	ldr.w	r3, [ip]
 800df8a:	b299      	uxth	r1, r3
 800df8c:	fb02 6101 	mla	r1, r2, r1, r6
 800df90:	0c1e      	lsrs	r6, r3, #16
 800df92:	0c0b      	lsrs	r3, r1, #16
 800df94:	fb02 3306 	mla	r3, r2, r6, r3
 800df98:	b289      	uxth	r1, r1
 800df9a:	3001      	adds	r0, #1
 800df9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dfa0:	4285      	cmp	r5, r0
 800dfa2:	f84c 1b04 	str.w	r1, [ip], #4
 800dfa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dfaa:	dcec      	bgt.n	800df86 <__multadd+0x12>
 800dfac:	b30e      	cbz	r6, 800dff2 <__multadd+0x7e>
 800dfae:	68a3      	ldr	r3, [r4, #8]
 800dfb0:	42ab      	cmp	r3, r5
 800dfb2:	dc19      	bgt.n	800dfe8 <__multadd+0x74>
 800dfb4:	6861      	ldr	r1, [r4, #4]
 800dfb6:	4638      	mov	r0, r7
 800dfb8:	3101      	adds	r1, #1
 800dfba:	f7ff ff79 	bl	800deb0 <_Balloc>
 800dfbe:	4680      	mov	r8, r0
 800dfc0:	b928      	cbnz	r0, 800dfce <__multadd+0x5a>
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	4b0c      	ldr	r3, [pc, #48]	@ (800dff8 <__multadd+0x84>)
 800dfc6:	480d      	ldr	r0, [pc, #52]	@ (800dffc <__multadd+0x88>)
 800dfc8:	21ba      	movs	r1, #186	@ 0xba
 800dfca:	f001 f823 	bl	800f014 <__assert_func>
 800dfce:	6922      	ldr	r2, [r4, #16]
 800dfd0:	3202      	adds	r2, #2
 800dfd2:	f104 010c 	add.w	r1, r4, #12
 800dfd6:	0092      	lsls	r2, r2, #2
 800dfd8:	300c      	adds	r0, #12
 800dfda:	f7fe fcb0 	bl	800c93e <memcpy>
 800dfde:	4621      	mov	r1, r4
 800dfe0:	4638      	mov	r0, r7
 800dfe2:	f7ff ffa5 	bl	800df30 <_Bfree>
 800dfe6:	4644      	mov	r4, r8
 800dfe8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dfec:	3501      	adds	r5, #1
 800dfee:	615e      	str	r6, [r3, #20]
 800dff0:	6125      	str	r5, [r4, #16]
 800dff2:	4620      	mov	r0, r4
 800dff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dff8:	0800f830 	.word	0x0800f830
 800dffc:	0800f8a1 	.word	0x0800f8a1

0800e000 <__s2b>:
 800e000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e004:	460c      	mov	r4, r1
 800e006:	4615      	mov	r5, r2
 800e008:	461f      	mov	r7, r3
 800e00a:	2209      	movs	r2, #9
 800e00c:	3308      	adds	r3, #8
 800e00e:	4606      	mov	r6, r0
 800e010:	fb93 f3f2 	sdiv	r3, r3, r2
 800e014:	2100      	movs	r1, #0
 800e016:	2201      	movs	r2, #1
 800e018:	429a      	cmp	r2, r3
 800e01a:	db09      	blt.n	800e030 <__s2b+0x30>
 800e01c:	4630      	mov	r0, r6
 800e01e:	f7ff ff47 	bl	800deb0 <_Balloc>
 800e022:	b940      	cbnz	r0, 800e036 <__s2b+0x36>
 800e024:	4602      	mov	r2, r0
 800e026:	4b19      	ldr	r3, [pc, #100]	@ (800e08c <__s2b+0x8c>)
 800e028:	4819      	ldr	r0, [pc, #100]	@ (800e090 <__s2b+0x90>)
 800e02a:	21d3      	movs	r1, #211	@ 0xd3
 800e02c:	f000 fff2 	bl	800f014 <__assert_func>
 800e030:	0052      	lsls	r2, r2, #1
 800e032:	3101      	adds	r1, #1
 800e034:	e7f0      	b.n	800e018 <__s2b+0x18>
 800e036:	9b08      	ldr	r3, [sp, #32]
 800e038:	6143      	str	r3, [r0, #20]
 800e03a:	2d09      	cmp	r5, #9
 800e03c:	f04f 0301 	mov.w	r3, #1
 800e040:	6103      	str	r3, [r0, #16]
 800e042:	dd16      	ble.n	800e072 <__s2b+0x72>
 800e044:	f104 0909 	add.w	r9, r4, #9
 800e048:	46c8      	mov	r8, r9
 800e04a:	442c      	add	r4, r5
 800e04c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e050:	4601      	mov	r1, r0
 800e052:	3b30      	subs	r3, #48	@ 0x30
 800e054:	220a      	movs	r2, #10
 800e056:	4630      	mov	r0, r6
 800e058:	f7ff ff8c 	bl	800df74 <__multadd>
 800e05c:	45a0      	cmp	r8, r4
 800e05e:	d1f5      	bne.n	800e04c <__s2b+0x4c>
 800e060:	f1a5 0408 	sub.w	r4, r5, #8
 800e064:	444c      	add	r4, r9
 800e066:	1b2d      	subs	r5, r5, r4
 800e068:	1963      	adds	r3, r4, r5
 800e06a:	42bb      	cmp	r3, r7
 800e06c:	db04      	blt.n	800e078 <__s2b+0x78>
 800e06e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e072:	340a      	adds	r4, #10
 800e074:	2509      	movs	r5, #9
 800e076:	e7f6      	b.n	800e066 <__s2b+0x66>
 800e078:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e07c:	4601      	mov	r1, r0
 800e07e:	3b30      	subs	r3, #48	@ 0x30
 800e080:	220a      	movs	r2, #10
 800e082:	4630      	mov	r0, r6
 800e084:	f7ff ff76 	bl	800df74 <__multadd>
 800e088:	e7ee      	b.n	800e068 <__s2b+0x68>
 800e08a:	bf00      	nop
 800e08c:	0800f830 	.word	0x0800f830
 800e090:	0800f8a1 	.word	0x0800f8a1

0800e094 <__hi0bits>:
 800e094:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e098:	4603      	mov	r3, r0
 800e09a:	bf36      	itet	cc
 800e09c:	0403      	lslcc	r3, r0, #16
 800e09e:	2000      	movcs	r0, #0
 800e0a0:	2010      	movcc	r0, #16
 800e0a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e0a6:	bf3c      	itt	cc
 800e0a8:	021b      	lslcc	r3, r3, #8
 800e0aa:	3008      	addcc	r0, #8
 800e0ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e0b0:	bf3c      	itt	cc
 800e0b2:	011b      	lslcc	r3, r3, #4
 800e0b4:	3004      	addcc	r0, #4
 800e0b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e0ba:	bf3c      	itt	cc
 800e0bc:	009b      	lslcc	r3, r3, #2
 800e0be:	3002      	addcc	r0, #2
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	db05      	blt.n	800e0d0 <__hi0bits+0x3c>
 800e0c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e0c8:	f100 0001 	add.w	r0, r0, #1
 800e0cc:	bf08      	it	eq
 800e0ce:	2020      	moveq	r0, #32
 800e0d0:	4770      	bx	lr

0800e0d2 <__lo0bits>:
 800e0d2:	6803      	ldr	r3, [r0, #0]
 800e0d4:	4602      	mov	r2, r0
 800e0d6:	f013 0007 	ands.w	r0, r3, #7
 800e0da:	d00b      	beq.n	800e0f4 <__lo0bits+0x22>
 800e0dc:	07d9      	lsls	r1, r3, #31
 800e0de:	d421      	bmi.n	800e124 <__lo0bits+0x52>
 800e0e0:	0798      	lsls	r0, r3, #30
 800e0e2:	bf49      	itett	mi
 800e0e4:	085b      	lsrmi	r3, r3, #1
 800e0e6:	089b      	lsrpl	r3, r3, #2
 800e0e8:	2001      	movmi	r0, #1
 800e0ea:	6013      	strmi	r3, [r2, #0]
 800e0ec:	bf5c      	itt	pl
 800e0ee:	6013      	strpl	r3, [r2, #0]
 800e0f0:	2002      	movpl	r0, #2
 800e0f2:	4770      	bx	lr
 800e0f4:	b299      	uxth	r1, r3
 800e0f6:	b909      	cbnz	r1, 800e0fc <__lo0bits+0x2a>
 800e0f8:	0c1b      	lsrs	r3, r3, #16
 800e0fa:	2010      	movs	r0, #16
 800e0fc:	b2d9      	uxtb	r1, r3
 800e0fe:	b909      	cbnz	r1, 800e104 <__lo0bits+0x32>
 800e100:	3008      	adds	r0, #8
 800e102:	0a1b      	lsrs	r3, r3, #8
 800e104:	0719      	lsls	r1, r3, #28
 800e106:	bf04      	itt	eq
 800e108:	091b      	lsreq	r3, r3, #4
 800e10a:	3004      	addeq	r0, #4
 800e10c:	0799      	lsls	r1, r3, #30
 800e10e:	bf04      	itt	eq
 800e110:	089b      	lsreq	r3, r3, #2
 800e112:	3002      	addeq	r0, #2
 800e114:	07d9      	lsls	r1, r3, #31
 800e116:	d403      	bmi.n	800e120 <__lo0bits+0x4e>
 800e118:	085b      	lsrs	r3, r3, #1
 800e11a:	f100 0001 	add.w	r0, r0, #1
 800e11e:	d003      	beq.n	800e128 <__lo0bits+0x56>
 800e120:	6013      	str	r3, [r2, #0]
 800e122:	4770      	bx	lr
 800e124:	2000      	movs	r0, #0
 800e126:	4770      	bx	lr
 800e128:	2020      	movs	r0, #32
 800e12a:	4770      	bx	lr

0800e12c <__i2b>:
 800e12c:	b510      	push	{r4, lr}
 800e12e:	460c      	mov	r4, r1
 800e130:	2101      	movs	r1, #1
 800e132:	f7ff febd 	bl	800deb0 <_Balloc>
 800e136:	4602      	mov	r2, r0
 800e138:	b928      	cbnz	r0, 800e146 <__i2b+0x1a>
 800e13a:	4b05      	ldr	r3, [pc, #20]	@ (800e150 <__i2b+0x24>)
 800e13c:	4805      	ldr	r0, [pc, #20]	@ (800e154 <__i2b+0x28>)
 800e13e:	f240 1145 	movw	r1, #325	@ 0x145
 800e142:	f000 ff67 	bl	800f014 <__assert_func>
 800e146:	2301      	movs	r3, #1
 800e148:	6144      	str	r4, [r0, #20]
 800e14a:	6103      	str	r3, [r0, #16]
 800e14c:	bd10      	pop	{r4, pc}
 800e14e:	bf00      	nop
 800e150:	0800f830 	.word	0x0800f830
 800e154:	0800f8a1 	.word	0x0800f8a1

0800e158 <__multiply>:
 800e158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e15c:	4614      	mov	r4, r2
 800e15e:	690a      	ldr	r2, [r1, #16]
 800e160:	6923      	ldr	r3, [r4, #16]
 800e162:	429a      	cmp	r2, r3
 800e164:	bfa8      	it	ge
 800e166:	4623      	movge	r3, r4
 800e168:	460f      	mov	r7, r1
 800e16a:	bfa4      	itt	ge
 800e16c:	460c      	movge	r4, r1
 800e16e:	461f      	movge	r7, r3
 800e170:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e174:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e178:	68a3      	ldr	r3, [r4, #8]
 800e17a:	6861      	ldr	r1, [r4, #4]
 800e17c:	eb0a 0609 	add.w	r6, sl, r9
 800e180:	42b3      	cmp	r3, r6
 800e182:	b085      	sub	sp, #20
 800e184:	bfb8      	it	lt
 800e186:	3101      	addlt	r1, #1
 800e188:	f7ff fe92 	bl	800deb0 <_Balloc>
 800e18c:	b930      	cbnz	r0, 800e19c <__multiply+0x44>
 800e18e:	4602      	mov	r2, r0
 800e190:	4b44      	ldr	r3, [pc, #272]	@ (800e2a4 <__multiply+0x14c>)
 800e192:	4845      	ldr	r0, [pc, #276]	@ (800e2a8 <__multiply+0x150>)
 800e194:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e198:	f000 ff3c 	bl	800f014 <__assert_func>
 800e19c:	f100 0514 	add.w	r5, r0, #20
 800e1a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e1a4:	462b      	mov	r3, r5
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	4543      	cmp	r3, r8
 800e1aa:	d321      	bcc.n	800e1f0 <__multiply+0x98>
 800e1ac:	f107 0114 	add.w	r1, r7, #20
 800e1b0:	f104 0214 	add.w	r2, r4, #20
 800e1b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e1b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e1bc:	9302      	str	r3, [sp, #8]
 800e1be:	1b13      	subs	r3, r2, r4
 800e1c0:	3b15      	subs	r3, #21
 800e1c2:	f023 0303 	bic.w	r3, r3, #3
 800e1c6:	3304      	adds	r3, #4
 800e1c8:	f104 0715 	add.w	r7, r4, #21
 800e1cc:	42ba      	cmp	r2, r7
 800e1ce:	bf38      	it	cc
 800e1d0:	2304      	movcc	r3, #4
 800e1d2:	9301      	str	r3, [sp, #4]
 800e1d4:	9b02      	ldr	r3, [sp, #8]
 800e1d6:	9103      	str	r1, [sp, #12]
 800e1d8:	428b      	cmp	r3, r1
 800e1da:	d80c      	bhi.n	800e1f6 <__multiply+0x9e>
 800e1dc:	2e00      	cmp	r6, #0
 800e1de:	dd03      	ble.n	800e1e8 <__multiply+0x90>
 800e1e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d05b      	beq.n	800e2a0 <__multiply+0x148>
 800e1e8:	6106      	str	r6, [r0, #16]
 800e1ea:	b005      	add	sp, #20
 800e1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1f0:	f843 2b04 	str.w	r2, [r3], #4
 800e1f4:	e7d8      	b.n	800e1a8 <__multiply+0x50>
 800e1f6:	f8b1 a000 	ldrh.w	sl, [r1]
 800e1fa:	f1ba 0f00 	cmp.w	sl, #0
 800e1fe:	d024      	beq.n	800e24a <__multiply+0xf2>
 800e200:	f104 0e14 	add.w	lr, r4, #20
 800e204:	46a9      	mov	r9, r5
 800e206:	f04f 0c00 	mov.w	ip, #0
 800e20a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e20e:	f8d9 3000 	ldr.w	r3, [r9]
 800e212:	fa1f fb87 	uxth.w	fp, r7
 800e216:	b29b      	uxth	r3, r3
 800e218:	fb0a 330b 	mla	r3, sl, fp, r3
 800e21c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e220:	f8d9 7000 	ldr.w	r7, [r9]
 800e224:	4463      	add	r3, ip
 800e226:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e22a:	fb0a c70b 	mla	r7, sl, fp, ip
 800e22e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e232:	b29b      	uxth	r3, r3
 800e234:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e238:	4572      	cmp	r2, lr
 800e23a:	f849 3b04 	str.w	r3, [r9], #4
 800e23e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e242:	d8e2      	bhi.n	800e20a <__multiply+0xb2>
 800e244:	9b01      	ldr	r3, [sp, #4]
 800e246:	f845 c003 	str.w	ip, [r5, r3]
 800e24a:	9b03      	ldr	r3, [sp, #12]
 800e24c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e250:	3104      	adds	r1, #4
 800e252:	f1b9 0f00 	cmp.w	r9, #0
 800e256:	d021      	beq.n	800e29c <__multiply+0x144>
 800e258:	682b      	ldr	r3, [r5, #0]
 800e25a:	f104 0c14 	add.w	ip, r4, #20
 800e25e:	46ae      	mov	lr, r5
 800e260:	f04f 0a00 	mov.w	sl, #0
 800e264:	f8bc b000 	ldrh.w	fp, [ip]
 800e268:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e26c:	fb09 770b 	mla	r7, r9, fp, r7
 800e270:	4457      	add	r7, sl
 800e272:	b29b      	uxth	r3, r3
 800e274:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e278:	f84e 3b04 	str.w	r3, [lr], #4
 800e27c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e280:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e284:	f8be 3000 	ldrh.w	r3, [lr]
 800e288:	fb09 330a 	mla	r3, r9, sl, r3
 800e28c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e290:	4562      	cmp	r2, ip
 800e292:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e296:	d8e5      	bhi.n	800e264 <__multiply+0x10c>
 800e298:	9f01      	ldr	r7, [sp, #4]
 800e29a:	51eb      	str	r3, [r5, r7]
 800e29c:	3504      	adds	r5, #4
 800e29e:	e799      	b.n	800e1d4 <__multiply+0x7c>
 800e2a0:	3e01      	subs	r6, #1
 800e2a2:	e79b      	b.n	800e1dc <__multiply+0x84>
 800e2a4:	0800f830 	.word	0x0800f830
 800e2a8:	0800f8a1 	.word	0x0800f8a1

0800e2ac <__pow5mult>:
 800e2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2b0:	4615      	mov	r5, r2
 800e2b2:	f012 0203 	ands.w	r2, r2, #3
 800e2b6:	4607      	mov	r7, r0
 800e2b8:	460e      	mov	r6, r1
 800e2ba:	d007      	beq.n	800e2cc <__pow5mult+0x20>
 800e2bc:	4c25      	ldr	r4, [pc, #148]	@ (800e354 <__pow5mult+0xa8>)
 800e2be:	3a01      	subs	r2, #1
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e2c6:	f7ff fe55 	bl	800df74 <__multadd>
 800e2ca:	4606      	mov	r6, r0
 800e2cc:	10ad      	asrs	r5, r5, #2
 800e2ce:	d03d      	beq.n	800e34c <__pow5mult+0xa0>
 800e2d0:	69fc      	ldr	r4, [r7, #28]
 800e2d2:	b97c      	cbnz	r4, 800e2f4 <__pow5mult+0x48>
 800e2d4:	2010      	movs	r0, #16
 800e2d6:	f7ff fd23 	bl	800dd20 <malloc>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	61f8      	str	r0, [r7, #28]
 800e2de:	b928      	cbnz	r0, 800e2ec <__pow5mult+0x40>
 800e2e0:	4b1d      	ldr	r3, [pc, #116]	@ (800e358 <__pow5mult+0xac>)
 800e2e2:	481e      	ldr	r0, [pc, #120]	@ (800e35c <__pow5mult+0xb0>)
 800e2e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e2e8:	f000 fe94 	bl	800f014 <__assert_func>
 800e2ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e2f0:	6004      	str	r4, [r0, #0]
 800e2f2:	60c4      	str	r4, [r0, #12]
 800e2f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e2f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e2fc:	b94c      	cbnz	r4, 800e312 <__pow5mult+0x66>
 800e2fe:	f240 2171 	movw	r1, #625	@ 0x271
 800e302:	4638      	mov	r0, r7
 800e304:	f7ff ff12 	bl	800e12c <__i2b>
 800e308:	2300      	movs	r3, #0
 800e30a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e30e:	4604      	mov	r4, r0
 800e310:	6003      	str	r3, [r0, #0]
 800e312:	f04f 0900 	mov.w	r9, #0
 800e316:	07eb      	lsls	r3, r5, #31
 800e318:	d50a      	bpl.n	800e330 <__pow5mult+0x84>
 800e31a:	4631      	mov	r1, r6
 800e31c:	4622      	mov	r2, r4
 800e31e:	4638      	mov	r0, r7
 800e320:	f7ff ff1a 	bl	800e158 <__multiply>
 800e324:	4631      	mov	r1, r6
 800e326:	4680      	mov	r8, r0
 800e328:	4638      	mov	r0, r7
 800e32a:	f7ff fe01 	bl	800df30 <_Bfree>
 800e32e:	4646      	mov	r6, r8
 800e330:	106d      	asrs	r5, r5, #1
 800e332:	d00b      	beq.n	800e34c <__pow5mult+0xa0>
 800e334:	6820      	ldr	r0, [r4, #0]
 800e336:	b938      	cbnz	r0, 800e348 <__pow5mult+0x9c>
 800e338:	4622      	mov	r2, r4
 800e33a:	4621      	mov	r1, r4
 800e33c:	4638      	mov	r0, r7
 800e33e:	f7ff ff0b 	bl	800e158 <__multiply>
 800e342:	6020      	str	r0, [r4, #0]
 800e344:	f8c0 9000 	str.w	r9, [r0]
 800e348:	4604      	mov	r4, r0
 800e34a:	e7e4      	b.n	800e316 <__pow5mult+0x6a>
 800e34c:	4630      	mov	r0, r6
 800e34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e352:	bf00      	nop
 800e354:	0800f8fc 	.word	0x0800f8fc
 800e358:	0800f7c1 	.word	0x0800f7c1
 800e35c:	0800f8a1 	.word	0x0800f8a1

0800e360 <__lshift>:
 800e360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e364:	460c      	mov	r4, r1
 800e366:	6849      	ldr	r1, [r1, #4]
 800e368:	6923      	ldr	r3, [r4, #16]
 800e36a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e36e:	68a3      	ldr	r3, [r4, #8]
 800e370:	4607      	mov	r7, r0
 800e372:	4691      	mov	r9, r2
 800e374:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e378:	f108 0601 	add.w	r6, r8, #1
 800e37c:	42b3      	cmp	r3, r6
 800e37e:	db0b      	blt.n	800e398 <__lshift+0x38>
 800e380:	4638      	mov	r0, r7
 800e382:	f7ff fd95 	bl	800deb0 <_Balloc>
 800e386:	4605      	mov	r5, r0
 800e388:	b948      	cbnz	r0, 800e39e <__lshift+0x3e>
 800e38a:	4602      	mov	r2, r0
 800e38c:	4b28      	ldr	r3, [pc, #160]	@ (800e430 <__lshift+0xd0>)
 800e38e:	4829      	ldr	r0, [pc, #164]	@ (800e434 <__lshift+0xd4>)
 800e390:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e394:	f000 fe3e 	bl	800f014 <__assert_func>
 800e398:	3101      	adds	r1, #1
 800e39a:	005b      	lsls	r3, r3, #1
 800e39c:	e7ee      	b.n	800e37c <__lshift+0x1c>
 800e39e:	2300      	movs	r3, #0
 800e3a0:	f100 0114 	add.w	r1, r0, #20
 800e3a4:	f100 0210 	add.w	r2, r0, #16
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	4553      	cmp	r3, sl
 800e3ac:	db33      	blt.n	800e416 <__lshift+0xb6>
 800e3ae:	6920      	ldr	r0, [r4, #16]
 800e3b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3b4:	f104 0314 	add.w	r3, r4, #20
 800e3b8:	f019 091f 	ands.w	r9, r9, #31
 800e3bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e3c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e3c4:	d02b      	beq.n	800e41e <__lshift+0xbe>
 800e3c6:	f1c9 0e20 	rsb	lr, r9, #32
 800e3ca:	468a      	mov	sl, r1
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	6818      	ldr	r0, [r3, #0]
 800e3d0:	fa00 f009 	lsl.w	r0, r0, r9
 800e3d4:	4310      	orrs	r0, r2
 800e3d6:	f84a 0b04 	str.w	r0, [sl], #4
 800e3da:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3de:	459c      	cmp	ip, r3
 800e3e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800e3e4:	d8f3      	bhi.n	800e3ce <__lshift+0x6e>
 800e3e6:	ebac 0304 	sub.w	r3, ip, r4
 800e3ea:	3b15      	subs	r3, #21
 800e3ec:	f023 0303 	bic.w	r3, r3, #3
 800e3f0:	3304      	adds	r3, #4
 800e3f2:	f104 0015 	add.w	r0, r4, #21
 800e3f6:	4584      	cmp	ip, r0
 800e3f8:	bf38      	it	cc
 800e3fa:	2304      	movcc	r3, #4
 800e3fc:	50ca      	str	r2, [r1, r3]
 800e3fe:	b10a      	cbz	r2, 800e404 <__lshift+0xa4>
 800e400:	f108 0602 	add.w	r6, r8, #2
 800e404:	3e01      	subs	r6, #1
 800e406:	4638      	mov	r0, r7
 800e408:	612e      	str	r6, [r5, #16]
 800e40a:	4621      	mov	r1, r4
 800e40c:	f7ff fd90 	bl	800df30 <_Bfree>
 800e410:	4628      	mov	r0, r5
 800e412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e416:	f842 0f04 	str.w	r0, [r2, #4]!
 800e41a:	3301      	adds	r3, #1
 800e41c:	e7c5      	b.n	800e3aa <__lshift+0x4a>
 800e41e:	3904      	subs	r1, #4
 800e420:	f853 2b04 	ldr.w	r2, [r3], #4
 800e424:	f841 2f04 	str.w	r2, [r1, #4]!
 800e428:	459c      	cmp	ip, r3
 800e42a:	d8f9      	bhi.n	800e420 <__lshift+0xc0>
 800e42c:	e7ea      	b.n	800e404 <__lshift+0xa4>
 800e42e:	bf00      	nop
 800e430:	0800f830 	.word	0x0800f830
 800e434:	0800f8a1 	.word	0x0800f8a1

0800e438 <__mcmp>:
 800e438:	690a      	ldr	r2, [r1, #16]
 800e43a:	4603      	mov	r3, r0
 800e43c:	6900      	ldr	r0, [r0, #16]
 800e43e:	1a80      	subs	r0, r0, r2
 800e440:	b530      	push	{r4, r5, lr}
 800e442:	d10e      	bne.n	800e462 <__mcmp+0x2a>
 800e444:	3314      	adds	r3, #20
 800e446:	3114      	adds	r1, #20
 800e448:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e44c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e450:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e454:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e458:	4295      	cmp	r5, r2
 800e45a:	d003      	beq.n	800e464 <__mcmp+0x2c>
 800e45c:	d205      	bcs.n	800e46a <__mcmp+0x32>
 800e45e:	f04f 30ff 	mov.w	r0, #4294967295
 800e462:	bd30      	pop	{r4, r5, pc}
 800e464:	42a3      	cmp	r3, r4
 800e466:	d3f3      	bcc.n	800e450 <__mcmp+0x18>
 800e468:	e7fb      	b.n	800e462 <__mcmp+0x2a>
 800e46a:	2001      	movs	r0, #1
 800e46c:	e7f9      	b.n	800e462 <__mcmp+0x2a>
	...

0800e470 <__mdiff>:
 800e470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e474:	4689      	mov	r9, r1
 800e476:	4606      	mov	r6, r0
 800e478:	4611      	mov	r1, r2
 800e47a:	4648      	mov	r0, r9
 800e47c:	4614      	mov	r4, r2
 800e47e:	f7ff ffdb 	bl	800e438 <__mcmp>
 800e482:	1e05      	subs	r5, r0, #0
 800e484:	d112      	bne.n	800e4ac <__mdiff+0x3c>
 800e486:	4629      	mov	r1, r5
 800e488:	4630      	mov	r0, r6
 800e48a:	f7ff fd11 	bl	800deb0 <_Balloc>
 800e48e:	4602      	mov	r2, r0
 800e490:	b928      	cbnz	r0, 800e49e <__mdiff+0x2e>
 800e492:	4b3f      	ldr	r3, [pc, #252]	@ (800e590 <__mdiff+0x120>)
 800e494:	f240 2137 	movw	r1, #567	@ 0x237
 800e498:	483e      	ldr	r0, [pc, #248]	@ (800e594 <__mdiff+0x124>)
 800e49a:	f000 fdbb 	bl	800f014 <__assert_func>
 800e49e:	2301      	movs	r3, #1
 800e4a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e4a4:	4610      	mov	r0, r2
 800e4a6:	b003      	add	sp, #12
 800e4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ac:	bfbc      	itt	lt
 800e4ae:	464b      	movlt	r3, r9
 800e4b0:	46a1      	movlt	r9, r4
 800e4b2:	4630      	mov	r0, r6
 800e4b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e4b8:	bfba      	itte	lt
 800e4ba:	461c      	movlt	r4, r3
 800e4bc:	2501      	movlt	r5, #1
 800e4be:	2500      	movge	r5, #0
 800e4c0:	f7ff fcf6 	bl	800deb0 <_Balloc>
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	b918      	cbnz	r0, 800e4d0 <__mdiff+0x60>
 800e4c8:	4b31      	ldr	r3, [pc, #196]	@ (800e590 <__mdiff+0x120>)
 800e4ca:	f240 2145 	movw	r1, #581	@ 0x245
 800e4ce:	e7e3      	b.n	800e498 <__mdiff+0x28>
 800e4d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e4d4:	6926      	ldr	r6, [r4, #16]
 800e4d6:	60c5      	str	r5, [r0, #12]
 800e4d8:	f109 0310 	add.w	r3, r9, #16
 800e4dc:	f109 0514 	add.w	r5, r9, #20
 800e4e0:	f104 0e14 	add.w	lr, r4, #20
 800e4e4:	f100 0b14 	add.w	fp, r0, #20
 800e4e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e4ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e4f0:	9301      	str	r3, [sp, #4]
 800e4f2:	46d9      	mov	r9, fp
 800e4f4:	f04f 0c00 	mov.w	ip, #0
 800e4f8:	9b01      	ldr	r3, [sp, #4]
 800e4fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e4fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e502:	9301      	str	r3, [sp, #4]
 800e504:	fa1f f38a 	uxth.w	r3, sl
 800e508:	4619      	mov	r1, r3
 800e50a:	b283      	uxth	r3, r0
 800e50c:	1acb      	subs	r3, r1, r3
 800e50e:	0c00      	lsrs	r0, r0, #16
 800e510:	4463      	add	r3, ip
 800e512:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e516:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e520:	4576      	cmp	r6, lr
 800e522:	f849 3b04 	str.w	r3, [r9], #4
 800e526:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e52a:	d8e5      	bhi.n	800e4f8 <__mdiff+0x88>
 800e52c:	1b33      	subs	r3, r6, r4
 800e52e:	3b15      	subs	r3, #21
 800e530:	f023 0303 	bic.w	r3, r3, #3
 800e534:	3415      	adds	r4, #21
 800e536:	3304      	adds	r3, #4
 800e538:	42a6      	cmp	r6, r4
 800e53a:	bf38      	it	cc
 800e53c:	2304      	movcc	r3, #4
 800e53e:	441d      	add	r5, r3
 800e540:	445b      	add	r3, fp
 800e542:	461e      	mov	r6, r3
 800e544:	462c      	mov	r4, r5
 800e546:	4544      	cmp	r4, r8
 800e548:	d30e      	bcc.n	800e568 <__mdiff+0xf8>
 800e54a:	f108 0103 	add.w	r1, r8, #3
 800e54e:	1b49      	subs	r1, r1, r5
 800e550:	f021 0103 	bic.w	r1, r1, #3
 800e554:	3d03      	subs	r5, #3
 800e556:	45a8      	cmp	r8, r5
 800e558:	bf38      	it	cc
 800e55a:	2100      	movcc	r1, #0
 800e55c:	440b      	add	r3, r1
 800e55e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e562:	b191      	cbz	r1, 800e58a <__mdiff+0x11a>
 800e564:	6117      	str	r7, [r2, #16]
 800e566:	e79d      	b.n	800e4a4 <__mdiff+0x34>
 800e568:	f854 1b04 	ldr.w	r1, [r4], #4
 800e56c:	46e6      	mov	lr, ip
 800e56e:	0c08      	lsrs	r0, r1, #16
 800e570:	fa1c fc81 	uxtah	ip, ip, r1
 800e574:	4471      	add	r1, lr
 800e576:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e57a:	b289      	uxth	r1, r1
 800e57c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e580:	f846 1b04 	str.w	r1, [r6], #4
 800e584:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e588:	e7dd      	b.n	800e546 <__mdiff+0xd6>
 800e58a:	3f01      	subs	r7, #1
 800e58c:	e7e7      	b.n	800e55e <__mdiff+0xee>
 800e58e:	bf00      	nop
 800e590:	0800f830 	.word	0x0800f830
 800e594:	0800f8a1 	.word	0x0800f8a1

0800e598 <__ulp>:
 800e598:	b082      	sub	sp, #8
 800e59a:	ed8d 0b00 	vstr	d0, [sp]
 800e59e:	9a01      	ldr	r2, [sp, #4]
 800e5a0:	4b0f      	ldr	r3, [pc, #60]	@ (800e5e0 <__ulp+0x48>)
 800e5a2:	4013      	ands	r3, r2
 800e5a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	dc08      	bgt.n	800e5be <__ulp+0x26>
 800e5ac:	425b      	negs	r3, r3
 800e5ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e5b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e5b6:	da04      	bge.n	800e5c2 <__ulp+0x2a>
 800e5b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e5bc:	4113      	asrs	r3, r2
 800e5be:	2200      	movs	r2, #0
 800e5c0:	e008      	b.n	800e5d4 <__ulp+0x3c>
 800e5c2:	f1a2 0314 	sub.w	r3, r2, #20
 800e5c6:	2b1e      	cmp	r3, #30
 800e5c8:	bfda      	itte	le
 800e5ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e5ce:	40da      	lsrle	r2, r3
 800e5d0:	2201      	movgt	r2, #1
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	4610      	mov	r0, r2
 800e5d8:	ec41 0b10 	vmov	d0, r0, r1
 800e5dc:	b002      	add	sp, #8
 800e5de:	4770      	bx	lr
 800e5e0:	7ff00000 	.word	0x7ff00000

0800e5e4 <__b2d>:
 800e5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5e8:	6906      	ldr	r6, [r0, #16]
 800e5ea:	f100 0814 	add.w	r8, r0, #20
 800e5ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e5f2:	1f37      	subs	r7, r6, #4
 800e5f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e5f8:	4610      	mov	r0, r2
 800e5fa:	f7ff fd4b 	bl	800e094 <__hi0bits>
 800e5fe:	f1c0 0320 	rsb	r3, r0, #32
 800e602:	280a      	cmp	r0, #10
 800e604:	600b      	str	r3, [r1, #0]
 800e606:	491b      	ldr	r1, [pc, #108]	@ (800e674 <__b2d+0x90>)
 800e608:	dc15      	bgt.n	800e636 <__b2d+0x52>
 800e60a:	f1c0 0c0b 	rsb	ip, r0, #11
 800e60e:	fa22 f30c 	lsr.w	r3, r2, ip
 800e612:	45b8      	cmp	r8, r7
 800e614:	ea43 0501 	orr.w	r5, r3, r1
 800e618:	bf34      	ite	cc
 800e61a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e61e:	2300      	movcs	r3, #0
 800e620:	3015      	adds	r0, #21
 800e622:	fa02 f000 	lsl.w	r0, r2, r0
 800e626:	fa23 f30c 	lsr.w	r3, r3, ip
 800e62a:	4303      	orrs	r3, r0
 800e62c:	461c      	mov	r4, r3
 800e62e:	ec45 4b10 	vmov	d0, r4, r5
 800e632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e636:	45b8      	cmp	r8, r7
 800e638:	bf3a      	itte	cc
 800e63a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e63e:	f1a6 0708 	subcc.w	r7, r6, #8
 800e642:	2300      	movcs	r3, #0
 800e644:	380b      	subs	r0, #11
 800e646:	d012      	beq.n	800e66e <__b2d+0x8a>
 800e648:	f1c0 0120 	rsb	r1, r0, #32
 800e64c:	fa23 f401 	lsr.w	r4, r3, r1
 800e650:	4082      	lsls	r2, r0
 800e652:	4322      	orrs	r2, r4
 800e654:	4547      	cmp	r7, r8
 800e656:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e65a:	bf8c      	ite	hi
 800e65c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e660:	2200      	movls	r2, #0
 800e662:	4083      	lsls	r3, r0
 800e664:	40ca      	lsrs	r2, r1
 800e666:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e66a:	4313      	orrs	r3, r2
 800e66c:	e7de      	b.n	800e62c <__b2d+0x48>
 800e66e:	ea42 0501 	orr.w	r5, r2, r1
 800e672:	e7db      	b.n	800e62c <__b2d+0x48>
 800e674:	3ff00000 	.word	0x3ff00000

0800e678 <__d2b>:
 800e678:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e67c:	460f      	mov	r7, r1
 800e67e:	2101      	movs	r1, #1
 800e680:	ec59 8b10 	vmov	r8, r9, d0
 800e684:	4616      	mov	r6, r2
 800e686:	f7ff fc13 	bl	800deb0 <_Balloc>
 800e68a:	4604      	mov	r4, r0
 800e68c:	b930      	cbnz	r0, 800e69c <__d2b+0x24>
 800e68e:	4602      	mov	r2, r0
 800e690:	4b23      	ldr	r3, [pc, #140]	@ (800e720 <__d2b+0xa8>)
 800e692:	4824      	ldr	r0, [pc, #144]	@ (800e724 <__d2b+0xac>)
 800e694:	f240 310f 	movw	r1, #783	@ 0x30f
 800e698:	f000 fcbc 	bl	800f014 <__assert_func>
 800e69c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e6a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e6a4:	b10d      	cbz	r5, 800e6aa <__d2b+0x32>
 800e6a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e6aa:	9301      	str	r3, [sp, #4]
 800e6ac:	f1b8 0300 	subs.w	r3, r8, #0
 800e6b0:	d023      	beq.n	800e6fa <__d2b+0x82>
 800e6b2:	4668      	mov	r0, sp
 800e6b4:	9300      	str	r3, [sp, #0]
 800e6b6:	f7ff fd0c 	bl	800e0d2 <__lo0bits>
 800e6ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e6be:	b1d0      	cbz	r0, 800e6f6 <__d2b+0x7e>
 800e6c0:	f1c0 0320 	rsb	r3, r0, #32
 800e6c4:	fa02 f303 	lsl.w	r3, r2, r3
 800e6c8:	430b      	orrs	r3, r1
 800e6ca:	40c2      	lsrs	r2, r0
 800e6cc:	6163      	str	r3, [r4, #20]
 800e6ce:	9201      	str	r2, [sp, #4]
 800e6d0:	9b01      	ldr	r3, [sp, #4]
 800e6d2:	61a3      	str	r3, [r4, #24]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	bf0c      	ite	eq
 800e6d8:	2201      	moveq	r2, #1
 800e6da:	2202      	movne	r2, #2
 800e6dc:	6122      	str	r2, [r4, #16]
 800e6de:	b1a5      	cbz	r5, 800e70a <__d2b+0x92>
 800e6e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e6e4:	4405      	add	r5, r0
 800e6e6:	603d      	str	r5, [r7, #0]
 800e6e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e6ec:	6030      	str	r0, [r6, #0]
 800e6ee:	4620      	mov	r0, r4
 800e6f0:	b003      	add	sp, #12
 800e6f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6f6:	6161      	str	r1, [r4, #20]
 800e6f8:	e7ea      	b.n	800e6d0 <__d2b+0x58>
 800e6fa:	a801      	add	r0, sp, #4
 800e6fc:	f7ff fce9 	bl	800e0d2 <__lo0bits>
 800e700:	9b01      	ldr	r3, [sp, #4]
 800e702:	6163      	str	r3, [r4, #20]
 800e704:	3020      	adds	r0, #32
 800e706:	2201      	movs	r2, #1
 800e708:	e7e8      	b.n	800e6dc <__d2b+0x64>
 800e70a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e70e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e712:	6038      	str	r0, [r7, #0]
 800e714:	6918      	ldr	r0, [r3, #16]
 800e716:	f7ff fcbd 	bl	800e094 <__hi0bits>
 800e71a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e71e:	e7e5      	b.n	800e6ec <__d2b+0x74>
 800e720:	0800f830 	.word	0x0800f830
 800e724:	0800f8a1 	.word	0x0800f8a1

0800e728 <__ratio>:
 800e728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e72c:	b085      	sub	sp, #20
 800e72e:	e9cd 1000 	strd	r1, r0, [sp]
 800e732:	a902      	add	r1, sp, #8
 800e734:	f7ff ff56 	bl	800e5e4 <__b2d>
 800e738:	9800      	ldr	r0, [sp, #0]
 800e73a:	a903      	add	r1, sp, #12
 800e73c:	ec55 4b10 	vmov	r4, r5, d0
 800e740:	f7ff ff50 	bl	800e5e4 <__b2d>
 800e744:	9b01      	ldr	r3, [sp, #4]
 800e746:	6919      	ldr	r1, [r3, #16]
 800e748:	9b00      	ldr	r3, [sp, #0]
 800e74a:	691b      	ldr	r3, [r3, #16]
 800e74c:	1ac9      	subs	r1, r1, r3
 800e74e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e752:	1a9b      	subs	r3, r3, r2
 800e754:	ec5b ab10 	vmov	sl, fp, d0
 800e758:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	bfce      	itee	gt
 800e760:	462a      	movgt	r2, r5
 800e762:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e766:	465a      	movle	r2, fp
 800e768:	462f      	mov	r7, r5
 800e76a:	46d9      	mov	r9, fp
 800e76c:	bfcc      	ite	gt
 800e76e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e772:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e776:	464b      	mov	r3, r9
 800e778:	4652      	mov	r2, sl
 800e77a:	4620      	mov	r0, r4
 800e77c:	4639      	mov	r1, r7
 800e77e:	f7f2 f88d 	bl	800089c <__aeabi_ddiv>
 800e782:	ec41 0b10 	vmov	d0, r0, r1
 800e786:	b005      	add	sp, #20
 800e788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e78c <__copybits>:
 800e78c:	3901      	subs	r1, #1
 800e78e:	b570      	push	{r4, r5, r6, lr}
 800e790:	1149      	asrs	r1, r1, #5
 800e792:	6914      	ldr	r4, [r2, #16]
 800e794:	3101      	adds	r1, #1
 800e796:	f102 0314 	add.w	r3, r2, #20
 800e79a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e79e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e7a2:	1f05      	subs	r5, r0, #4
 800e7a4:	42a3      	cmp	r3, r4
 800e7a6:	d30c      	bcc.n	800e7c2 <__copybits+0x36>
 800e7a8:	1aa3      	subs	r3, r4, r2
 800e7aa:	3b11      	subs	r3, #17
 800e7ac:	f023 0303 	bic.w	r3, r3, #3
 800e7b0:	3211      	adds	r2, #17
 800e7b2:	42a2      	cmp	r2, r4
 800e7b4:	bf88      	it	hi
 800e7b6:	2300      	movhi	r3, #0
 800e7b8:	4418      	add	r0, r3
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	4288      	cmp	r0, r1
 800e7be:	d305      	bcc.n	800e7cc <__copybits+0x40>
 800e7c0:	bd70      	pop	{r4, r5, r6, pc}
 800e7c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800e7c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800e7ca:	e7eb      	b.n	800e7a4 <__copybits+0x18>
 800e7cc:	f840 3b04 	str.w	r3, [r0], #4
 800e7d0:	e7f4      	b.n	800e7bc <__copybits+0x30>

0800e7d2 <__any_on>:
 800e7d2:	f100 0214 	add.w	r2, r0, #20
 800e7d6:	6900      	ldr	r0, [r0, #16]
 800e7d8:	114b      	asrs	r3, r1, #5
 800e7da:	4298      	cmp	r0, r3
 800e7dc:	b510      	push	{r4, lr}
 800e7de:	db11      	blt.n	800e804 <__any_on+0x32>
 800e7e0:	dd0a      	ble.n	800e7f8 <__any_on+0x26>
 800e7e2:	f011 011f 	ands.w	r1, r1, #31
 800e7e6:	d007      	beq.n	800e7f8 <__any_on+0x26>
 800e7e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e7ec:	fa24 f001 	lsr.w	r0, r4, r1
 800e7f0:	fa00 f101 	lsl.w	r1, r0, r1
 800e7f4:	428c      	cmp	r4, r1
 800e7f6:	d10b      	bne.n	800e810 <__any_on+0x3e>
 800e7f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d803      	bhi.n	800e808 <__any_on+0x36>
 800e800:	2000      	movs	r0, #0
 800e802:	bd10      	pop	{r4, pc}
 800e804:	4603      	mov	r3, r0
 800e806:	e7f7      	b.n	800e7f8 <__any_on+0x26>
 800e808:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e80c:	2900      	cmp	r1, #0
 800e80e:	d0f5      	beq.n	800e7fc <__any_on+0x2a>
 800e810:	2001      	movs	r0, #1
 800e812:	e7f6      	b.n	800e802 <__any_on+0x30>

0800e814 <__ascii_wctomb>:
 800e814:	4603      	mov	r3, r0
 800e816:	4608      	mov	r0, r1
 800e818:	b141      	cbz	r1, 800e82c <__ascii_wctomb+0x18>
 800e81a:	2aff      	cmp	r2, #255	@ 0xff
 800e81c:	d904      	bls.n	800e828 <__ascii_wctomb+0x14>
 800e81e:	228a      	movs	r2, #138	@ 0x8a
 800e820:	601a      	str	r2, [r3, #0]
 800e822:	f04f 30ff 	mov.w	r0, #4294967295
 800e826:	4770      	bx	lr
 800e828:	700a      	strb	r2, [r1, #0]
 800e82a:	2001      	movs	r0, #1
 800e82c:	4770      	bx	lr

0800e82e <__ssputs_r>:
 800e82e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e832:	688e      	ldr	r6, [r1, #8]
 800e834:	461f      	mov	r7, r3
 800e836:	42be      	cmp	r6, r7
 800e838:	680b      	ldr	r3, [r1, #0]
 800e83a:	4682      	mov	sl, r0
 800e83c:	460c      	mov	r4, r1
 800e83e:	4690      	mov	r8, r2
 800e840:	d82d      	bhi.n	800e89e <__ssputs_r+0x70>
 800e842:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e846:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e84a:	d026      	beq.n	800e89a <__ssputs_r+0x6c>
 800e84c:	6965      	ldr	r5, [r4, #20]
 800e84e:	6909      	ldr	r1, [r1, #16]
 800e850:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e854:	eba3 0901 	sub.w	r9, r3, r1
 800e858:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e85c:	1c7b      	adds	r3, r7, #1
 800e85e:	444b      	add	r3, r9
 800e860:	106d      	asrs	r5, r5, #1
 800e862:	429d      	cmp	r5, r3
 800e864:	bf38      	it	cc
 800e866:	461d      	movcc	r5, r3
 800e868:	0553      	lsls	r3, r2, #21
 800e86a:	d527      	bpl.n	800e8bc <__ssputs_r+0x8e>
 800e86c:	4629      	mov	r1, r5
 800e86e:	f7ff fa81 	bl	800dd74 <_malloc_r>
 800e872:	4606      	mov	r6, r0
 800e874:	b360      	cbz	r0, 800e8d0 <__ssputs_r+0xa2>
 800e876:	6921      	ldr	r1, [r4, #16]
 800e878:	464a      	mov	r2, r9
 800e87a:	f7fe f860 	bl	800c93e <memcpy>
 800e87e:	89a3      	ldrh	r3, [r4, #12]
 800e880:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e888:	81a3      	strh	r3, [r4, #12]
 800e88a:	6126      	str	r6, [r4, #16]
 800e88c:	6165      	str	r5, [r4, #20]
 800e88e:	444e      	add	r6, r9
 800e890:	eba5 0509 	sub.w	r5, r5, r9
 800e894:	6026      	str	r6, [r4, #0]
 800e896:	60a5      	str	r5, [r4, #8]
 800e898:	463e      	mov	r6, r7
 800e89a:	42be      	cmp	r6, r7
 800e89c:	d900      	bls.n	800e8a0 <__ssputs_r+0x72>
 800e89e:	463e      	mov	r6, r7
 800e8a0:	6820      	ldr	r0, [r4, #0]
 800e8a2:	4632      	mov	r2, r6
 800e8a4:	4641      	mov	r1, r8
 800e8a6:	f000 fb69 	bl	800ef7c <memmove>
 800e8aa:	68a3      	ldr	r3, [r4, #8]
 800e8ac:	1b9b      	subs	r3, r3, r6
 800e8ae:	60a3      	str	r3, [r4, #8]
 800e8b0:	6823      	ldr	r3, [r4, #0]
 800e8b2:	4433      	add	r3, r6
 800e8b4:	6023      	str	r3, [r4, #0]
 800e8b6:	2000      	movs	r0, #0
 800e8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8bc:	462a      	mov	r2, r5
 800e8be:	f000 fbdb 	bl	800f078 <_realloc_r>
 800e8c2:	4606      	mov	r6, r0
 800e8c4:	2800      	cmp	r0, #0
 800e8c6:	d1e0      	bne.n	800e88a <__ssputs_r+0x5c>
 800e8c8:	6921      	ldr	r1, [r4, #16]
 800e8ca:	4650      	mov	r0, sl
 800e8cc:	f7fe fea4 	bl	800d618 <_free_r>
 800e8d0:	230c      	movs	r3, #12
 800e8d2:	f8ca 3000 	str.w	r3, [sl]
 800e8d6:	89a3      	ldrh	r3, [r4, #12]
 800e8d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8dc:	81a3      	strh	r3, [r4, #12]
 800e8de:	f04f 30ff 	mov.w	r0, #4294967295
 800e8e2:	e7e9      	b.n	800e8b8 <__ssputs_r+0x8a>

0800e8e4 <_svfiprintf_r>:
 800e8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e8:	4698      	mov	r8, r3
 800e8ea:	898b      	ldrh	r3, [r1, #12]
 800e8ec:	061b      	lsls	r3, r3, #24
 800e8ee:	b09d      	sub	sp, #116	@ 0x74
 800e8f0:	4607      	mov	r7, r0
 800e8f2:	460d      	mov	r5, r1
 800e8f4:	4614      	mov	r4, r2
 800e8f6:	d510      	bpl.n	800e91a <_svfiprintf_r+0x36>
 800e8f8:	690b      	ldr	r3, [r1, #16]
 800e8fa:	b973      	cbnz	r3, 800e91a <_svfiprintf_r+0x36>
 800e8fc:	2140      	movs	r1, #64	@ 0x40
 800e8fe:	f7ff fa39 	bl	800dd74 <_malloc_r>
 800e902:	6028      	str	r0, [r5, #0]
 800e904:	6128      	str	r0, [r5, #16]
 800e906:	b930      	cbnz	r0, 800e916 <_svfiprintf_r+0x32>
 800e908:	230c      	movs	r3, #12
 800e90a:	603b      	str	r3, [r7, #0]
 800e90c:	f04f 30ff 	mov.w	r0, #4294967295
 800e910:	b01d      	add	sp, #116	@ 0x74
 800e912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e916:	2340      	movs	r3, #64	@ 0x40
 800e918:	616b      	str	r3, [r5, #20]
 800e91a:	2300      	movs	r3, #0
 800e91c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e91e:	2320      	movs	r3, #32
 800e920:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e924:	f8cd 800c 	str.w	r8, [sp, #12]
 800e928:	2330      	movs	r3, #48	@ 0x30
 800e92a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eac8 <_svfiprintf_r+0x1e4>
 800e92e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e932:	f04f 0901 	mov.w	r9, #1
 800e936:	4623      	mov	r3, r4
 800e938:	469a      	mov	sl, r3
 800e93a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e93e:	b10a      	cbz	r2, 800e944 <_svfiprintf_r+0x60>
 800e940:	2a25      	cmp	r2, #37	@ 0x25
 800e942:	d1f9      	bne.n	800e938 <_svfiprintf_r+0x54>
 800e944:	ebba 0b04 	subs.w	fp, sl, r4
 800e948:	d00b      	beq.n	800e962 <_svfiprintf_r+0x7e>
 800e94a:	465b      	mov	r3, fp
 800e94c:	4622      	mov	r2, r4
 800e94e:	4629      	mov	r1, r5
 800e950:	4638      	mov	r0, r7
 800e952:	f7ff ff6c 	bl	800e82e <__ssputs_r>
 800e956:	3001      	adds	r0, #1
 800e958:	f000 80a7 	beq.w	800eaaa <_svfiprintf_r+0x1c6>
 800e95c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e95e:	445a      	add	r2, fp
 800e960:	9209      	str	r2, [sp, #36]	@ 0x24
 800e962:	f89a 3000 	ldrb.w	r3, [sl]
 800e966:	2b00      	cmp	r3, #0
 800e968:	f000 809f 	beq.w	800eaaa <_svfiprintf_r+0x1c6>
 800e96c:	2300      	movs	r3, #0
 800e96e:	f04f 32ff 	mov.w	r2, #4294967295
 800e972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e976:	f10a 0a01 	add.w	sl, sl, #1
 800e97a:	9304      	str	r3, [sp, #16]
 800e97c:	9307      	str	r3, [sp, #28]
 800e97e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e982:	931a      	str	r3, [sp, #104]	@ 0x68
 800e984:	4654      	mov	r4, sl
 800e986:	2205      	movs	r2, #5
 800e988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e98c:	484e      	ldr	r0, [pc, #312]	@ (800eac8 <_svfiprintf_r+0x1e4>)
 800e98e:	f7f1 fc47 	bl	8000220 <memchr>
 800e992:	9a04      	ldr	r2, [sp, #16]
 800e994:	b9d8      	cbnz	r0, 800e9ce <_svfiprintf_r+0xea>
 800e996:	06d0      	lsls	r0, r2, #27
 800e998:	bf44      	itt	mi
 800e99a:	2320      	movmi	r3, #32
 800e99c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9a0:	0711      	lsls	r1, r2, #28
 800e9a2:	bf44      	itt	mi
 800e9a4:	232b      	movmi	r3, #43	@ 0x2b
 800e9a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e9ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9b0:	d015      	beq.n	800e9de <_svfiprintf_r+0xfa>
 800e9b2:	9a07      	ldr	r2, [sp, #28]
 800e9b4:	4654      	mov	r4, sl
 800e9b6:	2000      	movs	r0, #0
 800e9b8:	f04f 0c0a 	mov.w	ip, #10
 800e9bc:	4621      	mov	r1, r4
 800e9be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9c2:	3b30      	subs	r3, #48	@ 0x30
 800e9c4:	2b09      	cmp	r3, #9
 800e9c6:	d94b      	bls.n	800ea60 <_svfiprintf_r+0x17c>
 800e9c8:	b1b0      	cbz	r0, 800e9f8 <_svfiprintf_r+0x114>
 800e9ca:	9207      	str	r2, [sp, #28]
 800e9cc:	e014      	b.n	800e9f8 <_svfiprintf_r+0x114>
 800e9ce:	eba0 0308 	sub.w	r3, r0, r8
 800e9d2:	fa09 f303 	lsl.w	r3, r9, r3
 800e9d6:	4313      	orrs	r3, r2
 800e9d8:	9304      	str	r3, [sp, #16]
 800e9da:	46a2      	mov	sl, r4
 800e9dc:	e7d2      	b.n	800e984 <_svfiprintf_r+0xa0>
 800e9de:	9b03      	ldr	r3, [sp, #12]
 800e9e0:	1d19      	adds	r1, r3, #4
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	9103      	str	r1, [sp, #12]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	bfbb      	ittet	lt
 800e9ea:	425b      	neglt	r3, r3
 800e9ec:	f042 0202 	orrlt.w	r2, r2, #2
 800e9f0:	9307      	strge	r3, [sp, #28]
 800e9f2:	9307      	strlt	r3, [sp, #28]
 800e9f4:	bfb8      	it	lt
 800e9f6:	9204      	strlt	r2, [sp, #16]
 800e9f8:	7823      	ldrb	r3, [r4, #0]
 800e9fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800e9fc:	d10a      	bne.n	800ea14 <_svfiprintf_r+0x130>
 800e9fe:	7863      	ldrb	r3, [r4, #1]
 800ea00:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea02:	d132      	bne.n	800ea6a <_svfiprintf_r+0x186>
 800ea04:	9b03      	ldr	r3, [sp, #12]
 800ea06:	1d1a      	adds	r2, r3, #4
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	9203      	str	r2, [sp, #12]
 800ea0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea10:	3402      	adds	r4, #2
 800ea12:	9305      	str	r3, [sp, #20]
 800ea14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ead8 <_svfiprintf_r+0x1f4>
 800ea18:	7821      	ldrb	r1, [r4, #0]
 800ea1a:	2203      	movs	r2, #3
 800ea1c:	4650      	mov	r0, sl
 800ea1e:	f7f1 fbff 	bl	8000220 <memchr>
 800ea22:	b138      	cbz	r0, 800ea34 <_svfiprintf_r+0x150>
 800ea24:	9b04      	ldr	r3, [sp, #16]
 800ea26:	eba0 000a 	sub.w	r0, r0, sl
 800ea2a:	2240      	movs	r2, #64	@ 0x40
 800ea2c:	4082      	lsls	r2, r0
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	3401      	adds	r4, #1
 800ea32:	9304      	str	r3, [sp, #16]
 800ea34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea38:	4824      	ldr	r0, [pc, #144]	@ (800eacc <_svfiprintf_r+0x1e8>)
 800ea3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea3e:	2206      	movs	r2, #6
 800ea40:	f7f1 fbee 	bl	8000220 <memchr>
 800ea44:	2800      	cmp	r0, #0
 800ea46:	d036      	beq.n	800eab6 <_svfiprintf_r+0x1d2>
 800ea48:	4b21      	ldr	r3, [pc, #132]	@ (800ead0 <_svfiprintf_r+0x1ec>)
 800ea4a:	bb1b      	cbnz	r3, 800ea94 <_svfiprintf_r+0x1b0>
 800ea4c:	9b03      	ldr	r3, [sp, #12]
 800ea4e:	3307      	adds	r3, #7
 800ea50:	f023 0307 	bic.w	r3, r3, #7
 800ea54:	3308      	adds	r3, #8
 800ea56:	9303      	str	r3, [sp, #12]
 800ea58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea5a:	4433      	add	r3, r6
 800ea5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea5e:	e76a      	b.n	800e936 <_svfiprintf_r+0x52>
 800ea60:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea64:	460c      	mov	r4, r1
 800ea66:	2001      	movs	r0, #1
 800ea68:	e7a8      	b.n	800e9bc <_svfiprintf_r+0xd8>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	3401      	adds	r4, #1
 800ea6e:	9305      	str	r3, [sp, #20]
 800ea70:	4619      	mov	r1, r3
 800ea72:	f04f 0c0a 	mov.w	ip, #10
 800ea76:	4620      	mov	r0, r4
 800ea78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea7c:	3a30      	subs	r2, #48	@ 0x30
 800ea7e:	2a09      	cmp	r2, #9
 800ea80:	d903      	bls.n	800ea8a <_svfiprintf_r+0x1a6>
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d0c6      	beq.n	800ea14 <_svfiprintf_r+0x130>
 800ea86:	9105      	str	r1, [sp, #20]
 800ea88:	e7c4      	b.n	800ea14 <_svfiprintf_r+0x130>
 800ea8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea8e:	4604      	mov	r4, r0
 800ea90:	2301      	movs	r3, #1
 800ea92:	e7f0      	b.n	800ea76 <_svfiprintf_r+0x192>
 800ea94:	ab03      	add	r3, sp, #12
 800ea96:	9300      	str	r3, [sp, #0]
 800ea98:	462a      	mov	r2, r5
 800ea9a:	4b0e      	ldr	r3, [pc, #56]	@ (800ead4 <_svfiprintf_r+0x1f0>)
 800ea9c:	a904      	add	r1, sp, #16
 800ea9e:	4638      	mov	r0, r7
 800eaa0:	f7fd f81e 	bl	800bae0 <_printf_float>
 800eaa4:	1c42      	adds	r2, r0, #1
 800eaa6:	4606      	mov	r6, r0
 800eaa8:	d1d6      	bne.n	800ea58 <_svfiprintf_r+0x174>
 800eaaa:	89ab      	ldrh	r3, [r5, #12]
 800eaac:	065b      	lsls	r3, r3, #25
 800eaae:	f53f af2d 	bmi.w	800e90c <_svfiprintf_r+0x28>
 800eab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eab4:	e72c      	b.n	800e910 <_svfiprintf_r+0x2c>
 800eab6:	ab03      	add	r3, sp, #12
 800eab8:	9300      	str	r3, [sp, #0]
 800eaba:	462a      	mov	r2, r5
 800eabc:	4b05      	ldr	r3, [pc, #20]	@ (800ead4 <_svfiprintf_r+0x1f0>)
 800eabe:	a904      	add	r1, sp, #16
 800eac0:	4638      	mov	r0, r7
 800eac2:	f7fd faa5 	bl	800c010 <_printf_i>
 800eac6:	e7ed      	b.n	800eaa4 <_svfiprintf_r+0x1c0>
 800eac8:	0800faf9 	.word	0x0800faf9
 800eacc:	0800fb03 	.word	0x0800fb03
 800ead0:	0800bae1 	.word	0x0800bae1
 800ead4:	0800e82f 	.word	0x0800e82f
 800ead8:	0800faff 	.word	0x0800faff

0800eadc <__sfputc_r>:
 800eadc:	6893      	ldr	r3, [r2, #8]
 800eade:	3b01      	subs	r3, #1
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	b410      	push	{r4}
 800eae4:	6093      	str	r3, [r2, #8]
 800eae6:	da08      	bge.n	800eafa <__sfputc_r+0x1e>
 800eae8:	6994      	ldr	r4, [r2, #24]
 800eaea:	42a3      	cmp	r3, r4
 800eaec:	db01      	blt.n	800eaf2 <__sfputc_r+0x16>
 800eaee:	290a      	cmp	r1, #10
 800eaf0:	d103      	bne.n	800eafa <__sfputc_r+0x1e>
 800eaf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eaf6:	f7fd bdfc 	b.w	800c6f2 <__swbuf_r>
 800eafa:	6813      	ldr	r3, [r2, #0]
 800eafc:	1c58      	adds	r0, r3, #1
 800eafe:	6010      	str	r0, [r2, #0]
 800eb00:	7019      	strb	r1, [r3, #0]
 800eb02:	4608      	mov	r0, r1
 800eb04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb08:	4770      	bx	lr

0800eb0a <__sfputs_r>:
 800eb0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb0c:	4606      	mov	r6, r0
 800eb0e:	460f      	mov	r7, r1
 800eb10:	4614      	mov	r4, r2
 800eb12:	18d5      	adds	r5, r2, r3
 800eb14:	42ac      	cmp	r4, r5
 800eb16:	d101      	bne.n	800eb1c <__sfputs_r+0x12>
 800eb18:	2000      	movs	r0, #0
 800eb1a:	e007      	b.n	800eb2c <__sfputs_r+0x22>
 800eb1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb20:	463a      	mov	r2, r7
 800eb22:	4630      	mov	r0, r6
 800eb24:	f7ff ffda 	bl	800eadc <__sfputc_r>
 800eb28:	1c43      	adds	r3, r0, #1
 800eb2a:	d1f3      	bne.n	800eb14 <__sfputs_r+0xa>
 800eb2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb30 <_vfiprintf_r>:
 800eb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb34:	460d      	mov	r5, r1
 800eb36:	b09d      	sub	sp, #116	@ 0x74
 800eb38:	4614      	mov	r4, r2
 800eb3a:	4698      	mov	r8, r3
 800eb3c:	4606      	mov	r6, r0
 800eb3e:	b118      	cbz	r0, 800eb48 <_vfiprintf_r+0x18>
 800eb40:	6a03      	ldr	r3, [r0, #32]
 800eb42:	b90b      	cbnz	r3, 800eb48 <_vfiprintf_r+0x18>
 800eb44:	f7fd fc10 	bl	800c368 <__sinit>
 800eb48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb4a:	07d9      	lsls	r1, r3, #31
 800eb4c:	d405      	bmi.n	800eb5a <_vfiprintf_r+0x2a>
 800eb4e:	89ab      	ldrh	r3, [r5, #12]
 800eb50:	059a      	lsls	r2, r3, #22
 800eb52:	d402      	bmi.n	800eb5a <_vfiprintf_r+0x2a>
 800eb54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb56:	f7fd fef0 	bl	800c93a <__retarget_lock_acquire_recursive>
 800eb5a:	89ab      	ldrh	r3, [r5, #12]
 800eb5c:	071b      	lsls	r3, r3, #28
 800eb5e:	d501      	bpl.n	800eb64 <_vfiprintf_r+0x34>
 800eb60:	692b      	ldr	r3, [r5, #16]
 800eb62:	b99b      	cbnz	r3, 800eb8c <_vfiprintf_r+0x5c>
 800eb64:	4629      	mov	r1, r5
 800eb66:	4630      	mov	r0, r6
 800eb68:	f7fd fe02 	bl	800c770 <__swsetup_r>
 800eb6c:	b170      	cbz	r0, 800eb8c <_vfiprintf_r+0x5c>
 800eb6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb70:	07dc      	lsls	r4, r3, #31
 800eb72:	d504      	bpl.n	800eb7e <_vfiprintf_r+0x4e>
 800eb74:	f04f 30ff 	mov.w	r0, #4294967295
 800eb78:	b01d      	add	sp, #116	@ 0x74
 800eb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb7e:	89ab      	ldrh	r3, [r5, #12]
 800eb80:	0598      	lsls	r0, r3, #22
 800eb82:	d4f7      	bmi.n	800eb74 <_vfiprintf_r+0x44>
 800eb84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb86:	f7fd fed9 	bl	800c93c <__retarget_lock_release_recursive>
 800eb8a:	e7f3      	b.n	800eb74 <_vfiprintf_r+0x44>
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb90:	2320      	movs	r3, #32
 800eb92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eb96:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb9a:	2330      	movs	r3, #48	@ 0x30
 800eb9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ed4c <_vfiprintf_r+0x21c>
 800eba0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eba4:	f04f 0901 	mov.w	r9, #1
 800eba8:	4623      	mov	r3, r4
 800ebaa:	469a      	mov	sl, r3
 800ebac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebb0:	b10a      	cbz	r2, 800ebb6 <_vfiprintf_r+0x86>
 800ebb2:	2a25      	cmp	r2, #37	@ 0x25
 800ebb4:	d1f9      	bne.n	800ebaa <_vfiprintf_r+0x7a>
 800ebb6:	ebba 0b04 	subs.w	fp, sl, r4
 800ebba:	d00b      	beq.n	800ebd4 <_vfiprintf_r+0xa4>
 800ebbc:	465b      	mov	r3, fp
 800ebbe:	4622      	mov	r2, r4
 800ebc0:	4629      	mov	r1, r5
 800ebc2:	4630      	mov	r0, r6
 800ebc4:	f7ff ffa1 	bl	800eb0a <__sfputs_r>
 800ebc8:	3001      	adds	r0, #1
 800ebca:	f000 80a7 	beq.w	800ed1c <_vfiprintf_r+0x1ec>
 800ebce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebd0:	445a      	add	r2, fp
 800ebd2:	9209      	str	r2, [sp, #36]	@ 0x24
 800ebd4:	f89a 3000 	ldrb.w	r3, [sl]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	f000 809f 	beq.w	800ed1c <_vfiprintf_r+0x1ec>
 800ebde:	2300      	movs	r3, #0
 800ebe0:	f04f 32ff 	mov.w	r2, #4294967295
 800ebe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebe8:	f10a 0a01 	add.w	sl, sl, #1
 800ebec:	9304      	str	r3, [sp, #16]
 800ebee:	9307      	str	r3, [sp, #28]
 800ebf0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ebf4:	931a      	str	r3, [sp, #104]	@ 0x68
 800ebf6:	4654      	mov	r4, sl
 800ebf8:	2205      	movs	r2, #5
 800ebfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebfe:	4853      	ldr	r0, [pc, #332]	@ (800ed4c <_vfiprintf_r+0x21c>)
 800ec00:	f7f1 fb0e 	bl	8000220 <memchr>
 800ec04:	9a04      	ldr	r2, [sp, #16]
 800ec06:	b9d8      	cbnz	r0, 800ec40 <_vfiprintf_r+0x110>
 800ec08:	06d1      	lsls	r1, r2, #27
 800ec0a:	bf44      	itt	mi
 800ec0c:	2320      	movmi	r3, #32
 800ec0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec12:	0713      	lsls	r3, r2, #28
 800ec14:	bf44      	itt	mi
 800ec16:	232b      	movmi	r3, #43	@ 0x2b
 800ec18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ec20:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec22:	d015      	beq.n	800ec50 <_vfiprintf_r+0x120>
 800ec24:	9a07      	ldr	r2, [sp, #28]
 800ec26:	4654      	mov	r4, sl
 800ec28:	2000      	movs	r0, #0
 800ec2a:	f04f 0c0a 	mov.w	ip, #10
 800ec2e:	4621      	mov	r1, r4
 800ec30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec34:	3b30      	subs	r3, #48	@ 0x30
 800ec36:	2b09      	cmp	r3, #9
 800ec38:	d94b      	bls.n	800ecd2 <_vfiprintf_r+0x1a2>
 800ec3a:	b1b0      	cbz	r0, 800ec6a <_vfiprintf_r+0x13a>
 800ec3c:	9207      	str	r2, [sp, #28]
 800ec3e:	e014      	b.n	800ec6a <_vfiprintf_r+0x13a>
 800ec40:	eba0 0308 	sub.w	r3, r0, r8
 800ec44:	fa09 f303 	lsl.w	r3, r9, r3
 800ec48:	4313      	orrs	r3, r2
 800ec4a:	9304      	str	r3, [sp, #16]
 800ec4c:	46a2      	mov	sl, r4
 800ec4e:	e7d2      	b.n	800ebf6 <_vfiprintf_r+0xc6>
 800ec50:	9b03      	ldr	r3, [sp, #12]
 800ec52:	1d19      	adds	r1, r3, #4
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	9103      	str	r1, [sp, #12]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	bfbb      	ittet	lt
 800ec5c:	425b      	neglt	r3, r3
 800ec5e:	f042 0202 	orrlt.w	r2, r2, #2
 800ec62:	9307      	strge	r3, [sp, #28]
 800ec64:	9307      	strlt	r3, [sp, #28]
 800ec66:	bfb8      	it	lt
 800ec68:	9204      	strlt	r2, [sp, #16]
 800ec6a:	7823      	ldrb	r3, [r4, #0]
 800ec6c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ec6e:	d10a      	bne.n	800ec86 <_vfiprintf_r+0x156>
 800ec70:	7863      	ldrb	r3, [r4, #1]
 800ec72:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec74:	d132      	bne.n	800ecdc <_vfiprintf_r+0x1ac>
 800ec76:	9b03      	ldr	r3, [sp, #12]
 800ec78:	1d1a      	adds	r2, r3, #4
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	9203      	str	r2, [sp, #12]
 800ec7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ec82:	3402      	adds	r4, #2
 800ec84:	9305      	str	r3, [sp, #20]
 800ec86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ed5c <_vfiprintf_r+0x22c>
 800ec8a:	7821      	ldrb	r1, [r4, #0]
 800ec8c:	2203      	movs	r2, #3
 800ec8e:	4650      	mov	r0, sl
 800ec90:	f7f1 fac6 	bl	8000220 <memchr>
 800ec94:	b138      	cbz	r0, 800eca6 <_vfiprintf_r+0x176>
 800ec96:	9b04      	ldr	r3, [sp, #16]
 800ec98:	eba0 000a 	sub.w	r0, r0, sl
 800ec9c:	2240      	movs	r2, #64	@ 0x40
 800ec9e:	4082      	lsls	r2, r0
 800eca0:	4313      	orrs	r3, r2
 800eca2:	3401      	adds	r4, #1
 800eca4:	9304      	str	r3, [sp, #16]
 800eca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecaa:	4829      	ldr	r0, [pc, #164]	@ (800ed50 <_vfiprintf_r+0x220>)
 800ecac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ecb0:	2206      	movs	r2, #6
 800ecb2:	f7f1 fab5 	bl	8000220 <memchr>
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	d03f      	beq.n	800ed3a <_vfiprintf_r+0x20a>
 800ecba:	4b26      	ldr	r3, [pc, #152]	@ (800ed54 <_vfiprintf_r+0x224>)
 800ecbc:	bb1b      	cbnz	r3, 800ed06 <_vfiprintf_r+0x1d6>
 800ecbe:	9b03      	ldr	r3, [sp, #12]
 800ecc0:	3307      	adds	r3, #7
 800ecc2:	f023 0307 	bic.w	r3, r3, #7
 800ecc6:	3308      	adds	r3, #8
 800ecc8:	9303      	str	r3, [sp, #12]
 800ecca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eccc:	443b      	add	r3, r7
 800ecce:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecd0:	e76a      	b.n	800eba8 <_vfiprintf_r+0x78>
 800ecd2:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecd6:	460c      	mov	r4, r1
 800ecd8:	2001      	movs	r0, #1
 800ecda:	e7a8      	b.n	800ec2e <_vfiprintf_r+0xfe>
 800ecdc:	2300      	movs	r3, #0
 800ecde:	3401      	adds	r4, #1
 800ece0:	9305      	str	r3, [sp, #20]
 800ece2:	4619      	mov	r1, r3
 800ece4:	f04f 0c0a 	mov.w	ip, #10
 800ece8:	4620      	mov	r0, r4
 800ecea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecee:	3a30      	subs	r2, #48	@ 0x30
 800ecf0:	2a09      	cmp	r2, #9
 800ecf2:	d903      	bls.n	800ecfc <_vfiprintf_r+0x1cc>
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d0c6      	beq.n	800ec86 <_vfiprintf_r+0x156>
 800ecf8:	9105      	str	r1, [sp, #20]
 800ecfa:	e7c4      	b.n	800ec86 <_vfiprintf_r+0x156>
 800ecfc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed00:	4604      	mov	r4, r0
 800ed02:	2301      	movs	r3, #1
 800ed04:	e7f0      	b.n	800ece8 <_vfiprintf_r+0x1b8>
 800ed06:	ab03      	add	r3, sp, #12
 800ed08:	9300      	str	r3, [sp, #0]
 800ed0a:	462a      	mov	r2, r5
 800ed0c:	4b12      	ldr	r3, [pc, #72]	@ (800ed58 <_vfiprintf_r+0x228>)
 800ed0e:	a904      	add	r1, sp, #16
 800ed10:	4630      	mov	r0, r6
 800ed12:	f7fc fee5 	bl	800bae0 <_printf_float>
 800ed16:	4607      	mov	r7, r0
 800ed18:	1c78      	adds	r0, r7, #1
 800ed1a:	d1d6      	bne.n	800ecca <_vfiprintf_r+0x19a>
 800ed1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed1e:	07d9      	lsls	r1, r3, #31
 800ed20:	d405      	bmi.n	800ed2e <_vfiprintf_r+0x1fe>
 800ed22:	89ab      	ldrh	r3, [r5, #12]
 800ed24:	059a      	lsls	r2, r3, #22
 800ed26:	d402      	bmi.n	800ed2e <_vfiprintf_r+0x1fe>
 800ed28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed2a:	f7fd fe07 	bl	800c93c <__retarget_lock_release_recursive>
 800ed2e:	89ab      	ldrh	r3, [r5, #12]
 800ed30:	065b      	lsls	r3, r3, #25
 800ed32:	f53f af1f 	bmi.w	800eb74 <_vfiprintf_r+0x44>
 800ed36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed38:	e71e      	b.n	800eb78 <_vfiprintf_r+0x48>
 800ed3a:	ab03      	add	r3, sp, #12
 800ed3c:	9300      	str	r3, [sp, #0]
 800ed3e:	462a      	mov	r2, r5
 800ed40:	4b05      	ldr	r3, [pc, #20]	@ (800ed58 <_vfiprintf_r+0x228>)
 800ed42:	a904      	add	r1, sp, #16
 800ed44:	4630      	mov	r0, r6
 800ed46:	f7fd f963 	bl	800c010 <_printf_i>
 800ed4a:	e7e4      	b.n	800ed16 <_vfiprintf_r+0x1e6>
 800ed4c:	0800faf9 	.word	0x0800faf9
 800ed50:	0800fb03 	.word	0x0800fb03
 800ed54:	0800bae1 	.word	0x0800bae1
 800ed58:	0800eb0b 	.word	0x0800eb0b
 800ed5c:	0800faff 	.word	0x0800faff

0800ed60 <__sflush_r>:
 800ed60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed68:	0716      	lsls	r6, r2, #28
 800ed6a:	4605      	mov	r5, r0
 800ed6c:	460c      	mov	r4, r1
 800ed6e:	d454      	bmi.n	800ee1a <__sflush_r+0xba>
 800ed70:	684b      	ldr	r3, [r1, #4]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	dc02      	bgt.n	800ed7c <__sflush_r+0x1c>
 800ed76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	dd48      	ble.n	800ee0e <__sflush_r+0xae>
 800ed7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ed7e:	2e00      	cmp	r6, #0
 800ed80:	d045      	beq.n	800ee0e <__sflush_r+0xae>
 800ed82:	2300      	movs	r3, #0
 800ed84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ed88:	682f      	ldr	r7, [r5, #0]
 800ed8a:	6a21      	ldr	r1, [r4, #32]
 800ed8c:	602b      	str	r3, [r5, #0]
 800ed8e:	d030      	beq.n	800edf2 <__sflush_r+0x92>
 800ed90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ed92:	89a3      	ldrh	r3, [r4, #12]
 800ed94:	0759      	lsls	r1, r3, #29
 800ed96:	d505      	bpl.n	800eda4 <__sflush_r+0x44>
 800ed98:	6863      	ldr	r3, [r4, #4]
 800ed9a:	1ad2      	subs	r2, r2, r3
 800ed9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ed9e:	b10b      	cbz	r3, 800eda4 <__sflush_r+0x44>
 800eda0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eda2:	1ad2      	subs	r2, r2, r3
 800eda4:	2300      	movs	r3, #0
 800eda6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eda8:	6a21      	ldr	r1, [r4, #32]
 800edaa:	4628      	mov	r0, r5
 800edac:	47b0      	blx	r6
 800edae:	1c43      	adds	r3, r0, #1
 800edb0:	89a3      	ldrh	r3, [r4, #12]
 800edb2:	d106      	bne.n	800edc2 <__sflush_r+0x62>
 800edb4:	6829      	ldr	r1, [r5, #0]
 800edb6:	291d      	cmp	r1, #29
 800edb8:	d82b      	bhi.n	800ee12 <__sflush_r+0xb2>
 800edba:	4a2a      	ldr	r2, [pc, #168]	@ (800ee64 <__sflush_r+0x104>)
 800edbc:	410a      	asrs	r2, r1
 800edbe:	07d6      	lsls	r6, r2, #31
 800edc0:	d427      	bmi.n	800ee12 <__sflush_r+0xb2>
 800edc2:	2200      	movs	r2, #0
 800edc4:	6062      	str	r2, [r4, #4]
 800edc6:	04d9      	lsls	r1, r3, #19
 800edc8:	6922      	ldr	r2, [r4, #16]
 800edca:	6022      	str	r2, [r4, #0]
 800edcc:	d504      	bpl.n	800edd8 <__sflush_r+0x78>
 800edce:	1c42      	adds	r2, r0, #1
 800edd0:	d101      	bne.n	800edd6 <__sflush_r+0x76>
 800edd2:	682b      	ldr	r3, [r5, #0]
 800edd4:	b903      	cbnz	r3, 800edd8 <__sflush_r+0x78>
 800edd6:	6560      	str	r0, [r4, #84]	@ 0x54
 800edd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800edda:	602f      	str	r7, [r5, #0]
 800eddc:	b1b9      	cbz	r1, 800ee0e <__sflush_r+0xae>
 800edde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ede2:	4299      	cmp	r1, r3
 800ede4:	d002      	beq.n	800edec <__sflush_r+0x8c>
 800ede6:	4628      	mov	r0, r5
 800ede8:	f7fe fc16 	bl	800d618 <_free_r>
 800edec:	2300      	movs	r3, #0
 800edee:	6363      	str	r3, [r4, #52]	@ 0x34
 800edf0:	e00d      	b.n	800ee0e <__sflush_r+0xae>
 800edf2:	2301      	movs	r3, #1
 800edf4:	4628      	mov	r0, r5
 800edf6:	47b0      	blx	r6
 800edf8:	4602      	mov	r2, r0
 800edfa:	1c50      	adds	r0, r2, #1
 800edfc:	d1c9      	bne.n	800ed92 <__sflush_r+0x32>
 800edfe:	682b      	ldr	r3, [r5, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d0c6      	beq.n	800ed92 <__sflush_r+0x32>
 800ee04:	2b1d      	cmp	r3, #29
 800ee06:	d001      	beq.n	800ee0c <__sflush_r+0xac>
 800ee08:	2b16      	cmp	r3, #22
 800ee0a:	d11e      	bne.n	800ee4a <__sflush_r+0xea>
 800ee0c:	602f      	str	r7, [r5, #0]
 800ee0e:	2000      	movs	r0, #0
 800ee10:	e022      	b.n	800ee58 <__sflush_r+0xf8>
 800ee12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee16:	b21b      	sxth	r3, r3
 800ee18:	e01b      	b.n	800ee52 <__sflush_r+0xf2>
 800ee1a:	690f      	ldr	r7, [r1, #16]
 800ee1c:	2f00      	cmp	r7, #0
 800ee1e:	d0f6      	beq.n	800ee0e <__sflush_r+0xae>
 800ee20:	0793      	lsls	r3, r2, #30
 800ee22:	680e      	ldr	r6, [r1, #0]
 800ee24:	bf08      	it	eq
 800ee26:	694b      	ldreq	r3, [r1, #20]
 800ee28:	600f      	str	r7, [r1, #0]
 800ee2a:	bf18      	it	ne
 800ee2c:	2300      	movne	r3, #0
 800ee2e:	eba6 0807 	sub.w	r8, r6, r7
 800ee32:	608b      	str	r3, [r1, #8]
 800ee34:	f1b8 0f00 	cmp.w	r8, #0
 800ee38:	dde9      	ble.n	800ee0e <__sflush_r+0xae>
 800ee3a:	6a21      	ldr	r1, [r4, #32]
 800ee3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ee3e:	4643      	mov	r3, r8
 800ee40:	463a      	mov	r2, r7
 800ee42:	4628      	mov	r0, r5
 800ee44:	47b0      	blx	r6
 800ee46:	2800      	cmp	r0, #0
 800ee48:	dc08      	bgt.n	800ee5c <__sflush_r+0xfc>
 800ee4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee52:	81a3      	strh	r3, [r4, #12]
 800ee54:	f04f 30ff 	mov.w	r0, #4294967295
 800ee58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee5c:	4407      	add	r7, r0
 800ee5e:	eba8 0800 	sub.w	r8, r8, r0
 800ee62:	e7e7      	b.n	800ee34 <__sflush_r+0xd4>
 800ee64:	dfbffffe 	.word	0xdfbffffe

0800ee68 <_fflush_r>:
 800ee68:	b538      	push	{r3, r4, r5, lr}
 800ee6a:	690b      	ldr	r3, [r1, #16]
 800ee6c:	4605      	mov	r5, r0
 800ee6e:	460c      	mov	r4, r1
 800ee70:	b913      	cbnz	r3, 800ee78 <_fflush_r+0x10>
 800ee72:	2500      	movs	r5, #0
 800ee74:	4628      	mov	r0, r5
 800ee76:	bd38      	pop	{r3, r4, r5, pc}
 800ee78:	b118      	cbz	r0, 800ee82 <_fflush_r+0x1a>
 800ee7a:	6a03      	ldr	r3, [r0, #32]
 800ee7c:	b90b      	cbnz	r3, 800ee82 <_fflush_r+0x1a>
 800ee7e:	f7fd fa73 	bl	800c368 <__sinit>
 800ee82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d0f3      	beq.n	800ee72 <_fflush_r+0xa>
 800ee8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ee8c:	07d0      	lsls	r0, r2, #31
 800ee8e:	d404      	bmi.n	800ee9a <_fflush_r+0x32>
 800ee90:	0599      	lsls	r1, r3, #22
 800ee92:	d402      	bmi.n	800ee9a <_fflush_r+0x32>
 800ee94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee96:	f7fd fd50 	bl	800c93a <__retarget_lock_acquire_recursive>
 800ee9a:	4628      	mov	r0, r5
 800ee9c:	4621      	mov	r1, r4
 800ee9e:	f7ff ff5f 	bl	800ed60 <__sflush_r>
 800eea2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eea4:	07da      	lsls	r2, r3, #31
 800eea6:	4605      	mov	r5, r0
 800eea8:	d4e4      	bmi.n	800ee74 <_fflush_r+0xc>
 800eeaa:	89a3      	ldrh	r3, [r4, #12]
 800eeac:	059b      	lsls	r3, r3, #22
 800eeae:	d4e1      	bmi.n	800ee74 <_fflush_r+0xc>
 800eeb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eeb2:	f7fd fd43 	bl	800c93c <__retarget_lock_release_recursive>
 800eeb6:	e7dd      	b.n	800ee74 <_fflush_r+0xc>

0800eeb8 <__swhatbuf_r>:
 800eeb8:	b570      	push	{r4, r5, r6, lr}
 800eeba:	460c      	mov	r4, r1
 800eebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eec0:	2900      	cmp	r1, #0
 800eec2:	b096      	sub	sp, #88	@ 0x58
 800eec4:	4615      	mov	r5, r2
 800eec6:	461e      	mov	r6, r3
 800eec8:	da0d      	bge.n	800eee6 <__swhatbuf_r+0x2e>
 800eeca:	89a3      	ldrh	r3, [r4, #12]
 800eecc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eed0:	f04f 0100 	mov.w	r1, #0
 800eed4:	bf14      	ite	ne
 800eed6:	2340      	movne	r3, #64	@ 0x40
 800eed8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800eedc:	2000      	movs	r0, #0
 800eede:	6031      	str	r1, [r6, #0]
 800eee0:	602b      	str	r3, [r5, #0]
 800eee2:	b016      	add	sp, #88	@ 0x58
 800eee4:	bd70      	pop	{r4, r5, r6, pc}
 800eee6:	466a      	mov	r2, sp
 800eee8:	f000 f862 	bl	800efb0 <_fstat_r>
 800eeec:	2800      	cmp	r0, #0
 800eeee:	dbec      	blt.n	800eeca <__swhatbuf_r+0x12>
 800eef0:	9901      	ldr	r1, [sp, #4]
 800eef2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800eef6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800eefa:	4259      	negs	r1, r3
 800eefc:	4159      	adcs	r1, r3
 800eefe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef02:	e7eb      	b.n	800eedc <__swhatbuf_r+0x24>

0800ef04 <__smakebuf_r>:
 800ef04:	898b      	ldrh	r3, [r1, #12]
 800ef06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef08:	079d      	lsls	r5, r3, #30
 800ef0a:	4606      	mov	r6, r0
 800ef0c:	460c      	mov	r4, r1
 800ef0e:	d507      	bpl.n	800ef20 <__smakebuf_r+0x1c>
 800ef10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ef14:	6023      	str	r3, [r4, #0]
 800ef16:	6123      	str	r3, [r4, #16]
 800ef18:	2301      	movs	r3, #1
 800ef1a:	6163      	str	r3, [r4, #20]
 800ef1c:	b003      	add	sp, #12
 800ef1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef20:	ab01      	add	r3, sp, #4
 800ef22:	466a      	mov	r2, sp
 800ef24:	f7ff ffc8 	bl	800eeb8 <__swhatbuf_r>
 800ef28:	9f00      	ldr	r7, [sp, #0]
 800ef2a:	4605      	mov	r5, r0
 800ef2c:	4639      	mov	r1, r7
 800ef2e:	4630      	mov	r0, r6
 800ef30:	f7fe ff20 	bl	800dd74 <_malloc_r>
 800ef34:	b948      	cbnz	r0, 800ef4a <__smakebuf_r+0x46>
 800ef36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef3a:	059a      	lsls	r2, r3, #22
 800ef3c:	d4ee      	bmi.n	800ef1c <__smakebuf_r+0x18>
 800ef3e:	f023 0303 	bic.w	r3, r3, #3
 800ef42:	f043 0302 	orr.w	r3, r3, #2
 800ef46:	81a3      	strh	r3, [r4, #12]
 800ef48:	e7e2      	b.n	800ef10 <__smakebuf_r+0xc>
 800ef4a:	89a3      	ldrh	r3, [r4, #12]
 800ef4c:	6020      	str	r0, [r4, #0]
 800ef4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef52:	81a3      	strh	r3, [r4, #12]
 800ef54:	9b01      	ldr	r3, [sp, #4]
 800ef56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ef5a:	b15b      	cbz	r3, 800ef74 <__smakebuf_r+0x70>
 800ef5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef60:	4630      	mov	r0, r6
 800ef62:	f000 f837 	bl	800efd4 <_isatty_r>
 800ef66:	b128      	cbz	r0, 800ef74 <__smakebuf_r+0x70>
 800ef68:	89a3      	ldrh	r3, [r4, #12]
 800ef6a:	f023 0303 	bic.w	r3, r3, #3
 800ef6e:	f043 0301 	orr.w	r3, r3, #1
 800ef72:	81a3      	strh	r3, [r4, #12]
 800ef74:	89a3      	ldrh	r3, [r4, #12]
 800ef76:	431d      	orrs	r5, r3
 800ef78:	81a5      	strh	r5, [r4, #12]
 800ef7a:	e7cf      	b.n	800ef1c <__smakebuf_r+0x18>

0800ef7c <memmove>:
 800ef7c:	4288      	cmp	r0, r1
 800ef7e:	b510      	push	{r4, lr}
 800ef80:	eb01 0402 	add.w	r4, r1, r2
 800ef84:	d902      	bls.n	800ef8c <memmove+0x10>
 800ef86:	4284      	cmp	r4, r0
 800ef88:	4623      	mov	r3, r4
 800ef8a:	d807      	bhi.n	800ef9c <memmove+0x20>
 800ef8c:	1e43      	subs	r3, r0, #1
 800ef8e:	42a1      	cmp	r1, r4
 800ef90:	d008      	beq.n	800efa4 <memmove+0x28>
 800ef92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef96:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef9a:	e7f8      	b.n	800ef8e <memmove+0x12>
 800ef9c:	4402      	add	r2, r0
 800ef9e:	4601      	mov	r1, r0
 800efa0:	428a      	cmp	r2, r1
 800efa2:	d100      	bne.n	800efa6 <memmove+0x2a>
 800efa4:	bd10      	pop	{r4, pc}
 800efa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efae:	e7f7      	b.n	800efa0 <memmove+0x24>

0800efb0 <_fstat_r>:
 800efb0:	b538      	push	{r3, r4, r5, lr}
 800efb2:	4d07      	ldr	r5, [pc, #28]	@ (800efd0 <_fstat_r+0x20>)
 800efb4:	2300      	movs	r3, #0
 800efb6:	4604      	mov	r4, r0
 800efb8:	4608      	mov	r0, r1
 800efba:	4611      	mov	r1, r2
 800efbc:	602b      	str	r3, [r5, #0]
 800efbe:	f7f3 fb6f 	bl	80026a0 <_fstat>
 800efc2:	1c43      	adds	r3, r0, #1
 800efc4:	d102      	bne.n	800efcc <_fstat_r+0x1c>
 800efc6:	682b      	ldr	r3, [r5, #0]
 800efc8:	b103      	cbz	r3, 800efcc <_fstat_r+0x1c>
 800efca:	6023      	str	r3, [r4, #0]
 800efcc:	bd38      	pop	{r3, r4, r5, pc}
 800efce:	bf00      	nop
 800efd0:	20002d54 	.word	0x20002d54

0800efd4 <_isatty_r>:
 800efd4:	b538      	push	{r3, r4, r5, lr}
 800efd6:	4d06      	ldr	r5, [pc, #24]	@ (800eff0 <_isatty_r+0x1c>)
 800efd8:	2300      	movs	r3, #0
 800efda:	4604      	mov	r4, r0
 800efdc:	4608      	mov	r0, r1
 800efde:	602b      	str	r3, [r5, #0]
 800efe0:	f7f3 fb6e 	bl	80026c0 <_isatty>
 800efe4:	1c43      	adds	r3, r0, #1
 800efe6:	d102      	bne.n	800efee <_isatty_r+0x1a>
 800efe8:	682b      	ldr	r3, [r5, #0]
 800efea:	b103      	cbz	r3, 800efee <_isatty_r+0x1a>
 800efec:	6023      	str	r3, [r4, #0]
 800efee:	bd38      	pop	{r3, r4, r5, pc}
 800eff0:	20002d54 	.word	0x20002d54

0800eff4 <_sbrk_r>:
 800eff4:	b538      	push	{r3, r4, r5, lr}
 800eff6:	4d06      	ldr	r5, [pc, #24]	@ (800f010 <_sbrk_r+0x1c>)
 800eff8:	2300      	movs	r3, #0
 800effa:	4604      	mov	r4, r0
 800effc:	4608      	mov	r0, r1
 800effe:	602b      	str	r3, [r5, #0]
 800f000:	f7f3 fb76 	bl	80026f0 <_sbrk>
 800f004:	1c43      	adds	r3, r0, #1
 800f006:	d102      	bne.n	800f00e <_sbrk_r+0x1a>
 800f008:	682b      	ldr	r3, [r5, #0]
 800f00a:	b103      	cbz	r3, 800f00e <_sbrk_r+0x1a>
 800f00c:	6023      	str	r3, [r4, #0]
 800f00e:	bd38      	pop	{r3, r4, r5, pc}
 800f010:	20002d54 	.word	0x20002d54

0800f014 <__assert_func>:
 800f014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f016:	4614      	mov	r4, r2
 800f018:	461a      	mov	r2, r3
 800f01a:	4b09      	ldr	r3, [pc, #36]	@ (800f040 <__assert_func+0x2c>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	4605      	mov	r5, r0
 800f020:	68d8      	ldr	r0, [r3, #12]
 800f022:	b954      	cbnz	r4, 800f03a <__assert_func+0x26>
 800f024:	4b07      	ldr	r3, [pc, #28]	@ (800f044 <__assert_func+0x30>)
 800f026:	461c      	mov	r4, r3
 800f028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f02c:	9100      	str	r1, [sp, #0]
 800f02e:	462b      	mov	r3, r5
 800f030:	4905      	ldr	r1, [pc, #20]	@ (800f048 <__assert_func+0x34>)
 800f032:	f000 f84f 	bl	800f0d4 <fiprintf>
 800f036:	f000 f85f 	bl	800f0f8 <abort>
 800f03a:	4b04      	ldr	r3, [pc, #16]	@ (800f04c <__assert_func+0x38>)
 800f03c:	e7f4      	b.n	800f028 <__assert_func+0x14>
 800f03e:	bf00      	nop
 800f040:	200001a0 	.word	0x200001a0
 800f044:	0800fb45 	.word	0x0800fb45
 800f048:	0800fb17 	.word	0x0800fb17
 800f04c:	0800fb0a 	.word	0x0800fb0a

0800f050 <_calloc_r>:
 800f050:	b570      	push	{r4, r5, r6, lr}
 800f052:	fba1 5402 	umull	r5, r4, r1, r2
 800f056:	b93c      	cbnz	r4, 800f068 <_calloc_r+0x18>
 800f058:	4629      	mov	r1, r5
 800f05a:	f7fe fe8b 	bl	800dd74 <_malloc_r>
 800f05e:	4606      	mov	r6, r0
 800f060:	b928      	cbnz	r0, 800f06e <_calloc_r+0x1e>
 800f062:	2600      	movs	r6, #0
 800f064:	4630      	mov	r0, r6
 800f066:	bd70      	pop	{r4, r5, r6, pc}
 800f068:	220c      	movs	r2, #12
 800f06a:	6002      	str	r2, [r0, #0]
 800f06c:	e7f9      	b.n	800f062 <_calloc_r+0x12>
 800f06e:	462a      	mov	r2, r5
 800f070:	4621      	mov	r1, r4
 800f072:	f7fd fbd3 	bl	800c81c <memset>
 800f076:	e7f5      	b.n	800f064 <_calloc_r+0x14>

0800f078 <_realloc_r>:
 800f078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f07c:	4680      	mov	r8, r0
 800f07e:	4615      	mov	r5, r2
 800f080:	460c      	mov	r4, r1
 800f082:	b921      	cbnz	r1, 800f08e <_realloc_r+0x16>
 800f084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f088:	4611      	mov	r1, r2
 800f08a:	f7fe be73 	b.w	800dd74 <_malloc_r>
 800f08e:	b92a      	cbnz	r2, 800f09c <_realloc_r+0x24>
 800f090:	f7fe fac2 	bl	800d618 <_free_r>
 800f094:	2400      	movs	r4, #0
 800f096:	4620      	mov	r0, r4
 800f098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f09c:	f000 f833 	bl	800f106 <_malloc_usable_size_r>
 800f0a0:	4285      	cmp	r5, r0
 800f0a2:	4606      	mov	r6, r0
 800f0a4:	d802      	bhi.n	800f0ac <_realloc_r+0x34>
 800f0a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f0aa:	d8f4      	bhi.n	800f096 <_realloc_r+0x1e>
 800f0ac:	4629      	mov	r1, r5
 800f0ae:	4640      	mov	r0, r8
 800f0b0:	f7fe fe60 	bl	800dd74 <_malloc_r>
 800f0b4:	4607      	mov	r7, r0
 800f0b6:	2800      	cmp	r0, #0
 800f0b8:	d0ec      	beq.n	800f094 <_realloc_r+0x1c>
 800f0ba:	42b5      	cmp	r5, r6
 800f0bc:	462a      	mov	r2, r5
 800f0be:	4621      	mov	r1, r4
 800f0c0:	bf28      	it	cs
 800f0c2:	4632      	movcs	r2, r6
 800f0c4:	f7fd fc3b 	bl	800c93e <memcpy>
 800f0c8:	4621      	mov	r1, r4
 800f0ca:	4640      	mov	r0, r8
 800f0cc:	f7fe faa4 	bl	800d618 <_free_r>
 800f0d0:	463c      	mov	r4, r7
 800f0d2:	e7e0      	b.n	800f096 <_realloc_r+0x1e>

0800f0d4 <fiprintf>:
 800f0d4:	b40e      	push	{r1, r2, r3}
 800f0d6:	b503      	push	{r0, r1, lr}
 800f0d8:	4601      	mov	r1, r0
 800f0da:	ab03      	add	r3, sp, #12
 800f0dc:	4805      	ldr	r0, [pc, #20]	@ (800f0f4 <fiprintf+0x20>)
 800f0de:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0e2:	6800      	ldr	r0, [r0, #0]
 800f0e4:	9301      	str	r3, [sp, #4]
 800f0e6:	f7ff fd23 	bl	800eb30 <_vfiprintf_r>
 800f0ea:	b002      	add	sp, #8
 800f0ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0f0:	b003      	add	sp, #12
 800f0f2:	4770      	bx	lr
 800f0f4:	200001a0 	.word	0x200001a0

0800f0f8 <abort>:
 800f0f8:	b508      	push	{r3, lr}
 800f0fa:	2006      	movs	r0, #6
 800f0fc:	f000 f834 	bl	800f168 <raise>
 800f100:	2001      	movs	r0, #1
 800f102:	f7f3 fa99 	bl	8002638 <_exit>

0800f106 <_malloc_usable_size_r>:
 800f106:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f10a:	1f18      	subs	r0, r3, #4
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	bfbc      	itt	lt
 800f110:	580b      	ldrlt	r3, [r1, r0]
 800f112:	18c0      	addlt	r0, r0, r3
 800f114:	4770      	bx	lr

0800f116 <_raise_r>:
 800f116:	291f      	cmp	r1, #31
 800f118:	b538      	push	{r3, r4, r5, lr}
 800f11a:	4605      	mov	r5, r0
 800f11c:	460c      	mov	r4, r1
 800f11e:	d904      	bls.n	800f12a <_raise_r+0x14>
 800f120:	2316      	movs	r3, #22
 800f122:	6003      	str	r3, [r0, #0]
 800f124:	f04f 30ff 	mov.w	r0, #4294967295
 800f128:	bd38      	pop	{r3, r4, r5, pc}
 800f12a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f12c:	b112      	cbz	r2, 800f134 <_raise_r+0x1e>
 800f12e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f132:	b94b      	cbnz	r3, 800f148 <_raise_r+0x32>
 800f134:	4628      	mov	r0, r5
 800f136:	f000 f831 	bl	800f19c <_getpid_r>
 800f13a:	4622      	mov	r2, r4
 800f13c:	4601      	mov	r1, r0
 800f13e:	4628      	mov	r0, r5
 800f140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f144:	f000 b818 	b.w	800f178 <_kill_r>
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d00a      	beq.n	800f162 <_raise_r+0x4c>
 800f14c:	1c59      	adds	r1, r3, #1
 800f14e:	d103      	bne.n	800f158 <_raise_r+0x42>
 800f150:	2316      	movs	r3, #22
 800f152:	6003      	str	r3, [r0, #0]
 800f154:	2001      	movs	r0, #1
 800f156:	e7e7      	b.n	800f128 <_raise_r+0x12>
 800f158:	2100      	movs	r1, #0
 800f15a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f15e:	4620      	mov	r0, r4
 800f160:	4798      	blx	r3
 800f162:	2000      	movs	r0, #0
 800f164:	e7e0      	b.n	800f128 <_raise_r+0x12>
	...

0800f168 <raise>:
 800f168:	4b02      	ldr	r3, [pc, #8]	@ (800f174 <raise+0xc>)
 800f16a:	4601      	mov	r1, r0
 800f16c:	6818      	ldr	r0, [r3, #0]
 800f16e:	f7ff bfd2 	b.w	800f116 <_raise_r>
 800f172:	bf00      	nop
 800f174:	200001a0 	.word	0x200001a0

0800f178 <_kill_r>:
 800f178:	b538      	push	{r3, r4, r5, lr}
 800f17a:	4d07      	ldr	r5, [pc, #28]	@ (800f198 <_kill_r+0x20>)
 800f17c:	2300      	movs	r3, #0
 800f17e:	4604      	mov	r4, r0
 800f180:	4608      	mov	r0, r1
 800f182:	4611      	mov	r1, r2
 800f184:	602b      	str	r3, [r5, #0]
 800f186:	f7f3 fa47 	bl	8002618 <_kill>
 800f18a:	1c43      	adds	r3, r0, #1
 800f18c:	d102      	bne.n	800f194 <_kill_r+0x1c>
 800f18e:	682b      	ldr	r3, [r5, #0]
 800f190:	b103      	cbz	r3, 800f194 <_kill_r+0x1c>
 800f192:	6023      	str	r3, [r4, #0]
 800f194:	bd38      	pop	{r3, r4, r5, pc}
 800f196:	bf00      	nop
 800f198:	20002d54 	.word	0x20002d54

0800f19c <_getpid_r>:
 800f19c:	f7f3 ba34 	b.w	8002608 <_getpid>

0800f1a0 <_init>:
 800f1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1a2:	bf00      	nop
 800f1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1a6:	bc08      	pop	{r3}
 800f1a8:	469e      	mov	lr, r3
 800f1aa:	4770      	bx	lr

0800f1ac <_fini>:
 800f1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ae:	bf00      	nop
 800f1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1b2:	bc08      	pop	{r3}
 800f1b4:	469e      	mov	lr, r3
 800f1b6:	4770      	bx	lr
